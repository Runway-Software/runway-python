# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.7.6, generator: @autorest/python@5.12.6)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class ActionChainSettingsRequest(msrest.serialization.Model):
    """ActionChainSettingsRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar actions:
    :vartype actions: list[~Runway.Python.models.ActionSettingRequest]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions': {'key': 'actions', 'type': '[ActionSettingRequest]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword actions:
        :paramtype actions: list[~Runway.Python.models.ActionSettingRequest]
        """
        super(ActionChainSettingsRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.actions = kwargs.get('actions', None)


class ActionConfiguration(msrest.serialization.Model):
    """ActionConfiguration.

    :ivar repository_action_id:
    :vartype repository_action_id: str
    :ivar run_on:
    :vartype run_on: str
    :ivar specific_placement_id:
    :vartype specific_placement_id: str
    :ivar connection_id:
    :vartype connection_id: str
    :ivar connection_name:
    :vartype connection_name: str
    :ivar folder:
    :vartype folder: str
    :ivar step_behavior:
    :vartype step_behavior: str
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    """

    _attribute_map = {
        'repository_action_id': {'key': 'repositoryActionId', 'type': 'str'},
        'run_on': {'key': 'runOn', 'type': 'str'},
        'specific_placement_id': {'key': 'specificPlacementId', 'type': 'str'},
        'connection_id': {'key': 'connectionId', 'type': 'str'},
        'connection_name': {'key': 'connectionName', 'type': 'str'},
        'folder': {'key': 'folder', 'type': 'str'},
        'step_behavior': {'key': 'stepBehavior', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword repository_action_id:
        :paramtype repository_action_id: str
        :keyword run_on:
        :paramtype run_on: str
        :keyword specific_placement_id:
        :paramtype specific_placement_id: str
        :keyword connection_id:
        :paramtype connection_id: str
        :keyword connection_name:
        :paramtype connection_name: str
        :keyword folder:
        :paramtype folder: str
        :keyword step_behavior:
        :paramtype step_behavior: str
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        """
        super(ActionConfiguration, self).__init__(**kwargs)
        self.repository_action_id = kwargs.get('repository_action_id', None)
        self.run_on = kwargs.get('run_on', None)
        self.specific_placement_id = kwargs.get('specific_placement_id', None)
        self.connection_id = kwargs.get('connection_id', None)
        self.connection_name = kwargs.get('connection_name', None)
        self.folder = kwargs.get('folder', None)
        self.step_behavior = kwargs.get('step_behavior', None)
        self.settings = kwargs.get('settings', None)


class ActionInstance(msrest.serialization.Model):
    """ActionInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar state: Required. Possible values include: "Uninitialized", "Ready", "Running", "Waiting",
     "Finished".
    :vartype state: str or ~Runway.Python.models.ActionState
    :ivar responsible_runner_id:
    :vartype responsible_runner_id: str
    :ivar next_action_id:
    :vartype next_action_id: str
    :ivar prev_action_id:
    :vartype prev_action_id: str
    :ivar result: Required. Possible values include: "Uninitialized", "Success", "Failure".
    :vartype result: str or ~Runway.Python.models.StepResult
    :ivar result_filename:
    :vartype result_filename: str
    :ivar stdout_content_path:
    :vartype stdout_content_path: str
    :ivar run_on: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
     "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
    :vartype run_on: str or ~Runway.Python.models.RunLocation
    :ivar specific_placement_id:
    :vartype specific_placement_id: str
    :ivar connection_id:
    :vartype connection_id: str
    :ivar connection_name:
    :vartype connection_name: str
    :ivar container_image_name:
    :vartype container_image_name: str
    :ivar repository_action_id:
    :vartype repository_action_id: str
    :ivar action_name:
    :vartype action_name: str
    :ivar settings:
    :vartype settings: list[~Runway.Python.models.ActionSetting]
    """

    _validation = {
        'state': {'required': True},
        'result': {'required': True},
        'run_on': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'responsible_runner_id': {'key': 'responsibleRunnerId', 'type': 'str'},
        'next_action_id': {'key': 'nextActionId', 'type': 'str'},
        'prev_action_id': {'key': 'prevActionId', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
        'result_filename': {'key': 'resultFilename', 'type': 'str'},
        'stdout_content_path': {'key': 'stdoutContentPath', 'type': 'str'},
        'run_on': {'key': 'runOn', 'type': 'str'},
        'specific_placement_id': {'key': 'specificPlacementId', 'type': 'str'},
        'connection_id': {'key': 'connectionId', 'type': 'str'},
        'connection_name': {'key': 'connectionName', 'type': 'str'},
        'container_image_name': {'key': 'containerImageName', 'type': 'str'},
        'repository_action_id': {'key': 'repositoryActionId', 'type': 'str'},
        'action_name': {'key': 'actionName', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '[ActionSetting]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword state: Required. Possible values include: "Uninitialized", "Ready", "Running",
         "Waiting", "Finished".
        :paramtype state: str or ~Runway.Python.models.ActionState
        :keyword responsible_runner_id:
        :paramtype responsible_runner_id: str
        :keyword next_action_id:
        :paramtype next_action_id: str
        :keyword prev_action_id:
        :paramtype prev_action_id: str
        :keyword result: Required. Possible values include: "Uninitialized", "Success", "Failure".
        :paramtype result: str or ~Runway.Python.models.StepResult
        :keyword result_filename:
        :paramtype result_filename: str
        :keyword stdout_content_path:
        :paramtype stdout_content_path: str
        :keyword run_on: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
         "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
        :paramtype run_on: str or ~Runway.Python.models.RunLocation
        :keyword specific_placement_id:
        :paramtype specific_placement_id: str
        :keyword connection_id:
        :paramtype connection_id: str
        :keyword connection_name:
        :paramtype connection_name: str
        :keyword container_image_name:
        :paramtype container_image_name: str
        :keyword repository_action_id:
        :paramtype repository_action_id: str
        :keyword action_name:
        :paramtype action_name: str
        :keyword settings:
        :paramtype settings: list[~Runway.Python.models.ActionSetting]
        """
        super(ActionInstance, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.state = kwargs['state']
        self.responsible_runner_id = kwargs.get('responsible_runner_id', None)
        self.next_action_id = kwargs.get('next_action_id', None)
        self.prev_action_id = kwargs.get('prev_action_id', None)
        self.result = kwargs['result']
        self.result_filename = kwargs.get('result_filename', None)
        self.stdout_content_path = kwargs.get('stdout_content_path', None)
        self.run_on = kwargs['run_on']
        self.specific_placement_id = kwargs.get('specific_placement_id', None)
        self.connection_id = kwargs.get('connection_id', None)
        self.connection_name = kwargs.get('connection_name', None)
        self.container_image_name = kwargs.get('container_image_name', None)
        self.repository_action_id = kwargs.get('repository_action_id', None)
        self.action_name = kwargs.get('action_name', None)
        self.settings = kwargs.get('settings', None)


class ActionResultRequest(msrest.serialization.Model):
    """ActionResultRequest.

    :ivar thread_id:
    :vartype thread_id: str
    :ivar action_id:
    :vartype action_id: str
    """

    _attribute_map = {
        'thread_id': {'key': 'threadId', 'type': 'str'},
        'action_id': {'key': 'actionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword thread_id:
        :paramtype thread_id: str
        :keyword action_id:
        :paramtype action_id: str
        """
        super(ActionResultRequest, self).__init__(**kwargs)
        self.thread_id = kwargs.get('thread_id', None)
        self.action_id = kwargs.get('action_id', None)


class ActionSetting(msrest.serialization.Model):
    """ActionSetting.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar type: Required. Possible values include: "String", "Number", "Boolean", "Password".
    :vartype type: str or ~Runway.Python.models.ActionSettingType
    :ivar value:
    :vartype value: str
    :ivar is_optional: Required.
    :vartype is_optional: bool
    :ivar description:
    :vartype description: str
    :ivar default_value:
    :vartype default_value: str
    """

    _validation = {
        'type': {'required': True},
        'is_optional': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'is_optional': {'key': 'isOptional', 'type': 'bool'},
        'description': {'key': 'description', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword type: Required. Possible values include: "String", "Number", "Boolean", "Password".
        :paramtype type: str or ~Runway.Python.models.ActionSettingType
        :keyword value:
        :paramtype value: str
        :keyword is_optional: Required.
        :paramtype is_optional: bool
        :keyword description:
        :paramtype description: str
        :keyword default_value:
        :paramtype default_value: str
        """
        super(ActionSetting, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs['type']
        self.value = kwargs.get('value', None)
        self.is_optional = kwargs['is_optional']
        self.description = kwargs.get('description', None)
        self.default_value = kwargs.get('default_value', None)


class ActionSettingRequest(msrest.serialization.Model):
    """ActionSettingRequest.

    :ivar repository_action_id:
    :vartype repository_action_id: str
    :ivar run_on:
    :vartype run_on: str
    :ivar specific_placement_id:
    :vartype specific_placement_id: str
    :ivar connection_id:
    :vartype connection_id: str
    :ivar connection_name:
    :vartype connection_name: str
    :ivar folder:
    :vartype folder: str
    :ivar step_behavior:
    :vartype step_behavior: str
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    """

    _attribute_map = {
        'repository_action_id': {'key': 'repositoryActionId', 'type': 'str'},
        'run_on': {'key': 'runOn', 'type': 'str'},
        'specific_placement_id': {'key': 'specificPlacementId', 'type': 'str'},
        'connection_id': {'key': 'connectionId', 'type': 'str'},
        'connection_name': {'key': 'connectionName', 'type': 'str'},
        'folder': {'key': 'folder', 'type': 'str'},
        'step_behavior': {'key': 'stepBehavior', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword repository_action_id:
        :paramtype repository_action_id: str
        :keyword run_on:
        :paramtype run_on: str
        :keyword specific_placement_id:
        :paramtype specific_placement_id: str
        :keyword connection_id:
        :paramtype connection_id: str
        :keyword connection_name:
        :paramtype connection_name: str
        :keyword folder:
        :paramtype folder: str
        :keyword step_behavior:
        :paramtype step_behavior: str
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        """
        super(ActionSettingRequest, self).__init__(**kwargs)
        self.repository_action_id = kwargs.get('repository_action_id', None)
        self.run_on = kwargs.get('run_on', None)
        self.specific_placement_id = kwargs.get('specific_placement_id', None)
        self.connection_id = kwargs.get('connection_id', None)
        self.connection_name = kwargs.get('connection_name', None)
        self.folder = kwargs.get('folder', None)
        self.step_behavior = kwargs.get('step_behavior', None)
        self.settings = kwargs.get('settings', None)


class ActivateUserRequest(msrest.serialization.Model):
    """ActivateUserRequest.

    :ivar token:
    :vartype token: str
    :ivar password:
    :vartype password: str
    :ivar captcha:
    :vartype captcha: str
    """

    _attribute_map = {
        'token': {'key': 'token', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'captcha': {'key': 'captcha', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword token:
        :paramtype token: str
        :keyword password:
        :paramtype password: str
        :keyword captcha:
        :paramtype captcha: str
        """
        super(ActivateUserRequest, self).__init__(**kwargs)
        self.token = kwargs.get('token', None)
        self.password = kwargs.get('password', None)
        self.captcha = kwargs.get('captcha', None)


class AdapterInformation(msrest.serialization.Model):
    """AdapterInformation.

    All required parameters must be populated in order to send to Azure.

    :ivar media_state:
    :vartype media_state: str
    :ivar name:
    :vartype name: str
    :ivar type:
    :vartype type: str
    :ivar mac_address:
    :vartype mac_address: str
    :ivar dhcp_enabled: Required.
    :vartype dhcp_enabled: bool
    :ivar lease_obtained:
    :vartype lease_obtained: str
    :ivar lease_expires:
    :vartype lease_expires: str
    :ivar i_pv6_address:
    :vartype i_pv6_address: str
    :ivar temporary_i_pv6_address:
    :vartype temporary_i_pv6_address: str
    :ivar linklocal_i_pv6_address:
    :vartype linklocal_i_pv6_address: str
    :ivar i_pv4_address:
    :vartype i_pv4_address: str
    :ivar subnet_mask:
    :vartype subnet_mask: str
    :ivar gateway_address:
    :vartype gateway_address: str
    :ivar dhcp_server:
    :vartype dhcp_server: str
    :ivar dhc_pv6_iaid:
    :vartype dhc_pv6_iaid: str
    :ivar dhc_pv6_client_duid:
    :vartype dhc_pv6_client_duid: str
    :ivar dns_servers:
    :vartype dns_servers: list[str]
    :ivar primary_wins_server:
    :vartype primary_wins_server: str
    :ivar secondary_wins_server:
    :vartype secondary_wins_server: str
    :ivar net_bio_sover_tcpip: Required.
    :vartype net_bio_sover_tcpip: bool
    :ivar dns_name:
    :vartype dns_name: str
    :ivar configuration:
    :vartype configuration: str
    """

    _validation = {
        'dhcp_enabled': {'required': True},
        'net_bio_sover_tcpip': {'required': True},
    }

    _attribute_map = {
        'media_state': {'key': 'mediaState', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'dhcp_enabled': {'key': 'dhcpEnabled', 'type': 'bool'},
        'lease_obtained': {'key': 'leaseObtained', 'type': 'str'},
        'lease_expires': {'key': 'leaseExpires', 'type': 'str'},
        'i_pv6_address': {'key': 'iPv6Address', 'type': 'str'},
        'temporary_i_pv6_address': {'key': 'temporaryIPv6Address', 'type': 'str'},
        'linklocal_i_pv6_address': {'key': 'linklocalIPv6Address', 'type': 'str'},
        'i_pv4_address': {'key': 'iPv4Address', 'type': 'str'},
        'subnet_mask': {'key': 'subnetMask', 'type': 'str'},
        'gateway_address': {'key': 'gatewayAddress', 'type': 'str'},
        'dhcp_server': {'key': 'dhcpServer', 'type': 'str'},
        'dhc_pv6_iaid': {'key': 'dhcPv6IAID', 'type': 'str'},
        'dhc_pv6_client_duid': {'key': 'dhcPv6ClientDUID', 'type': 'str'},
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
        'primary_wins_server': {'key': 'primaryWINSServer', 'type': 'str'},
        'secondary_wins_server': {'key': 'secondaryWINSServer', 'type': 'str'},
        'net_bio_sover_tcpip': {'key': 'netBIOSoverTcpip', 'type': 'bool'},
        'dns_name': {'key': 'dnsName', 'type': 'str'},
        'configuration': {'key': 'configuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword media_state:
        :paramtype media_state: str
        :keyword name:
        :paramtype name: str
        :keyword type:
        :paramtype type: str
        :keyword mac_address:
        :paramtype mac_address: str
        :keyword dhcp_enabled: Required.
        :paramtype dhcp_enabled: bool
        :keyword lease_obtained:
        :paramtype lease_obtained: str
        :keyword lease_expires:
        :paramtype lease_expires: str
        :keyword i_pv6_address:
        :paramtype i_pv6_address: str
        :keyword temporary_i_pv6_address:
        :paramtype temporary_i_pv6_address: str
        :keyword linklocal_i_pv6_address:
        :paramtype linklocal_i_pv6_address: str
        :keyword i_pv4_address:
        :paramtype i_pv4_address: str
        :keyword subnet_mask:
        :paramtype subnet_mask: str
        :keyword gateway_address:
        :paramtype gateway_address: str
        :keyword dhcp_server:
        :paramtype dhcp_server: str
        :keyword dhc_pv6_iaid:
        :paramtype dhc_pv6_iaid: str
        :keyword dhc_pv6_client_duid:
        :paramtype dhc_pv6_client_duid: str
        :keyword dns_servers:
        :paramtype dns_servers: list[str]
        :keyword primary_wins_server:
        :paramtype primary_wins_server: str
        :keyword secondary_wins_server:
        :paramtype secondary_wins_server: str
        :keyword net_bio_sover_tcpip: Required.
        :paramtype net_bio_sover_tcpip: bool
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword configuration:
        :paramtype configuration: str
        """
        super(AdapterInformation, self).__init__(**kwargs)
        self.media_state = kwargs.get('media_state', None)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.mac_address = kwargs.get('mac_address', None)
        self.dhcp_enabled = kwargs['dhcp_enabled']
        self.lease_obtained = kwargs.get('lease_obtained', None)
        self.lease_expires = kwargs.get('lease_expires', None)
        self.i_pv6_address = kwargs.get('i_pv6_address', None)
        self.temporary_i_pv6_address = kwargs.get('temporary_i_pv6_address', None)
        self.linklocal_i_pv6_address = kwargs.get('linklocal_i_pv6_address', None)
        self.i_pv4_address = kwargs.get('i_pv4_address', None)
        self.subnet_mask = kwargs.get('subnet_mask', None)
        self.gateway_address = kwargs.get('gateway_address', None)
        self.dhcp_server = kwargs.get('dhcp_server', None)
        self.dhc_pv6_iaid = kwargs.get('dhc_pv6_iaid', None)
        self.dhc_pv6_client_duid = kwargs.get('dhc_pv6_client_duid', None)
        self.dns_servers = kwargs.get('dns_servers', None)
        self.primary_wins_server = kwargs.get('primary_wins_server', None)
        self.secondary_wins_server = kwargs.get('secondary_wins_server', None)
        self.net_bio_sover_tcpip = kwargs['net_bio_sover_tcpip']
        self.dns_name = kwargs.get('dns_name', None)
        self.configuration = kwargs.get('configuration', None)


class AssetMap(msrest.serialization.Model):
    """AssetMap.

    :ivar endpoint_data:
    :vartype endpoint_data: list[~Runway.Python.models.AssetMapEndpoint]
    :ivar kubernetes_data:
    :vartype kubernetes_data: list[~Runway.Python.models.KubernetesEndpoint]
    """

    _attribute_map = {
        'endpoint_data': {'key': 'endpointData', 'type': '[AssetMapEndpoint]'},
        'kubernetes_data': {'key': 'kubernetesData', 'type': '[KubernetesEndpoint]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpoint_data:
        :paramtype endpoint_data: list[~Runway.Python.models.AssetMapEndpoint]
        :keyword kubernetes_data:
        :paramtype kubernetes_data: list[~Runway.Python.models.KubernetesEndpoint]
        """
        super(AssetMap, self).__init__(**kwargs)
        self.endpoint_data = kwargs.get('endpoint_data', None)
        self.kubernetes_data = kwargs.get('kubernetes_data', None)


class RunwayObject(msrest.serialization.Model):
    """RunwayObject.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        """
        super(RunwayObject, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.revision = kwargs['revision']
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.tags = kwargs.get('tags', None)
        self.groups = kwargs.get('groups', None)
        self.is_selected = kwargs['is_selected']


class RunwayAsset(RunwayObject):
    """RunwayAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        """
        super(RunwayAsset, self).__init__(**kwargs)


class RunwayAccountAsset(RunwayAsset):
    """RunwayAccountAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar endpoint_id:
    :vartype endpoint_id: str
    :ivar endpoint_hostname:
    :vartype endpoint_hostname: str
    :ivar instance_timestamp: Required.
    :vartype instance_timestamp: ~datetime.datetime
    :ivar username:
    :vartype username: str
    :ivar domain:
    :vartype domain: str
    :ivar sid:
    :vartype sid: str
    :ivar instance_type:
    :vartype instance_type: str
    :ivar security_groups:
    :vartype security_groups: list[str]
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'instance_timestamp': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'endpoint_id': {'key': 'endpointId', 'type': 'str'},
        'endpoint_hostname': {'key': 'endpointHostname', 'type': 'str'},
        'instance_timestamp': {'key': 'instanceTimestamp', 'type': 'iso-8601'},
        'username': {'key': 'username', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'sid': {'key': 'sid', 'type': 'str'},
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'security_groups': {'key': 'securityGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword endpoint_id:
        :paramtype endpoint_id: str
        :keyword endpoint_hostname:
        :paramtype endpoint_hostname: str
        :keyword instance_timestamp: Required.
        :paramtype instance_timestamp: ~datetime.datetime
        :keyword username:
        :paramtype username: str
        :keyword domain:
        :paramtype domain: str
        :keyword sid:
        :paramtype sid: str
        :keyword instance_type:
        :paramtype instance_type: str
        :keyword security_groups:
        :paramtype security_groups: list[str]
        """
        super(RunwayAccountAsset, self).__init__(**kwargs)
        self.endpoint_id = kwargs.get('endpoint_id', None)
        self.endpoint_hostname = kwargs.get('endpoint_hostname', None)
        self.instance_timestamp = kwargs['instance_timestamp']
        self.username = kwargs.get('username', None)
        self.domain = kwargs.get('domain', None)
        self.sid = kwargs.get('sid', None)
        self.instance_type = kwargs.get('instance_type', None)
        self.security_groups = kwargs.get('security_groups', None)


class AssetMapAccountView(RunwayAccountAsset):
    """AssetMapAccountView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar endpoint_id:
    :vartype endpoint_id: str
    :ivar endpoint_hostname:
    :vartype endpoint_hostname: str
    :ivar instance_timestamp: Required.
    :vartype instance_timestamp: ~datetime.datetime
    :ivar username:
    :vartype username: str
    :ivar domain:
    :vartype domain: str
    :ivar sid:
    :vartype sid: str
    :ivar instance_type:
    :vartype instance_type: str
    :ivar security_groups:
    :vartype security_groups: list[str]
    :ivar endpoint_count: Required.
    :vartype endpoint_count: int
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'instance_timestamp': {'required': True},
        'endpoint_count': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'endpoint_id': {'key': 'endpointId', 'type': 'str'},
        'endpoint_hostname': {'key': 'endpointHostname', 'type': 'str'},
        'instance_timestamp': {'key': 'instanceTimestamp', 'type': 'iso-8601'},
        'username': {'key': 'username', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'sid': {'key': 'sid', 'type': 'str'},
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'security_groups': {'key': 'securityGroups', 'type': '[str]'},
        'endpoint_count': {'key': 'endpointCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword endpoint_id:
        :paramtype endpoint_id: str
        :keyword endpoint_hostname:
        :paramtype endpoint_hostname: str
        :keyword instance_timestamp: Required.
        :paramtype instance_timestamp: ~datetime.datetime
        :keyword username:
        :paramtype username: str
        :keyword domain:
        :paramtype domain: str
        :keyword sid:
        :paramtype sid: str
        :keyword instance_type:
        :paramtype instance_type: str
        :keyword security_groups:
        :paramtype security_groups: list[str]
        :keyword endpoint_count: Required.
        :paramtype endpoint_count: int
        """
        super(AssetMapAccountView, self).__init__(**kwargs)
        self.endpoint_count = kwargs['endpoint_count']


class AssetMapArpCache(msrest.serialization.Model):
    """AssetMapArpCache.

    :ivar ip_address:
    :vartype ip_address: str
    :ivar mac_address:
    :vartype mac_address: str
    """

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ip_address:
        :paramtype ip_address: str
        :keyword mac_address:
        :paramtype mac_address: str
        """
        super(AssetMapArpCache, self).__init__(**kwargs)
        self.ip_address = kwargs.get('ip_address', None)
        self.mac_address = kwargs.get('mac_address', None)


class AssetMapDataPair(msrest.serialization.Model):
    """AssetMapDataPair.

    :ivar name:
    :vartype name: str
    :ivar value:
    :vartype value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword value:
        :paramtype value: str
        """
        super(AssetMapDataPair, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class AssetMapEndpoint(msrest.serialization.Model):
    """AssetMapEndpoint.

    All required parameters must be populated in order to send to Azure.

    :ivar unique_fingerprint:
    :vartype unique_fingerprint: str
    :ivar dns_name:
    :vartype dns_name: str
    :ivar local_name:
    :vartype local_name: str
    :ivar ip_address:
    :vartype ip_address: str
    :ivar mac_address:
    :vartype mac_address: str
    :ivar gateway_address:
    :vartype gateway_address: str
    :ivar known_mac:
    :vartype known_mac: str
    :ivar endpoint_type:
    :vartype endpoint_type: str
    :ivar type_hint: Required.
    :vartype type_hint: int
    :ivar system_info:
    :vartype system_info: list[~Runway.Python.models.AssetMapDataPair]
    :ivar interfaces:
    :vartype interfaces: list[~Runway.Python.models.AssetMapNetworkInterface]
    :ivar user_accounts:
    :vartype user_accounts: list[~Runway.Python.models.AssetMapUserAccount]
    :ivar props:
    :vartype props: list[~Runway.Python.models.AssetMapDataPair]
    """

    _validation = {
        'type_hint': {'required': True},
    }

    _attribute_map = {
        'unique_fingerprint': {'key': 'uniqueFingerprint', 'type': 'str'},
        'dns_name': {'key': 'dnsName', 'type': 'str'},
        'local_name': {'key': 'localName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'gateway_address': {'key': 'gatewayAddress', 'type': 'str'},
        'known_mac': {'key': 'knownMAC', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'type_hint': {'key': 'typeHint', 'type': 'int'},
        'system_info': {'key': 'systemInfo', 'type': '[AssetMapDataPair]'},
        'interfaces': {'key': 'interfaces', 'type': '[AssetMapNetworkInterface]'},
        'user_accounts': {'key': 'userAccounts', 'type': '[AssetMapUserAccount]'},
        'props': {'key': 'props', 'type': '[AssetMapDataPair]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword unique_fingerprint:
        :paramtype unique_fingerprint: str
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword local_name:
        :paramtype local_name: str
        :keyword ip_address:
        :paramtype ip_address: str
        :keyword mac_address:
        :paramtype mac_address: str
        :keyword gateway_address:
        :paramtype gateway_address: str
        :keyword known_mac:
        :paramtype known_mac: str
        :keyword endpoint_type:
        :paramtype endpoint_type: str
        :keyword type_hint: Required.
        :paramtype type_hint: int
        :keyword system_info:
        :paramtype system_info: list[~Runway.Python.models.AssetMapDataPair]
        :keyword interfaces:
        :paramtype interfaces: list[~Runway.Python.models.AssetMapNetworkInterface]
        :keyword user_accounts:
        :paramtype user_accounts: list[~Runway.Python.models.AssetMapUserAccount]
        :keyword props:
        :paramtype props: list[~Runway.Python.models.AssetMapDataPair]
        """
        super(AssetMapEndpoint, self).__init__(**kwargs)
        self.unique_fingerprint = kwargs.get('unique_fingerprint', None)
        self.dns_name = kwargs.get('dns_name', None)
        self.local_name = kwargs.get('local_name', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.mac_address = kwargs.get('mac_address', None)
        self.gateway_address = kwargs.get('gateway_address', None)
        self.known_mac = kwargs.get('known_mac', None)
        self.endpoint_type = kwargs.get('endpoint_type', None)
        self.type_hint = kwargs['type_hint']
        self.system_info = kwargs.get('system_info', None)
        self.interfaces = kwargs.get('interfaces', None)
        self.user_accounts = kwargs.get('user_accounts', None)
        self.props = kwargs.get('props', None)


class RunwayEndpointAsset(RunwayAsset):
    """RunwayEndpointAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar unique_fingerprint:
    :vartype unique_fingerprint: str
    :ivar endpoint_type:
    :vartype endpoint_type: str
    :ivar build_information:
    :vartype build_information: str
    :ivar os_name:
    :vartype os_name: str
    :ivar os_version:
    :vartype os_version: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar last_ip_address:
    :vartype last_ip_address: str
    :ivar last_gateway_address:
    :vartype last_gateway_address: str
    :ivar last_host_name:
    :vartype last_host_name: str
    :ivar last_local_name:
    :vartype last_local_name: str
    :ivar preferred_mac_address:
    :vartype preferred_mac_address: str
    :ivar organizational_unit:
    :vartype organizational_unit: str
    :ivar adapters:
    :vartype adapters: list[~Runway.Python.models.AdapterInformation]
    :ivar meta_data: Dictionary of :code:`<string>`.
    :vartype meta_data: dict[str, str]
    :ivar is_pending_delete: Required.
    :vartype is_pending_delete: bool
    :ivar membership_flag: Required.
    :vartype membership_flag: bool
    :ivar has_active_runner: Required.
    :vartype has_active_runner: bool
    :ivar has_runner: Required.
    :vartype has_runner: bool
    :ivar runner_count: Required.
    :vartype runner_count: int
    :ivar runner_affinity: Required. Possible values include: "EphemeralContainer",
     "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype runner_affinity: str or ~Runway.Python.models.NodeAffinity
    :ivar last_thread_id:
    :vartype last_thread_id: str
    :ivar last_thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype last_thread_state: str or ~Runway.Python.models.JobThreadState
    :ivar device_type:
    :vartype device_type: str
    :ivar hardware_product:
    :vartype hardware_product: str
    :ivar kubernetes_data: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
    :vartype kubernetes_data: dict[str, ~Runway.Python.models.RunwayKubernetesEndpoint]
    :ivar enrollment_os_name:
    :vartype enrollment_os_name: str
    :ivar discovery_os_name:
    :vartype discovery_os_name: str
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'is_pending_delete': {'required': True},
        'membership_flag': {'required': True},
        'has_active_runner': {'required': True},
        'has_runner': {'required': True},
        'runner_count': {'required': True},
        'runner_affinity': {'required': True},
        'last_thread_state': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'unique_fingerprint': {'key': 'uniqueFingerprint', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'build_information': {'key': 'buildInformation', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'last_ip_address': {'key': 'lastIpAddress', 'type': 'str'},
        'last_gateway_address': {'key': 'lastGatewayAddress', 'type': 'str'},
        'last_host_name': {'key': 'lastHostName', 'type': 'str'},
        'last_local_name': {'key': 'lastLocalName', 'type': 'str'},
        'preferred_mac_address': {'key': 'preferredMacAddress', 'type': 'str'},
        'organizational_unit': {'key': 'organizationalUnit', 'type': 'str'},
        'adapters': {'key': 'adapters', 'type': '[AdapterInformation]'},
        'meta_data': {'key': 'metaData', 'type': '{str}'},
        'is_pending_delete': {'key': 'isPendingDelete', 'type': 'bool'},
        'membership_flag': {'key': 'membershipFlag', 'type': 'bool'},
        'has_active_runner': {'key': 'hasActiveRunner', 'type': 'bool'},
        'has_runner': {'key': 'hasRunner', 'type': 'bool'},
        'runner_count': {'key': 'runnerCount', 'type': 'int'},
        'runner_affinity': {'key': 'runnerAffinity', 'type': 'str'},
        'last_thread_id': {'key': 'lastThreadId', 'type': 'str'},
        'last_thread_state': {'key': 'lastThreadState', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'hardware_product': {'key': 'hardwareProduct', 'type': 'str'},
        'kubernetes_data': {'key': 'kubernetesData', 'type': '{RunwayKubernetesEndpoint}'},
        'enrollment_os_name': {'key': 'enrollmentOSName', 'type': 'str'},
        'discovery_os_name': {'key': 'discoveryOSName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword unique_fingerprint:
        :paramtype unique_fingerprint: str
        :keyword endpoint_type:
        :paramtype endpoint_type: str
        :keyword build_information:
        :paramtype build_information: str
        :keyword os_name:
        :paramtype os_name: str
        :keyword os_version:
        :paramtype os_version: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword last_ip_address:
        :paramtype last_ip_address: str
        :keyword last_gateway_address:
        :paramtype last_gateway_address: str
        :keyword last_host_name:
        :paramtype last_host_name: str
        :keyword last_local_name:
        :paramtype last_local_name: str
        :keyword preferred_mac_address:
        :paramtype preferred_mac_address: str
        :keyword organizational_unit:
        :paramtype organizational_unit: str
        :keyword adapters:
        :paramtype adapters: list[~Runway.Python.models.AdapterInformation]
        :keyword meta_data: Dictionary of :code:`<string>`.
        :paramtype meta_data: dict[str, str]
        :keyword is_pending_delete: Required.
        :paramtype is_pending_delete: bool
        :keyword membership_flag: Required.
        :paramtype membership_flag: bool
        :keyword has_active_runner: Required.
        :paramtype has_active_runner: bool
        :keyword has_runner: Required.
        :paramtype has_runner: bool
        :keyword runner_count: Required.
        :paramtype runner_count: int
        :keyword runner_affinity: Required. Possible values include: "EphemeralContainer",
         "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype runner_affinity: str or ~Runway.Python.models.NodeAffinity
        :keyword last_thread_id:
        :paramtype last_thread_id: str
        :keyword last_thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype last_thread_state: str or ~Runway.Python.models.JobThreadState
        :keyword device_type:
        :paramtype device_type: str
        :keyword hardware_product:
        :paramtype hardware_product: str
        :keyword kubernetes_data: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
        :paramtype kubernetes_data: dict[str, ~Runway.Python.models.RunwayKubernetesEndpoint]
        :keyword enrollment_os_name:
        :paramtype enrollment_os_name: str
        :keyword discovery_os_name:
        :paramtype discovery_os_name: str
        """
        super(RunwayEndpointAsset, self).__init__(**kwargs)
        self.unique_fingerprint = kwargs.get('unique_fingerprint', None)
        self.endpoint_type = kwargs.get('endpoint_type', None)
        self.build_information = kwargs.get('build_information', None)
        self.os_name = kwargs.get('os_name', None)
        self.os_version = kwargs.get('os_version', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.last_ip_address = kwargs.get('last_ip_address', None)
        self.last_gateway_address = kwargs.get('last_gateway_address', None)
        self.last_host_name = kwargs.get('last_host_name', None)
        self.last_local_name = kwargs.get('last_local_name', None)
        self.preferred_mac_address = kwargs.get('preferred_mac_address', None)
        self.organizational_unit = kwargs.get('organizational_unit', None)
        self.adapters = kwargs.get('adapters', None)
        self.meta_data = kwargs.get('meta_data', None)
        self.is_pending_delete = kwargs['is_pending_delete']
        self.membership_flag = kwargs['membership_flag']
        self.has_active_runner = kwargs['has_active_runner']
        self.has_runner = kwargs['has_runner']
        self.runner_count = kwargs['runner_count']
        self.runner_affinity = kwargs['runner_affinity']
        self.last_thread_id = kwargs.get('last_thread_id', None)
        self.last_thread_state = kwargs['last_thread_state']
        self.device_type = kwargs.get('device_type', None)
        self.hardware_product = kwargs.get('hardware_product', None)
        self.kubernetes_data = kwargs.get('kubernetes_data', None)
        self.enrollment_os_name = kwargs.get('enrollment_os_name', None)
        self.discovery_os_name = kwargs.get('discovery_os_name', None)


class AssetMapEndpointView(RunwayEndpointAsset):
    """AssetMapEndpointView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar unique_fingerprint:
    :vartype unique_fingerprint: str
    :ivar endpoint_type:
    :vartype endpoint_type: str
    :ivar build_information:
    :vartype build_information: str
    :ivar os_name:
    :vartype os_name: str
    :ivar os_version:
    :vartype os_version: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar last_ip_address:
    :vartype last_ip_address: str
    :ivar last_gateway_address:
    :vartype last_gateway_address: str
    :ivar last_host_name:
    :vartype last_host_name: str
    :ivar last_local_name:
    :vartype last_local_name: str
    :ivar preferred_mac_address:
    :vartype preferred_mac_address: str
    :ivar organizational_unit:
    :vartype organizational_unit: str
    :ivar adapters:
    :vartype adapters: list[~Runway.Python.models.AdapterInformation]
    :ivar meta_data: Dictionary of :code:`<string>`.
    :vartype meta_data: dict[str, str]
    :ivar is_pending_delete: Required.
    :vartype is_pending_delete: bool
    :ivar membership_flag: Required.
    :vartype membership_flag: bool
    :ivar has_active_runner: Required.
    :vartype has_active_runner: bool
    :ivar has_runner: Required.
    :vartype has_runner: bool
    :ivar runner_count: Required.
    :vartype runner_count: int
    :ivar runner_affinity: Required. Possible values include: "EphemeralContainer",
     "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype runner_affinity: str or ~Runway.Python.models.NodeAffinity
    :ivar last_thread_id:
    :vartype last_thread_id: str
    :ivar last_thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype last_thread_state: str or ~Runway.Python.models.JobThreadState
    :ivar device_type:
    :vartype device_type: str
    :ivar hardware_product:
    :vartype hardware_product: str
    :ivar kubernetes_data: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
    :vartype kubernetes_data: dict[str, ~Runway.Python.models.RunwayKubernetesEndpoint]
    :ivar enrollment_os_name:
    :vartype enrollment_os_name: str
    :ivar discovery_os_name:
    :vartype discovery_os_name: str
    :ivar users:
    :vartype users: list[~Runway.Python.models.AssetMapAccountView]
    :ivar user_count: Required.
    :vartype user_count: int
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'is_pending_delete': {'required': True},
        'membership_flag': {'required': True},
        'has_active_runner': {'required': True},
        'has_runner': {'required': True},
        'runner_count': {'required': True},
        'runner_affinity': {'required': True},
        'last_thread_state': {'required': True},
        'user_count': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'unique_fingerprint': {'key': 'uniqueFingerprint', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'build_information': {'key': 'buildInformation', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'last_ip_address': {'key': 'lastIpAddress', 'type': 'str'},
        'last_gateway_address': {'key': 'lastGatewayAddress', 'type': 'str'},
        'last_host_name': {'key': 'lastHostName', 'type': 'str'},
        'last_local_name': {'key': 'lastLocalName', 'type': 'str'},
        'preferred_mac_address': {'key': 'preferredMacAddress', 'type': 'str'},
        'organizational_unit': {'key': 'organizationalUnit', 'type': 'str'},
        'adapters': {'key': 'adapters', 'type': '[AdapterInformation]'},
        'meta_data': {'key': 'metaData', 'type': '{str}'},
        'is_pending_delete': {'key': 'isPendingDelete', 'type': 'bool'},
        'membership_flag': {'key': 'membershipFlag', 'type': 'bool'},
        'has_active_runner': {'key': 'hasActiveRunner', 'type': 'bool'},
        'has_runner': {'key': 'hasRunner', 'type': 'bool'},
        'runner_count': {'key': 'runnerCount', 'type': 'int'},
        'runner_affinity': {'key': 'runnerAffinity', 'type': 'str'},
        'last_thread_id': {'key': 'lastThreadId', 'type': 'str'},
        'last_thread_state': {'key': 'lastThreadState', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'hardware_product': {'key': 'hardwareProduct', 'type': 'str'},
        'kubernetes_data': {'key': 'kubernetesData', 'type': '{RunwayKubernetesEndpoint}'},
        'enrollment_os_name': {'key': 'enrollmentOSName', 'type': 'str'},
        'discovery_os_name': {'key': 'discoveryOSName', 'type': 'str'},
        'users': {'key': 'users', 'type': '[AssetMapAccountView]'},
        'user_count': {'key': 'userCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword unique_fingerprint:
        :paramtype unique_fingerprint: str
        :keyword endpoint_type:
        :paramtype endpoint_type: str
        :keyword build_information:
        :paramtype build_information: str
        :keyword os_name:
        :paramtype os_name: str
        :keyword os_version:
        :paramtype os_version: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword last_ip_address:
        :paramtype last_ip_address: str
        :keyword last_gateway_address:
        :paramtype last_gateway_address: str
        :keyword last_host_name:
        :paramtype last_host_name: str
        :keyword last_local_name:
        :paramtype last_local_name: str
        :keyword preferred_mac_address:
        :paramtype preferred_mac_address: str
        :keyword organizational_unit:
        :paramtype organizational_unit: str
        :keyword adapters:
        :paramtype adapters: list[~Runway.Python.models.AdapterInformation]
        :keyword meta_data: Dictionary of :code:`<string>`.
        :paramtype meta_data: dict[str, str]
        :keyword is_pending_delete: Required.
        :paramtype is_pending_delete: bool
        :keyword membership_flag: Required.
        :paramtype membership_flag: bool
        :keyword has_active_runner: Required.
        :paramtype has_active_runner: bool
        :keyword has_runner: Required.
        :paramtype has_runner: bool
        :keyword runner_count: Required.
        :paramtype runner_count: int
        :keyword runner_affinity: Required. Possible values include: "EphemeralContainer",
         "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype runner_affinity: str or ~Runway.Python.models.NodeAffinity
        :keyword last_thread_id:
        :paramtype last_thread_id: str
        :keyword last_thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype last_thread_state: str or ~Runway.Python.models.JobThreadState
        :keyword device_type:
        :paramtype device_type: str
        :keyword hardware_product:
        :paramtype hardware_product: str
        :keyword kubernetes_data: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
        :paramtype kubernetes_data: dict[str, ~Runway.Python.models.RunwayKubernetesEndpoint]
        :keyword enrollment_os_name:
        :paramtype enrollment_os_name: str
        :keyword discovery_os_name:
        :paramtype discovery_os_name: str
        :keyword users:
        :paramtype users: list[~Runway.Python.models.AssetMapAccountView]
        :keyword user_count: Required.
        :paramtype user_count: int
        """
        super(AssetMapEndpointView, self).__init__(**kwargs)
        self.users = kwargs.get('users', None)
        self.user_count = kwargs['user_count']


class AssetMapNetworkInterface(msrest.serialization.Model):
    """AssetMapNetworkInterface.

    :ivar dns_name:
    :vartype dns_name: str
    :ivar ip_address:
    :vartype ip_address: str
    :ivar mac_address:
    :vartype mac_address: str
    :ivar gateway_address:
    :vartype gateway_address: str
    :ivar index:
    :vartype index: str
    :ivar arp_cache:
    :vartype arp_cache: list[~Runway.Python.models.AssetMapArpCache]
    """

    _attribute_map = {
        'dns_name': {'key': 'dnsName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'gateway_address': {'key': 'gatewayAddress', 'type': 'str'},
        'index': {'key': 'index', 'type': 'str'},
        'arp_cache': {'key': 'arpCache', 'type': '[AssetMapArpCache]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword ip_address:
        :paramtype ip_address: str
        :keyword mac_address:
        :paramtype mac_address: str
        :keyword gateway_address:
        :paramtype gateway_address: str
        :keyword index:
        :paramtype index: str
        :keyword arp_cache:
        :paramtype arp_cache: list[~Runway.Python.models.AssetMapArpCache]
        """
        super(AssetMapNetworkInterface, self).__init__(**kwargs)
        self.dns_name = kwargs.get('dns_name', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.mac_address = kwargs.get('mac_address', None)
        self.gateway_address = kwargs.get('gateway_address', None)
        self.index = kwargs.get('index', None)
        self.arp_cache = kwargs.get('arp_cache', None)


class AssetMapUserAccount(msrest.serialization.Model):
    """AssetMapUserAccount.

    :ivar account_data:
    :vartype account_data: list[~Runway.Python.models.AssetMapDataPair]
    """

    _attribute_map = {
        'account_data': {'key': 'accountData', 'type': '[AssetMapDataPair]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_data:
        :paramtype account_data: list[~Runway.Python.models.AssetMapDataPair]
        """
        super(AssetMapUserAccount, self).__init__(**kwargs)
        self.account_data = kwargs.get('account_data', None)


class CheckResultResponse(msrest.serialization.Model):
    """CheckResultResponse.

    :ivar notify_id:
    :vartype notify_id: str
    :ivar content_id:
    :vartype content_id: str
    :ivar in_progress_update_time:
    :vartype in_progress_update_time: ~datetime.datetime
    :ivar error:
    :vartype error: str
    """

    _attribute_map = {
        'notify_id': {'key': 'notifyId', 'type': 'str'},
        'content_id': {'key': 'contentId', 'type': 'str'},
        'in_progress_update_time': {'key': 'inProgressUpdateTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword notify_id:
        :paramtype notify_id: str
        :keyword content_id:
        :paramtype content_id: str
        :keyword in_progress_update_time:
        :paramtype in_progress_update_time: ~datetime.datetime
        :keyword error:
        :paramtype error: str
        """
        super(CheckResultResponse, self).__init__(**kwargs)
        self.notify_id = kwargs.get('notify_id', None)
        self.content_id = kwargs.get('content_id', None)
        self.in_progress_update_time = kwargs.get('in_progress_update_time', None)
        self.error = kwargs.get('error', None)


class CompileJobRequest(msrest.serialization.Model):
    """CompileJobRequest.

    :ivar action_chain_command:
    :vartype action_chain_command: str
    """

    _attribute_map = {
        'action_chain_command': {'key': 'actionChainCommand', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword action_chain_command:
        :paramtype action_chain_command: str
        """
        super(CompileJobRequest, self).__init__(**kwargs)
        self.action_chain_command = kwargs.get('action_chain_command', None)


class Content(msrest.serialization.Model):
    """Content.

    :ivar content_type:
    :vartype content_type: str
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword content_type:
        :paramtype content_type: str
        """
        super(Content, self).__init__(**kwargs)
        self.content_type = kwargs.get('content_type', None)


class ContentInfo(msrest.serialization.Model):
    """ContentInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar m_d5:
    :vartype m_d5: str
    :ivar content_type:
    :vartype content_type: str
    :ivar length: Required.
    :vartype length: long
    """

    _validation = {
        'length': {'required': True},
    }

    _attribute_map = {
        'm_d5': {'key': 'mD5', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'length': {'key': 'length', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword m_d5:
        :paramtype m_d5: str
        :keyword content_type:
        :paramtype content_type: str
        :keyword length: Required.
        :paramtype length: long
        """
        super(ContentInfo, self).__init__(**kwargs)
        self.m_d5 = kwargs.get('m_d5', None)
        self.content_type = kwargs.get('content_type', None)
        self.length = kwargs['length']


class ContentView(Content):
    """ContentView.

    All required parameters must be populated in order to send to Azure.

    :ivar content_type:
    :vartype content_type: str
    :ivar id:
    :vartype id: str
    :ivar path:
    :vartype path: str
    :ivar title:
    :vartype title: str
    :ivar version:
    :vartype version: str
    :ivar key:
    :vartype key: str
    :ivar platform: Required. Possible values include: "Agnostic", "Cloud", "Windows64",
     "Windows32", "Linux64", "Linux32", "MacOS", "Android", "iOS".
    :vartype platform: str or ~Runway.Python.models.Platform
    :ivar length: Required.
    :vartype length: long
    :ivar md5:
    :vartype md5: str
    """

    _validation = {
        'platform': {'required': True},
        'length': {'required': True},
    }

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'platform': {'key': 'platform', 'type': 'str'},
        'length': {'key': 'length', 'type': 'long'},
        'md5': {'key': 'md5', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword content_type:
        :paramtype content_type: str
        :keyword id:
        :paramtype id: str
        :keyword path:
        :paramtype path: str
        :keyword title:
        :paramtype title: str
        :keyword version:
        :paramtype version: str
        :keyword key:
        :paramtype key: str
        :keyword platform: Required. Possible values include: "Agnostic", "Cloud", "Windows64",
         "Windows32", "Linux64", "Linux32", "MacOS", "Android", "iOS".
        :paramtype platform: str or ~Runway.Python.models.Platform
        :keyword length: Required.
        :paramtype length: long
        :keyword md5:
        :paramtype md5: str
        """
        super(ContentView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.path = kwargs.get('path', None)
        self.title = kwargs.get('title', None)
        self.version = kwargs.get('version', None)
        self.key = kwargs.get('key', None)
        self.platform = kwargs['platform']
        self.length = kwargs['length']
        self.md5 = kwargs.get('md5', None)


class CreateActionRequest(msrest.serialization.Model):
    """CreateActionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar content_id:
    :vartype content_id: str
    :ivar is_public: Required.
    :vartype is_public: bool
    """

    _validation = {
        'is_public': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'content_id': {'key': 'contentId', 'type': 'str'},
        'is_public': {'key': 'isPublic', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword content_id:
        :paramtype content_id: str
        :keyword is_public: Required.
        :paramtype is_public: bool
        """
        super(CreateActionRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.content_id = kwargs.get('content_id', None)
        self.is_public = kwargs['is_public']


class CreateConnectionRequest(msrest.serialization.Model):
    """CreateConnectionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar group_id:
    :vartype group_id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar assigned_endpoint_id:
    :vartype assigned_endpoint_id: str
    :ivar runner_id:
    :vartype runner_id: str
    :ivar action_id:
    :vartype action_id: str
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    """

    _validation = {
        'is_hidden': {'required': True},
    }

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'assigned_endpoint_id': {'key': 'assignedEndpointId', 'type': 'str'},
        'runner_id': {'key': 'runnerId', 'type': 'str'},
        'action_id': {'key': 'actionId', 'type': 'str'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword group_id:
        :paramtype group_id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword assigned_endpoint_id:
        :paramtype assigned_endpoint_id: str
        :keyword runner_id:
        :paramtype runner_id: str
        :keyword action_id:
        :paramtype action_id: str
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        """
        super(CreateConnectionRequest, self).__init__(**kwargs)
        self.group_id = kwargs.get('group_id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.assigned_endpoint_id = kwargs.get('assigned_endpoint_id', None)
        self.runner_id = kwargs.get('runner_id', None)
        self.action_id = kwargs.get('action_id', None)
        self.is_hidden = kwargs['is_hidden']
        self.settings = kwargs.get('settings', None)


class CreateEnrollmentSessionRequest(msrest.serialization.Model):
    """CreateEnrollmentSessionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Possible values include: "Uninitialized", "AddMembership",
     "ActivateUserCredential", "EnrollEphemeralContainer", "EnrollPersistentRunner",
     "EnrollCloudWorker", "EnrollPersistentCloud".
    :vartype type: str or ~Runway.Python.models.EnrollmentType
    :ivar expiration: Required.
    :vartype expiration: ~datetime.datetime
    :ivar group_id:
    :vartype group_id: str
    :ivar job_ids:
    :vartype job_ids: list[str]
    :ivar is_one_time: Required.
    :vartype is_one_time: bool
    """

    _validation = {
        'type': {'required': True},
        'expiration': {'required': True},
        'is_one_time': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'expiration': {'key': 'expiration', 'type': 'iso-8601'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'job_ids': {'key': 'jobIds', 'type': '[str]'},
        'is_one_time': {'key': 'isOneTime', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Required. Possible values include: "Uninitialized", "AddMembership",
         "ActivateUserCredential", "EnrollEphemeralContainer", "EnrollPersistentRunner",
         "EnrollCloudWorker", "EnrollPersistentCloud".
        :paramtype type: str or ~Runway.Python.models.EnrollmentType
        :keyword expiration: Required.
        :paramtype expiration: ~datetime.datetime
        :keyword group_id:
        :paramtype group_id: str
        :keyword job_ids:
        :paramtype job_ids: list[str]
        :keyword is_one_time: Required.
        :paramtype is_one_time: bool
        """
        super(CreateEnrollmentSessionRequest, self).__init__(**kwargs)
        self.type = kwargs['type']
        self.expiration = kwargs['expiration']
        self.group_id = kwargs.get('group_id', None)
        self.job_ids = kwargs.get('job_ids', None)
        self.is_one_time = kwargs['is_one_time']


class UpdateGroupRequest(msrest.serialization.Model):
    """UpdateGroupRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tenant_company_name:
    :vartype tenant_company_name: str
    :ivar tenant_point_of_contact:
    :vartype tenant_point_of_contact: str
    :ivar tenant_phone_number:
    :vartype tenant_phone_number: str
    :ivar tenant_other_details:
    :vartype tenant_other_details: str
    :ivar tenant_expiration:
    :vartype tenant_expiration: str
    :ivar license_allocated_runners: Required.
    :vartype license_allocated_runners: int
    :ivar license_expiration:
    :vartype license_expiration: str
    :ivar license_can_assign_sub_licenses: Required.
    :vartype license_can_assign_sub_licenses: bool
    :ivar portrait_url:
    :vartype portrait_url: str
    """

    _validation = {
        'license_allocated_runners': {'required': True},
        'license_can_assign_sub_licenses': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tenant_company_name': {'key': 'tenantCompanyName', 'type': 'str'},
        'tenant_point_of_contact': {'key': 'tenantPointOfContact', 'type': 'str'},
        'tenant_phone_number': {'key': 'tenantPhoneNumber', 'type': 'str'},
        'tenant_other_details': {'key': 'tenantOtherDetails', 'type': 'str'},
        'tenant_expiration': {'key': 'tenantExpiration', 'type': 'str'},
        'license_allocated_runners': {'key': 'licenseAllocatedRunners', 'type': 'int'},
        'license_expiration': {'key': 'licenseExpiration', 'type': 'str'},
        'license_can_assign_sub_licenses': {'key': 'licenseCanAssignSubLicenses', 'type': 'bool'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tenant_company_name:
        :paramtype tenant_company_name: str
        :keyword tenant_point_of_contact:
        :paramtype tenant_point_of_contact: str
        :keyword tenant_phone_number:
        :paramtype tenant_phone_number: str
        :keyword tenant_other_details:
        :paramtype tenant_other_details: str
        :keyword tenant_expiration:
        :paramtype tenant_expiration: str
        :keyword license_allocated_runners: Required.
        :paramtype license_allocated_runners: int
        :keyword license_expiration:
        :paramtype license_expiration: str
        :keyword license_can_assign_sub_licenses: Required.
        :paramtype license_can_assign_sub_licenses: bool
        :keyword portrait_url:
        :paramtype portrait_url: str
        """
        super(UpdateGroupRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.tenant_company_name = kwargs.get('tenant_company_name', None)
        self.tenant_point_of_contact = kwargs.get('tenant_point_of_contact', None)
        self.tenant_phone_number = kwargs.get('tenant_phone_number', None)
        self.tenant_other_details = kwargs.get('tenant_other_details', None)
        self.tenant_expiration = kwargs.get('tenant_expiration', None)
        self.license_allocated_runners = kwargs['license_allocated_runners']
        self.license_expiration = kwargs.get('license_expiration', None)
        self.license_can_assign_sub_licenses = kwargs['license_can_assign_sub_licenses']
        self.portrait_url = kwargs.get('portrait_url', None)


class CreateGroupRequest(UpdateGroupRequest):
    """CreateGroupRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tenant_company_name:
    :vartype tenant_company_name: str
    :ivar tenant_point_of_contact:
    :vartype tenant_point_of_contact: str
    :ivar tenant_phone_number:
    :vartype tenant_phone_number: str
    :ivar tenant_other_details:
    :vartype tenant_other_details: str
    :ivar tenant_expiration:
    :vartype tenant_expiration: str
    :ivar license_allocated_runners: Required.
    :vartype license_allocated_runners: int
    :ivar license_expiration:
    :vartype license_expiration: str
    :ivar license_can_assign_sub_licenses: Required.
    :vartype license_can_assign_sub_licenses: bool
    :ivar portrait_url:
    :vartype portrait_url: str
    :ivar parent_group_id:
    :vartype parent_group_id: str
    :ivar tenant_root_user:
    :vartype tenant_root_user: str
    :ivar tenant_password:
    :vartype tenant_password: str
    :ivar invitations:
    :vartype invitations: list[~Runway.Python.models.EmailInvitation]
    """

    _validation = {
        'license_allocated_runners': {'required': True},
        'license_can_assign_sub_licenses': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tenant_company_name': {'key': 'tenantCompanyName', 'type': 'str'},
        'tenant_point_of_contact': {'key': 'tenantPointOfContact', 'type': 'str'},
        'tenant_phone_number': {'key': 'tenantPhoneNumber', 'type': 'str'},
        'tenant_other_details': {'key': 'tenantOtherDetails', 'type': 'str'},
        'tenant_expiration': {'key': 'tenantExpiration', 'type': 'str'},
        'license_allocated_runners': {'key': 'licenseAllocatedRunners', 'type': 'int'},
        'license_expiration': {'key': 'licenseExpiration', 'type': 'str'},
        'license_can_assign_sub_licenses': {'key': 'licenseCanAssignSubLicenses', 'type': 'bool'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
        'parent_group_id': {'key': 'parentGroupId', 'type': 'str'},
        'tenant_root_user': {'key': 'tenantRootUser', 'type': 'str'},
        'tenant_password': {'key': 'tenantPassword', 'type': 'str'},
        'invitations': {'key': 'invitations', 'type': '[EmailInvitation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tenant_company_name:
        :paramtype tenant_company_name: str
        :keyword tenant_point_of_contact:
        :paramtype tenant_point_of_contact: str
        :keyword tenant_phone_number:
        :paramtype tenant_phone_number: str
        :keyword tenant_other_details:
        :paramtype tenant_other_details: str
        :keyword tenant_expiration:
        :paramtype tenant_expiration: str
        :keyword license_allocated_runners: Required.
        :paramtype license_allocated_runners: int
        :keyword license_expiration:
        :paramtype license_expiration: str
        :keyword license_can_assign_sub_licenses: Required.
        :paramtype license_can_assign_sub_licenses: bool
        :keyword portrait_url:
        :paramtype portrait_url: str
        :keyword parent_group_id:
        :paramtype parent_group_id: str
        :keyword tenant_root_user:
        :paramtype tenant_root_user: str
        :keyword tenant_password:
        :paramtype tenant_password: str
        :keyword invitations:
        :paramtype invitations: list[~Runway.Python.models.EmailInvitation]
        """
        super(CreateGroupRequest, self).__init__(**kwargs)
        self.parent_group_id = kwargs.get('parent_group_id', None)
        self.tenant_root_user = kwargs.get('tenant_root_user', None)
        self.tenant_password = kwargs.get('tenant_password', None)
        self.invitations = kwargs.get('invitations', None)


class CreateJobRequest(ActionChainSettingsRequest):
    """CreateJobRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar actions:
    :vartype actions: list[~Runway.Python.models.ActionSettingRequest]
    :ivar group_id:
    :vartype group_id: str
    :ivar is_enabled: Required.
    :vartype is_enabled: bool
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar endpoint_set_id:
    :vartype endpoint_set_id: str
    :ivar schedule:
    :vartype schedule: ~Runway.Python.models.JobSchedule
    """

    _validation = {
        'is_enabled': {'required': True},
        'is_hidden': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions': {'key': 'actions', 'type': '[ActionSettingRequest]'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'endpoint_set_id': {'key': 'endpointSetId', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'JobSchedule'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword actions:
        :paramtype actions: list[~Runway.Python.models.ActionSettingRequest]
        :keyword group_id:
        :paramtype group_id: str
        :keyword is_enabled: Required.
        :paramtype is_enabled: bool
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword endpoint_set_id:
        :paramtype endpoint_set_id: str
        :keyword schedule:
        :paramtype schedule: ~Runway.Python.models.JobSchedule
        """
        super(CreateJobRequest, self).__init__(**kwargs)
        self.group_id = kwargs.get('group_id', None)
        self.is_enabled = kwargs['is_enabled']
        self.is_hidden = kwargs['is_hidden']
        self.endpoint_set_id = kwargs.get('endpoint_set_id', None)
        self.schedule = kwargs.get('schedule', None)


class CreateJobResponse(msrest.serialization.Model):
    """CreateJobResponse.

    :ivar job_id:
    :vartype job_id: str
    :ivar job_name:
    :vartype job_name: str
    :ivar endpoint_set_id:
    :vartype endpoint_set_id: str
    """

    _attribute_map = {
        'job_id': {'key': 'jobId', 'type': 'str'},
        'job_name': {'key': 'jobName', 'type': 'str'},
        'endpoint_set_id': {'key': 'endpointSetId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword job_id:
        :paramtype job_id: str
        :keyword job_name:
        :paramtype job_name: str
        :keyword endpoint_set_id:
        :paramtype endpoint_set_id: str
        """
        super(CreateJobResponse, self).__init__(**kwargs)
        self.job_id = kwargs.get('job_id', None)
        self.job_name = kwargs.get('job_name', None)
        self.endpoint_set_id = kwargs.get('endpoint_set_id', None)


class UpdateRoleRequest(msrest.serialization.Model):
    """UpdateRoleRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar permissions:
    :vartype permissions: list[~Runway.Python.models.RunwayRoleAccess]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': '[RunwayRoleAccess]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword permissions:
        :paramtype permissions: list[~Runway.Python.models.RunwayRoleAccess]
        """
        super(UpdateRoleRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.permissions = kwargs.get('permissions', None)


class CreateRoleRequest(UpdateRoleRequest):
    """CreateRoleRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar permissions:
    :vartype permissions: list[~Runway.Python.models.RunwayRoleAccess]
    :ivar group_id:
    :vartype group_id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': '[RunwayRoleAccess]'},
        'group_id': {'key': 'groupId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword permissions:
        :paramtype permissions: list[~Runway.Python.models.RunwayRoleAccess]
        :keyword group_id:
        :paramtype group_id: str
        """
        super(CreateRoleRequest, self).__init__(**kwargs)
        self.group_id = kwargs.get('group_id', None)


class UpdateUserRequest(msrest.serialization.Model):
    """UpdateUserRequest.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        """
        super(UpdateUserRequest, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.company = kwargs.get('company', None)
        self.phone = kwargs.get('phone', None)


class CreateUserRequest(UpdateUserRequest):
    """CreateUserRequest.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    :ivar email:
    :vartype email: str
    :ivar password:
    :vartype password: str
    :ivar optional_group_id:
    :vartype optional_group_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'optional_group_id': {'key': 'optionalGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        :keyword email:
        :paramtype email: str
        :keyword password:
        :paramtype password: str
        :keyword optional_group_id:
        :paramtype optional_group_id: str
        """
        super(CreateUserRequest, self).__init__(**kwargs)
        self.email = kwargs.get('email', None)
        self.password = kwargs.get('password', None)
        self.optional_group_id = kwargs.get('optional_group_id', None)


class DissolveEndpointsRequest(msrest.serialization.Model):
    """DissolveEndpointsRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar set_id:
    :vartype set_id: str
    :ivar skip_dissolve: Required.
    :vartype skip_dissolve: bool
    """

    _validation = {
        'skip_dissolve': {'required': True},
    }

    _attribute_map = {
        'set_id': {'key': 'setId', 'type': 'str'},
        'skip_dissolve': {'key': 'skipDissolve', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword set_id:
        :paramtype set_id: str
        :keyword skip_dissolve: Required.
        :paramtype skip_dissolve: bool
        """
        super(DissolveEndpointsRequest, self).__init__(**kwargs)
        self.set_id = kwargs.get('set_id', None)
        self.skip_dissolve = kwargs['skip_dissolve']


class DissolveRunnersRequest(msrest.serialization.Model):
    """DissolveRunnersRequest.

    :ivar set_id:
    :vartype set_id: str
    """

    _attribute_map = {
        'set_id': {'key': 'setId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword set_id:
        :paramtype set_id: str
        """
        super(DissolveRunnersRequest, self).__init__(**kwargs)
        self.set_id = kwargs.get('set_id', None)


class EmailInvitation(msrest.serialization.Model):
    """EmailInvitation.

    :ivar email_address:
    :vartype email_address: str
    :ivar role_id:
    :vartype role_id: str
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword email_address:
        :paramtype email_address: str
        :keyword role_id:
        :paramtype role_id: str
        """
        super(EmailInvitation, self).__init__(**kwargs)
        self.email_address = kwargs.get('email_address', None)
        self.role_id = kwargs.get('role_id', None)


class EnrollRequest(msrest.serialization.Model):
    """EnrollRequest.

    :ivar enrollment_token:
    :vartype enrollment_token: str
    :ivar parameters: Dictionary of :code:`<string>`.
    :vartype parameters: dict[str, str]
    """

    _attribute_map = {
        'enrollment_token': {'key': 'enrollmentToken', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enrollment_token:
        :paramtype enrollment_token: str
        :keyword parameters: Dictionary of :code:`<string>`.
        :paramtype parameters: dict[str, str]
        """
        super(EnrollRequest, self).__init__(**kwargs)
        self.enrollment_token = kwargs.get('enrollment_token', None)
        self.parameters = kwargs.get('parameters', None)


class EnrollResponse(msrest.serialization.Model):
    """EnrollResponse.

    :ivar node_id:
    :vartype node_id: str
    :ivar node_secret_key:
    :vartype node_secret_key: str
    :ivar parameters: Dictionary of :code:`<string>`.
    :vartype parameters: dict[str, str]
    """

    _attribute_map = {
        'node_id': {'key': 'nodeId', 'type': 'str'},
        'node_secret_key': {'key': 'nodeSecretKey', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword node_id:
        :paramtype node_id: str
        :keyword node_secret_key:
        :paramtype node_secret_key: str
        :keyword parameters: Dictionary of :code:`<string>`.
        :paramtype parameters: dict[str, str]
        """
        super(EnrollResponse, self).__init__(**kwargs)
        self.node_id = kwargs.get('node_id', None)
        self.node_secret_key = kwargs.get('node_secret_key', None)
        self.parameters = kwargs.get('parameters', None)


class FilterComparison(msrest.serialization.Model):
    """FilterComparison.

    All required parameters must be populated in order to send to Azure.

    :ivar operator:
    :vartype operator: str
    :ivar case_sensitive: Required.
    :vartype case_sensitive: bool
    :ivar left:
    :vartype left: str
    :ivar right:
    :vartype right: str
    :ivar children:
    :vartype children: list[~Runway.Python.models.FilterComparison]
    """

    _validation = {
        'case_sensitive': {'required': True},
    }

    _attribute_map = {
        'operator': {'key': 'operator', 'type': 'str'},
        'case_sensitive': {'key': 'caseSensitive', 'type': 'bool'},
        'left': {'key': 'left', 'type': 'str'},
        'right': {'key': 'right', 'type': 'str'},
        'children': {'key': 'children', 'type': '[FilterComparison]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operator:
        :paramtype operator: str
        :keyword case_sensitive: Required.
        :paramtype case_sensitive: bool
        :keyword left:
        :paramtype left: str
        :keyword right:
        :paramtype right: str
        :keyword children:
        :paramtype children: list[~Runway.Python.models.FilterComparison]
        """
        super(FilterComparison, self).__init__(**kwargs)
        self.operator = kwargs.get('operator', None)
        self.case_sensitive = kwargs['case_sensitive']
        self.left = kwargs.get('left', None)
        self.right = kwargs.get('right', None)
        self.children = kwargs.get('children', None)


class GroupHierarchyViewEx(msrest.serialization.Model):
    """GroupHierarchyViewEx.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar portrait_url:
    :vartype portrait_url: str
    :ivar home_for_user_id:
    :vartype home_for_user_id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar licenses_allocated: Required.
    :vartype licenses_allocated: int
    :ivar licenses_in_use: Required.
    :vartype licenses_in_use: int
    :ivar license_expiration: Required.
    :vartype license_expiration: ~datetime.datetime
    :ivar can_create_tenants: Required.
    :vartype can_create_tenants: bool
    :ivar parent_license_container_id:
    :vartype parent_license_container_id: str
    :ivar parent_ids:
    :vartype parent_ids: list[str]
    :ivar home_for_user_name:
    :vartype home_for_user_name: str
    :ivar home_for_user_email:
    :vartype home_for_user_email: str
    """

    _validation = {
        'is_selected': {'required': True},
        'licenses_allocated': {'required': True},
        'licenses_in_use': {'required': True},
        'license_expiration': {'required': True},
        'can_create_tenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
        'home_for_user_id': {'key': 'homeForUserId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'licenses_allocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licenses_in_use': {'key': 'licensesInUse', 'type': 'int'},
        'license_expiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'can_create_tenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parent_license_container_id': {'key': 'parentLicenseContainerId', 'type': 'str'},
        'parent_ids': {'key': 'parentIds', 'type': '[str]'},
        'home_for_user_name': {'key': 'homeForUserName', 'type': 'str'},
        'home_for_user_email': {'key': 'homeForUserEmail', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword portrait_url:
        :paramtype portrait_url: str
        :keyword home_for_user_id:
        :paramtype home_for_user_id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword licenses_allocated: Required.
        :paramtype licenses_allocated: int
        :keyword licenses_in_use: Required.
        :paramtype licenses_in_use: int
        :keyword license_expiration: Required.
        :paramtype license_expiration: ~datetime.datetime
        :keyword can_create_tenants: Required.
        :paramtype can_create_tenants: bool
        :keyword parent_license_container_id:
        :paramtype parent_license_container_id: str
        :keyword parent_ids:
        :paramtype parent_ids: list[str]
        :keyword home_for_user_name:
        :paramtype home_for_user_name: str
        :keyword home_for_user_email:
        :paramtype home_for_user_email: str
        """
        super(GroupHierarchyViewEx, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.portrait_url = kwargs.get('portrait_url', None)
        self.home_for_user_id = kwargs.get('home_for_user_id', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']
        self.licenses_allocated = kwargs['licenses_allocated']
        self.licenses_in_use = kwargs['licenses_in_use']
        self.license_expiration = kwargs['license_expiration']
        self.can_create_tenants = kwargs['can_create_tenants']
        self.parent_license_container_id = kwargs.get('parent_license_container_id', None)
        self.parent_ids = kwargs.get('parent_ids', None)
        self.home_for_user_name = kwargs.get('home_for_user_name', None)
        self.home_for_user_email = kwargs.get('home_for_user_email', None)


class GroupInvitationRequest(msrest.serialization.Model):
    """GroupInvitationRequest.

    :ivar group_id:
    :vartype group_id: str
    :ivar invitations:
    :vartype invitations: list[~Runway.Python.models.EmailInvitation]
    """

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'invitations': {'key': 'invitations', 'type': '[EmailInvitation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword group_id:
        :paramtype group_id: str
        :keyword invitations:
        :paramtype invitations: list[~Runway.Python.models.EmailInvitation]
        """
        super(GroupInvitationRequest, self).__init__(**kwargs)
        self.group_id = kwargs.get('group_id', None)
        self.invitations = kwargs.get('invitations', None)


class GroupQueryViewEx(msrest.serialization.Model):
    """GroupQueryViewEx.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar portrait_url:
    :vartype portrait_url: str
    :ivar home_for_user_id:
    :vartype home_for_user_id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar licenses_allocated: Required.
    :vartype licenses_allocated: int
    :ivar licenses_in_use: Required.
    :vartype licenses_in_use: int
    :ivar license_expiration: Required.
    :vartype license_expiration: ~datetime.datetime
    :ivar can_create_tenants: Required.
    :vartype can_create_tenants: bool
    :ivar parent_license_container_id:
    :vartype parent_license_container_id: str
    :ivar owner_name:
    :vartype owner_name: str
    :ivar owner_email:
    :vartype owner_email: str
    :ivar tenant_name:
    :vartype tenant_name: str
    :ivar tenant_email:
    :vartype tenant_email: str
    :ivar tenant_company_name:
    :vartype tenant_company_name: str
    :ivar tenant_phone_number:
    :vartype tenant_phone_number: str
    :ivar tenant_other_details:
    :vartype tenant_other_details: str
    :ivar tenant_expiration:
    :vartype tenant_expiration: str
    """

    _validation = {
        'is_selected': {'required': True},
        'licenses_allocated': {'required': True},
        'licenses_in_use': {'required': True},
        'license_expiration': {'required': True},
        'can_create_tenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
        'home_for_user_id': {'key': 'homeForUserId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'licenses_allocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licenses_in_use': {'key': 'licensesInUse', 'type': 'int'},
        'license_expiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'can_create_tenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parent_license_container_id': {'key': 'parentLicenseContainerId', 'type': 'str'},
        'owner_name': {'key': 'ownerName', 'type': 'str'},
        'owner_email': {'key': 'ownerEmail', 'type': 'str'},
        'tenant_name': {'key': 'tenantName', 'type': 'str'},
        'tenant_email': {'key': 'tenantEmail', 'type': 'str'},
        'tenant_company_name': {'key': 'tenantCompanyName', 'type': 'str'},
        'tenant_phone_number': {'key': 'tenantPhoneNumber', 'type': 'str'},
        'tenant_other_details': {'key': 'tenantOtherDetails', 'type': 'str'},
        'tenant_expiration': {'key': 'tenantExpiration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword portrait_url:
        :paramtype portrait_url: str
        :keyword home_for_user_id:
        :paramtype home_for_user_id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword licenses_allocated: Required.
        :paramtype licenses_allocated: int
        :keyword licenses_in_use: Required.
        :paramtype licenses_in_use: int
        :keyword license_expiration: Required.
        :paramtype license_expiration: ~datetime.datetime
        :keyword can_create_tenants: Required.
        :paramtype can_create_tenants: bool
        :keyword parent_license_container_id:
        :paramtype parent_license_container_id: str
        :keyword owner_name:
        :paramtype owner_name: str
        :keyword owner_email:
        :paramtype owner_email: str
        :keyword tenant_name:
        :paramtype tenant_name: str
        :keyword tenant_email:
        :paramtype tenant_email: str
        :keyword tenant_company_name:
        :paramtype tenant_company_name: str
        :keyword tenant_phone_number:
        :paramtype tenant_phone_number: str
        :keyword tenant_other_details:
        :paramtype tenant_other_details: str
        :keyword tenant_expiration:
        :paramtype tenant_expiration: str
        """
        super(GroupQueryViewEx, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.portrait_url = kwargs.get('portrait_url', None)
        self.home_for_user_id = kwargs.get('home_for_user_id', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']
        self.licenses_allocated = kwargs['licenses_allocated']
        self.licenses_in_use = kwargs['licenses_in_use']
        self.license_expiration = kwargs['license_expiration']
        self.can_create_tenants = kwargs['can_create_tenants']
        self.parent_license_container_id = kwargs.get('parent_license_container_id', None)
        self.owner_name = kwargs.get('owner_name', None)
        self.owner_email = kwargs.get('owner_email', None)
        self.tenant_name = kwargs.get('tenant_name', None)
        self.tenant_email = kwargs.get('tenant_email', None)
        self.tenant_company_name = kwargs.get('tenant_company_name', None)
        self.tenant_phone_number = kwargs.get('tenant_phone_number', None)
        self.tenant_other_details = kwargs.get('tenant_other_details', None)
        self.tenant_expiration = kwargs.get('tenant_expiration', None)


class IAccountAssetQueryView(msrest.serialization.Model):
    """IAccountAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar endpoint_id:
    :vartype endpoint_id: str
    :ivar endpoint_hostname:
    :vartype endpoint_hostname: str
    :ivar username:
    :vartype username: str
    :ivar domain:
    :vartype domain: str
    :ivar sid:
    :vartype sid: str
    :ivar instance_type:
    :vartype instance_type: str
    :ivar security_groups:
    :vartype security_groups: list[str]
    :ivar id:
    :vartype id: str
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    """

    _validation = {
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'endpoint_id': {'key': 'endpointId', 'type': 'str'},
        'endpoint_hostname': {'key': 'endpointHostname', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'sid': {'key': 'sid', 'type': 'str'},
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'security_groups': {'key': 'securityGroups', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpoint_id:
        :paramtype endpoint_id: str
        :keyword endpoint_hostname:
        :paramtype endpoint_hostname: str
        :keyword username:
        :paramtype username: str
        :keyword domain:
        :paramtype domain: str
        :keyword sid:
        :paramtype sid: str
        :keyword instance_type:
        :paramtype instance_type: str
        :keyword security_groups:
        :paramtype security_groups: list[str]
        :keyword id:
        :paramtype id: str
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        """
        super(IAccountAssetQueryView, self).__init__(**kwargs)
        self.endpoint_id = kwargs.get('endpoint_id', None)
        self.endpoint_hostname = kwargs.get('endpoint_hostname', None)
        self.username = kwargs.get('username', None)
        self.domain = kwargs.get('domain', None)
        self.sid = kwargs.get('sid', None)
        self.instance_type = kwargs.get('instance_type', None)
        self.security_groups = kwargs.get('security_groups', None)
        self.id = kwargs.get('id', None)
        self.is_selected = kwargs['is_selected']
        self.tags = kwargs.get('tags', None)


class IConnectionQueryView(msrest.serialization.Model):
    """IConnectionQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar assigned_endpoint_id:
    :vartype assigned_endpoint_id: str
    :ivar assigned_endpoint_name:
    :vartype assigned_endpoint_name: str
    :ivar action_name:
    :vartype action_name: str
    :ivar runner_id:
    :vartype runner_id: str
    :ivar action_id:
    :vartype action_id: str
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar settings:
    :vartype settings: list[~Runway.Python.models.ActionSetting]
    :ivar connection_metrics:
    :vartype connection_metrics: list[~Runway.Python.models.RunwayConnectionStatistic]
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    """

    _validation = {
        'is_hidden': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'assigned_endpoint_id': {'key': 'assignedEndpointId', 'type': 'str'},
        'assigned_endpoint_name': {'key': 'assignedEndpointName', 'type': 'str'},
        'action_name': {'key': 'actionName', 'type': 'str'},
        'runner_id': {'key': 'runnerId', 'type': 'str'},
        'action_id': {'key': 'actionId', 'type': 'str'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '[ActionSetting]'},
        'connection_metrics': {'key': 'connectionMetrics', 'type': '[RunwayConnectionStatistic]'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword assigned_endpoint_id:
        :paramtype assigned_endpoint_id: str
        :keyword assigned_endpoint_name:
        :paramtype assigned_endpoint_name: str
        :keyword action_name:
        :paramtype action_name: str
        :keyword runner_id:
        :paramtype runner_id: str
        :keyword action_id:
        :paramtype action_id: str
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword settings:
        :paramtype settings: list[~Runway.Python.models.ActionSetting]
        :keyword connection_metrics:
        :paramtype connection_metrics: list[~Runway.Python.models.RunwayConnectionStatistic]
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        """
        super(IConnectionQueryView, self).__init__(**kwargs)
        self.assigned_endpoint_id = kwargs.get('assigned_endpoint_id', None)
        self.assigned_endpoint_name = kwargs.get('assigned_endpoint_name', None)
        self.action_name = kwargs.get('action_name', None)
        self.runner_id = kwargs.get('runner_id', None)
        self.action_id = kwargs.get('action_id', None)
        self.is_hidden = kwargs['is_hidden']
        self.settings = kwargs.get('settings', None)
        self.connection_metrics = kwargs.get('connection_metrics', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']


class IdRequest(msrest.serialization.Model):
    """IdRequest.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        """
        super(IdRequest, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class IdResponse(IdRequest):
    """IdResponse.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        """
        super(IdResponse, self).__init__(**kwargs)


class IEndpointAssetQueryView(msrest.serialization.Model):
    """IEndpointAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar membership_flag: Required.
    :vartype membership_flag: bool
    :ivar is_pending_delete: Required.
    :vartype is_pending_delete: bool
    :ivar name:
    :vartype name: str
    :ivar endpoint_type:
    :vartype endpoint_type: str
    :ivar build_information:
    :vartype build_information: str
    :ivar os_name:
    :vartype os_name: str
    :ivar os_version:
    :vartype os_version: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar last_ip_address:
    :vartype last_ip_address: str
    :ivar preferred_mac_address:
    :vartype preferred_mac_address: str
    :ivar last_gateway_address:
    :vartype last_gateway_address: str
    :ivar organizational_unit:
    :vartype organizational_unit: str
    :ivar adapters:
    :vartype adapters: list[~Runway.Python.models.AdapterInformation]
    :ivar meta_data: Dictionary of :code:`<string>`.
    :vartype meta_data: dict[str, str]
    :ivar has_runner: Required.
    :vartype has_runner: bool
    :ivar has_active_runner: Required.
    :vartype has_active_runner: bool
    :ivar runner_count: Required.
    :vartype runner_count: int
    :ivar runner_affinity: Required. Possible values include: "EphemeralContainer",
     "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype runner_affinity: str or ~Runway.Python.models.NodeAffinity
    :ivar last_thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype last_thread_state: str or ~Runway.Python.models.JobThreadState
    :ivar last_thread_id:
    :vartype last_thread_id: str
    :ivar device_type:
    :vartype device_type: str
    :ivar hardware_product:
    :vartype hardware_product: str
    """

    _validation = {
        'is_selected': {'required': True},
        'membership_flag': {'required': True},
        'is_pending_delete': {'required': True},
        'has_runner': {'required': True},
        'has_active_runner': {'required': True},
        'runner_count': {'required': True},
        'runner_affinity': {'required': True},
        'last_thread_state': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'membership_flag': {'key': 'membershipFlag', 'type': 'bool'},
        'is_pending_delete': {'key': 'isPendingDelete', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'build_information': {'key': 'buildInformation', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'last_ip_address': {'key': 'lastIpAddress', 'type': 'str'},
        'preferred_mac_address': {'key': 'preferredMacAddress', 'type': 'str'},
        'last_gateway_address': {'key': 'lastGatewayAddress', 'type': 'str'},
        'organizational_unit': {'key': 'organizationalUnit', 'type': 'str'},
        'adapters': {'key': 'adapters', 'type': '[AdapterInformation]'},
        'meta_data': {'key': 'metaData', 'type': '{str}'},
        'has_runner': {'key': 'hasRunner', 'type': 'bool'},
        'has_active_runner': {'key': 'hasActiveRunner', 'type': 'bool'},
        'runner_count': {'key': 'runnerCount', 'type': 'int'},
        'runner_affinity': {'key': 'runnerAffinity', 'type': 'str'},
        'last_thread_state': {'key': 'lastThreadState', 'type': 'str'},
        'last_thread_id': {'key': 'lastThreadId', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'hardware_product': {'key': 'hardwareProduct', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword membership_flag: Required.
        :paramtype membership_flag: bool
        :keyword is_pending_delete: Required.
        :paramtype is_pending_delete: bool
        :keyword name:
        :paramtype name: str
        :keyword endpoint_type:
        :paramtype endpoint_type: str
        :keyword build_information:
        :paramtype build_information: str
        :keyword os_name:
        :paramtype os_name: str
        :keyword os_version:
        :paramtype os_version: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword last_ip_address:
        :paramtype last_ip_address: str
        :keyword preferred_mac_address:
        :paramtype preferred_mac_address: str
        :keyword last_gateway_address:
        :paramtype last_gateway_address: str
        :keyword organizational_unit:
        :paramtype organizational_unit: str
        :keyword adapters:
        :paramtype adapters: list[~Runway.Python.models.AdapterInformation]
        :keyword meta_data: Dictionary of :code:`<string>`.
        :paramtype meta_data: dict[str, str]
        :keyword has_runner: Required.
        :paramtype has_runner: bool
        :keyword has_active_runner: Required.
        :paramtype has_active_runner: bool
        :keyword runner_count: Required.
        :paramtype runner_count: int
        :keyword runner_affinity: Required. Possible values include: "EphemeralContainer",
         "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype runner_affinity: str or ~Runway.Python.models.NodeAffinity
        :keyword last_thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype last_thread_state: str or ~Runway.Python.models.JobThreadState
        :keyword last_thread_id:
        :paramtype last_thread_id: str
        :keyword device_type:
        :paramtype device_type: str
        :keyword hardware_product:
        :paramtype hardware_product: str
        """
        super(IEndpointAssetQueryView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']
        self.membership_flag = kwargs['membership_flag']
        self.is_pending_delete = kwargs['is_pending_delete']
        self.name = kwargs.get('name', None)
        self.endpoint_type = kwargs.get('endpoint_type', None)
        self.build_information = kwargs.get('build_information', None)
        self.os_name = kwargs.get('os_name', None)
        self.os_version = kwargs.get('os_version', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.last_ip_address = kwargs.get('last_ip_address', None)
        self.preferred_mac_address = kwargs.get('preferred_mac_address', None)
        self.last_gateway_address = kwargs.get('last_gateway_address', None)
        self.organizational_unit = kwargs.get('organizational_unit', None)
        self.adapters = kwargs.get('adapters', None)
        self.meta_data = kwargs.get('meta_data', None)
        self.has_runner = kwargs['has_runner']
        self.has_active_runner = kwargs['has_active_runner']
        self.runner_count = kwargs['runner_count']
        self.runner_affinity = kwargs['runner_affinity']
        self.last_thread_state = kwargs['last_thread_state']
        self.last_thread_id = kwargs.get('last_thread_id', None)
        self.device_type = kwargs.get('device_type', None)
        self.hardware_product = kwargs.get('hardware_product', None)


class IFilterProperty(msrest.serialization.Model):
    """IFilterProperty.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar type: Required. Possible values include: "String", "Integer", "Boolean", "Timestamp".
    :vartype type: str or ~Runway.Python.models.FilterDataType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword type: Required. Possible values include: "String", "Integer", "Boolean", "Timestamp".
        :paramtype type: str or ~Runway.Python.models.FilterDataType
        """
        super(IFilterProperty, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs['type']


class IGroupQueryView(msrest.serialization.Model):
    """IGroupQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar portrait_url:
    :vartype portrait_url: str
    :ivar home_for_user_id:
    :vartype home_for_user_id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar licenses_allocated: Required.
    :vartype licenses_allocated: int
    :ivar licenses_in_use: Required.
    :vartype licenses_in_use: int
    :ivar license_expiration: Required.
    :vartype license_expiration: ~datetime.datetime
    :ivar can_create_tenants: Required.
    :vartype can_create_tenants: bool
    :ivar parent_license_container_id:
    :vartype parent_license_container_id: str
    """

    _validation = {
        'is_selected': {'required': True},
        'licenses_allocated': {'required': True},
        'licenses_in_use': {'required': True},
        'license_expiration': {'required': True},
        'can_create_tenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
        'home_for_user_id': {'key': 'homeForUserId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'licenses_allocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licenses_in_use': {'key': 'licensesInUse', 'type': 'int'},
        'license_expiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'can_create_tenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parent_license_container_id': {'key': 'parentLicenseContainerId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword portrait_url:
        :paramtype portrait_url: str
        :keyword home_for_user_id:
        :paramtype home_for_user_id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword licenses_allocated: Required.
        :paramtype licenses_allocated: int
        :keyword licenses_in_use: Required.
        :paramtype licenses_in_use: int
        :keyword license_expiration: Required.
        :paramtype license_expiration: ~datetime.datetime
        :keyword can_create_tenants: Required.
        :paramtype can_create_tenants: bool
        :keyword parent_license_container_id:
        :paramtype parent_license_container_id: str
        """
        super(IGroupQueryView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.portrait_url = kwargs.get('portrait_url', None)
        self.home_for_user_id = kwargs.get('home_for_user_id', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']
        self.licenses_allocated = kwargs['licenses_allocated']
        self.licenses_in_use = kwargs['licenses_in_use']
        self.license_expiration = kwargs['license_expiration']
        self.can_create_tenants = kwargs['can_create_tenants']
        self.parent_license_container_id = kwargs.get('parent_license_container_id', None)


class IInvitationQueryView(msrest.serialization.Model):
    """IInvitationQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar actor_id:
    :vartype actor_id: str
    :ivar email_address:
    :vartype email_address: str
    :ivar user_name:
    :vartype user_name: str
    :ivar group_id:
    :vartype group_id: str
    :ivar group_name:
    :vartype group_name: str
    :ivar role_id:
    :vartype role_id: str
    :ivar role_name:
    :vartype role_name: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    """

    _validation = {
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'actor_id': {'key': 'actorId', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'group_name': {'key': 'groupName', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
        'role_name': {'key': 'roleName', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword actor_id:
        :paramtype actor_id: str
        :keyword email_address:
        :paramtype email_address: str
        :keyword user_name:
        :paramtype user_name: str
        :keyword group_id:
        :paramtype group_id: str
        :keyword group_name:
        :paramtype group_name: str
        :keyword role_id:
        :paramtype role_id: str
        :keyword role_name:
        :paramtype role_name: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        """
        super(IInvitationQueryView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.actor_id = kwargs.get('actor_id', None)
        self.email_address = kwargs.get('email_address', None)
        self.user_name = kwargs.get('user_name', None)
        self.group_id = kwargs.get('group_id', None)
        self.group_name = kwargs.get('group_name', None)
        self.role_id = kwargs.get('role_id', None)
        self.role_name = kwargs.get('role_name', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']


class IJobQueryView(msrest.serialization.Model):
    """IJobQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar is_enabled: Required.
    :vartype is_enabled: bool
    :ivar actions:
    :vartype actions: list[~Runway.Python.models.ActionInstance]
    :ivar schedule:
    :vartype schedule: ~Runway.Python.models.JobSchedule
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar job_metrics:
    :vartype job_metrics: list[~Runway.Python.models.RunwayJobStatistic]
    :ivar total_endpoints_finished: Required.
    :vartype total_endpoints_finished: int
    :ivar total_endpoints_finished_errors: Required.
    :vartype total_endpoints_finished_errors: int
    :ivar total_endpoints_running: Required.
    :vartype total_endpoints_running: int
    :ivar total_endpoints_assigned: Required.
    :vartype total_endpoints_assigned: int
    :ivar id:
    :vartype id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        'is_enabled': {'required': True},
        'is_hidden': {'required': True},
        'total_endpoints_finished': {'required': True},
        'total_endpoints_finished_errors': {'required': True},
        'total_endpoints_running': {'required': True},
        'total_endpoints_assigned': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'actions': {'key': 'actions', 'type': '[ActionInstance]'},
        'schedule': {'key': 'schedule', 'type': 'JobSchedule'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'job_metrics': {'key': 'jobMetrics', 'type': '[RunwayJobStatistic]'},
        'total_endpoints_finished': {'key': 'totalEndpointsFinished', 'type': 'int'},
        'total_endpoints_finished_errors': {'key': 'totalEndpointsFinishedErrors', 'type': 'int'},
        'total_endpoints_running': {'key': 'totalEndpointsRunning', 'type': 'int'},
        'total_endpoints_assigned': {'key': 'totalEndpointsAssigned', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword is_enabled: Required.
        :paramtype is_enabled: bool
        :keyword actions:
        :paramtype actions: list[~Runway.Python.models.ActionInstance]
        :keyword schedule:
        :paramtype schedule: ~Runway.Python.models.JobSchedule
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword job_metrics:
        :paramtype job_metrics: list[~Runway.Python.models.RunwayJobStatistic]
        :keyword total_endpoints_finished: Required.
        :paramtype total_endpoints_finished: int
        :keyword total_endpoints_finished_errors: Required.
        :paramtype total_endpoints_finished_errors: int
        :keyword total_endpoints_running: Required.
        :paramtype total_endpoints_running: int
        :keyword total_endpoints_assigned: Required.
        :paramtype total_endpoints_assigned: int
        :keyword id:
        :paramtype id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super(IJobQueryView, self).__init__(**kwargs)
        self.is_enabled = kwargs['is_enabled']
        self.actions = kwargs.get('actions', None)
        self.schedule = kwargs.get('schedule', None)
        self.is_hidden = kwargs['is_hidden']
        self.job_metrics = kwargs.get('job_metrics', None)
        self.total_endpoints_finished = kwargs['total_endpoints_finished']
        self.total_endpoints_finished_errors = kwargs['total_endpoints_finished_errors']
        self.total_endpoints_running = kwargs['total_endpoints_running']
        self.total_endpoints_assigned = kwargs['total_endpoints_assigned']
        self.id = kwargs.get('id', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)


class IJobThreadQueryView(msrest.serialization.Model):
    """IJobThreadQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar prodigal_object_id:
    :vartype prodigal_object_id: str
    :ivar thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype thread_state: str or ~Runway.Python.models.JobThreadState
    :ivar last_step_result: Required. Possible values include: "Uninitialized", "Success",
     "Failure".
    :vartype last_step_result: str or ~Runway.Python.models.StepResult
    :ivar id:
    :vartype id: str
    """

    _validation = {
        'thread_state': {'required': True},
        'last_step_result': {'required': True},
    }

    _attribute_map = {
        'prodigal_object_id': {'key': 'prodigalObjectId', 'type': 'str'},
        'thread_state': {'key': 'threadState', 'type': 'str'},
        'last_step_result': {'key': 'lastStepResult', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword prodigal_object_id:
        :paramtype prodigal_object_id: str
        :keyword thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype thread_state: str or ~Runway.Python.models.JobThreadState
        :keyword last_step_result: Required. Possible values include: "Uninitialized", "Success",
         "Failure".
        :paramtype last_step_result: str or ~Runway.Python.models.StepResult
        :keyword id:
        :paramtype id: str
        """
        super(IJobThreadQueryView, self).__init__(**kwargs)
        self.prodigal_object_id = kwargs.get('prodigal_object_id', None)
        self.thread_state = kwargs['thread_state']
        self.last_step_result = kwargs['last_step_result']
        self.id = kwargs.get('id', None)


class InvitationAnswerRequest(msrest.serialization.Model):
    """InvitationAnswerRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar accept: Required.
    :vartype accept: bool
    :ivar invitation_id:
    :vartype invitation_id: str
    """

    _validation = {
        'accept': {'required': True},
    }

    _attribute_map = {
        'accept': {'key': 'accept', 'type': 'bool'},
        'invitation_id': {'key': 'invitationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword accept: Required.
        :paramtype accept: bool
        :keyword invitation_id:
        :paramtype invitation_id: str
        """
        super(InvitationAnswerRequest, self).__init__(**kwargs)
        self.accept = kwargs['accept']
        self.invitation_id = kwargs.get('invitation_id', None)


class IRepositoryItemQueryView(msrest.serialization.Model):
    """IRepositoryItemQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar desired_settings:
    :vartype desired_settings: list[~Runway.Python.models.ActionSetting]
    :ivar glyph:
    :vartype glyph: str
    :ivar author:
    :vartype author: str
    :ivar language:
    :vartype language: str
    :ivar is_connection_required: Required.
    :vartype is_connection_required: bool
    :ivar license: Required. Possible values include: "Free", "Paid".
    :vartype license: str or ~Runway.Python.models.RepositoryLicense
    :ivar scope: Required. Possible values include: "Private", "Public".
    :vartype scope: str or ~Runway.Python.models.RepositoryScope
    :ivar input:
    :vartype input: str
    :ivar output:
    :vartype output: str
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    """

    _validation = {
        'is_connection_required': {'required': True},
        'license': {'required': True},
        'scope': {'required': True},
        'revision': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'desired_settings': {'key': 'desiredSettings', 'type': '[ActionSetting]'},
        'glyph': {'key': 'glyph', 'type': 'str'},
        'author': {'key': 'author', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'is_connection_required': {'key': 'isConnectionRequired', 'type': 'bool'},
        'license': {'key': 'license', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'input': {'key': 'input', 'type': 'str'},
        'output': {'key': 'output', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword desired_settings:
        :paramtype desired_settings: list[~Runway.Python.models.ActionSetting]
        :keyword glyph:
        :paramtype glyph: str
        :keyword author:
        :paramtype author: str
        :keyword language:
        :paramtype language: str
        :keyword is_connection_required: Required.
        :paramtype is_connection_required: bool
        :keyword license: Required. Possible values include: "Free", "Paid".
        :paramtype license: str or ~Runway.Python.models.RepositoryLicense
        :keyword scope: Required. Possible values include: "Private", "Public".
        :paramtype scope: str or ~Runway.Python.models.RepositoryScope
        :keyword input:
        :paramtype input: str
        :keyword output:
        :paramtype output: str
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        """
        super(IRepositoryItemQueryView, self).__init__(**kwargs)
        self.desired_settings = kwargs.get('desired_settings', None)
        self.glyph = kwargs.get('glyph', None)
        self.author = kwargs.get('author', None)
        self.language = kwargs.get('language', None)
        self.is_connection_required = kwargs['is_connection_required']
        self.license = kwargs['license']
        self.scope = kwargs['scope']
        self.input = kwargs.get('input', None)
        self.output = kwargs.get('output', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.revision = kwargs['revision']
        self.is_selected = kwargs['is_selected']
        self.tags = kwargs.get('tags', None)


class IRoleView(msrest.serialization.Model):
    """IRoleView.

    All required parameters must be populated in order to send to Azure.

    :ivar permissions:
    :vartype permissions: list[~Runway.Python.models.RunwayRoleAccess]
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar is_selected: Required.
    :vartype is_selected: bool
    """

    _validation = {
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'permissions': {'key': 'permissions', 'type': '[RunwayRoleAccess]'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword permissions:
        :paramtype permissions: list[~Runway.Python.models.RunwayRoleAccess]
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        """
        super(IRoleView, self).__init__(**kwargs)
        self.permissions = kwargs.get('permissions', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.is_selected = kwargs['is_selected']


class IRunnerQueryView(msrest.serialization.Model):
    """IRunnerQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar is_active: Required.
    :vartype is_active: bool
    :ivar id:
    :vartype id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar name:
    :vartype name: str
    :ivar affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
     "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype affinity: str or ~Runway.Python.models.NodeAffinity
    :ivar asset_name:
    :vartype asset_name: str
    :ivar asset_id:
    :vartype asset_id: str
    """

    _validation = {
        'is_active': {'required': True},
        'is_selected': {'required': True},
        'affinity': {'required': True},
    }

    _attribute_map = {
        'is_active': {'key': 'isActive', 'type': 'bool'},
        'id': {'key': 'id', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'affinity': {'key': 'affinity', 'type': 'str'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'asset_id': {'key': 'assetId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword is_active: Required.
        :paramtype is_active: bool
        :keyword id:
        :paramtype id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword name:
        :paramtype name: str
        :keyword affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
         "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype affinity: str or ~Runway.Python.models.NodeAffinity
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword asset_id:
        :paramtype asset_id: str
        """
        super(IRunnerQueryView, self).__init__(**kwargs)
        self.is_active = kwargs['is_active']
        self.id = kwargs.get('id', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']
        self.name = kwargs.get('name', None)
        self.affinity = kwargs['affinity']
        self.asset_name = kwargs.get('asset_name', None)
        self.asset_id = kwargs.get('asset_id', None)


class IUserQueryView(msrest.serialization.Model):
    """IUserQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar email_address:
    :vartype email_address: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    :ivar portrait_url:
    :vartype portrait_url: str
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar home_container_id:
    :vartype home_container_id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    """

    _validation = {
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'home_container_id': {'key': 'homeContainerId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword email_address:
        :paramtype email_address: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        :keyword portrait_url:
        :paramtype portrait_url: str
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword home_container_id:
        :paramtype home_container_id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        """
        super(IUserQueryView, self).__init__(**kwargs)
        self.email_address = kwargs.get('email_address', None)
        self.company = kwargs.get('company', None)
        self.phone = kwargs.get('phone', None)
        self.portrait_url = kwargs.get('portrait_url', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.home_container_id = kwargs.get('home_container_id', None)
        self.tags = kwargs.get('tags', None)
        self.is_selected = kwargs['is_selected']


class JobSchedule(msrest.serialization.Model):
    """JobSchedule.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_type: Required. Possible values include: "RunNow", "RunOnce", "RunEvery".
    :vartype schedule_type: str or ~Runway.Python.models.JobScheduleType
    :ivar schedule:
    :vartype schedule: str
    :ivar repeat_minutes: Required.
    :vartype repeat_minutes: int
    :ivar weekdays:
    :vartype weekdays: str
    """

    _validation = {
        'schedule_type': {'required': True},
        'repeat_minutes': {'required': True},
    }

    _attribute_map = {
        'schedule_type': {'key': 'scheduleType', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'str'},
        'repeat_minutes': {'key': 'repeatMinutes', 'type': 'int'},
        'weekdays': {'key': 'weekdays', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword schedule_type: Required. Possible values include: "RunNow", "RunOnce", "RunEvery".
        :paramtype schedule_type: str or ~Runway.Python.models.JobScheduleType
        :keyword schedule:
        :paramtype schedule: str
        :keyword repeat_minutes: Required.
        :paramtype repeat_minutes: int
        :keyword weekdays:
        :paramtype weekdays: str
        """
        super(JobSchedule, self).__init__(**kwargs)
        self.schedule_type = kwargs['schedule_type']
        self.schedule = kwargs.get('schedule', None)
        self.repeat_minutes = kwargs['repeat_minutes']
        self.weekdays = kwargs.get('weekdays', None)


class KubernetesEndpoint(msrest.serialization.Model):
    """KubernetesEndpoint.

    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    :ivar host_ip:
    :vartype host_ip: str
    :ivar ip_address:
    :vartype ip_address: str
    :ivar node_name:
    :vartype node_name: str
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'host_ip': {'key': 'hostIP', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'node_name': {'key': 'nodeName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        :keyword host_ip:
        :paramtype host_ip: str
        :keyword ip_address:
        :paramtype ip_address: str
        :keyword node_name:
        :paramtype node_name: str
        """
        super(KubernetesEndpoint, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)
        self.name = kwargs.get('name', None)
        self.namespace = kwargs.get('namespace', None)
        self.host_ip = kwargs.get('host_ip', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.node_name = kwargs.get('node_name', None)


class LoginRequest(msrest.serialization.Model):
    """LoginRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar ttl:
    :vartype ttl: str
    :ivar email:
    :vartype email: str
    :ivar password:
    :vartype password: str
    :ivar remember: Required.
    :vartype remember: bool
    """

    _validation = {
        'remember': {'required': True},
    }

    _attribute_map = {
        'ttl': {'key': 'ttl', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'remember': {'key': 'remember', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ttl:
        :paramtype ttl: str
        :keyword email:
        :paramtype email: str
        :keyword password:
        :paramtype password: str
        :keyword remember: Required.
        :paramtype remember: bool
        """
        super(LoginRequest, self).__init__(**kwargs)
        self.ttl = kwargs.get('ttl', None)
        self.email = kwargs.get('email', None)
        self.password = kwargs.get('password', None)
        self.remember = kwargs['remember']


class LoginResponse(msrest.serialization.Model):
    """LoginResponse.

    :ivar ttl:
    :vartype ttl: str
    :ivar session:
    :vartype session: str
    """

    _attribute_map = {
        'ttl': {'key': 'ttl', 'type': 'str'},
        'session': {'key': 'session', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ttl:
        :paramtype ttl: str
        :keyword session:
        :paramtype session: str
        """
        super(LoginResponse, self).__init__(**kwargs)
        self.ttl = kwargs.get('ttl', None)
        self.session = kwargs.get('session', None)


class Query(msrest.serialization.Model):
    """Query.

    All required parameters must be populated in order to send to Azure.

    :ivar skip: Required.
    :vartype skip: int
    :ivar take: Required.
    :vartype take: int
    :ivar root_container_id:
    :vartype root_container_id: str
    :ivar include_subgroups: Required.
    :vartype include_subgroups: bool
    :ivar membership_check_id:
    :vartype membership_check_id: str
    :ivar selection_check_id:
    :vartype selection_check_id: str
    :ivar filter:
    :vartype filter: ~Runway.Python.models.FilterComparison
    :ivar sort_field:
    :vartype sort_field: str
    :ivar sort_direction: Required. Possible values include: "Ascending", "Descending".
    :vartype sort_direction: str or ~Runway.Python.models.SortDirection
    """

    _validation = {
        'skip': {'required': True},
        'take': {'required': True},
        'include_subgroups': {'required': True},
        'sort_direction': {'required': True},
    }

    _attribute_map = {
        'skip': {'key': 'skip', 'type': 'int'},
        'take': {'key': 'take', 'type': 'int'},
        'root_container_id': {'key': 'rootContainerId', 'type': 'str'},
        'include_subgroups': {'key': 'includeSubgroups', 'type': 'bool'},
        'membership_check_id': {'key': 'membershipCheckId', 'type': 'str'},
        'selection_check_id': {'key': 'selectionCheckId', 'type': 'str'},
        'filter': {'key': 'filter', 'type': 'FilterComparison'},
        'sort_field': {'key': 'sortField', 'type': 'str'},
        'sort_direction': {'key': 'sortDirection', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword skip: Required.
        :paramtype skip: int
        :keyword take: Required.
        :paramtype take: int
        :keyword root_container_id:
        :paramtype root_container_id: str
        :keyword include_subgroups: Required.
        :paramtype include_subgroups: bool
        :keyword membership_check_id:
        :paramtype membership_check_id: str
        :keyword selection_check_id:
        :paramtype selection_check_id: str
        :keyword filter:
        :paramtype filter: ~Runway.Python.models.FilterComparison
        :keyword sort_field:
        :paramtype sort_field: str
        :keyword sort_direction: Required. Possible values include: "Ascending", "Descending".
        :paramtype sort_direction: str or ~Runway.Python.models.SortDirection
        """
        super(Query, self).__init__(**kwargs)
        self.skip = kwargs['skip']
        self.take = kwargs['take']
        self.root_container_id = kwargs.get('root_container_id', None)
        self.include_subgroups = kwargs['include_subgroups']
        self.membership_check_id = kwargs.get('membership_check_id', None)
        self.selection_check_id = kwargs.get('selection_check_id', None)
        self.filter = kwargs.get('filter', None)
        self.sort_field = kwargs.get('sort_field', None)
        self.sort_direction = kwargs['sort_direction']


class QueryResponseOfAssetMapEndpointView(msrest.serialization.Model):
    """QueryResponseOfAssetMapEndpointView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.AssetMapEndpointView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[AssetMapEndpointView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.AssetMapEndpointView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfAssetMapEndpointView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfGroupQueryViewEx(msrest.serialization.Model):
    """QueryResponseOfGroupQueryViewEx.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.GroupQueryViewEx]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[GroupQueryViewEx]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.GroupQueryViewEx]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfGroupQueryViewEx, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIAccountAssetQueryView(msrest.serialization.Model):
    """QueryResponseOfIAccountAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IAccountAssetQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IAccountAssetQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IAccountAssetQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIAccountAssetQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIConnectionQueryView(msrest.serialization.Model):
    """QueryResponseOfIConnectionQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IConnectionQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IConnectionQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IConnectionQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIConnectionQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIEndpointAssetQueryView(msrest.serialization.Model):
    """QueryResponseOfIEndpointAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IEndpointAssetQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IEndpointAssetQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IEndpointAssetQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIEndpointAssetQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIGroupQueryView(msrest.serialization.Model):
    """QueryResponseOfIGroupQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IGroupQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IGroupQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IGroupQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIGroupQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIInvitationQueryView(msrest.serialization.Model):
    """QueryResponseOfIInvitationQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IInvitationQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IInvitationQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IInvitationQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIInvitationQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIJobQueryView(msrest.serialization.Model):
    """QueryResponseOfIJobQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IJobQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IJobQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IJobQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIJobQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIJobThreadQueryView(msrest.serialization.Model):
    """QueryResponseOfIJobThreadQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IJobThreadQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IJobThreadQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IJobThreadQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIJobThreadQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIRepositoryItemQueryView(msrest.serialization.Model):
    """QueryResponseOfIRepositoryItemQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IRepositoryItemQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IRepositoryItemQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IRepositoryItemQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIRepositoryItemQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIRoleView(msrest.serialization.Model):
    """QueryResponseOfIRoleView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IRoleView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IRoleView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IRoleView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIRoleView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIRunnerQueryView(msrest.serialization.Model):
    """QueryResponseOfIRunnerQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IRunnerQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IRunnerQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IRunnerQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIRunnerQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryResponseOfIUserQueryView(msrest.serialization.Model):
    """QueryResponseOfIUserQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~Runway.Python.models.IUserQueryView]
    :ivar filtered_count: Required.
    :vartype filtered_count: long
    :ivar total_count: Required.
    :vartype total_count: long
    :ivar selected_count: Required.
    :vartype selected_count: long
    """

    _validation = {
        'filtered_count': {'required': True},
        'total_count': {'required': True},
        'selected_count': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[IUserQueryView]'},
        'filtered_count': {'key': 'filteredCount', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'long'},
        'selected_count': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~Runway.Python.models.IUserQueryView]
        :keyword filtered_count: Required.
        :paramtype filtered_count: long
        :keyword total_count: Required.
        :paramtype total_count: long
        :keyword selected_count: Required.
        :paramtype selected_count: long
        """
        super(QueryResponseOfIUserQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filtered_count = kwargs['filtered_count']
        self.total_count = kwargs['total_count']
        self.selected_count = kwargs['selected_count']


class QueryRunnersResponse(msrest.serialization.Model):
    """QueryRunnersResponse.

    :ivar runners:
    :vartype runners: list[str]
    """

    _attribute_map = {
        'runners': {'key': 'runners', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runners:
        :paramtype runners: list[str]
        """
        super(QueryRunnersResponse, self).__init__(**kwargs)
        self.runners = kwargs.get('runners', None)


class RemoteShellDeleteRequest(msrest.serialization.Model):
    """RemoteShellDeleteRequest.

    :ivar runner_id:
    :vartype runner_id: str
    :ivar download_id:
    :vartype download_id: str
    """

    _attribute_map = {
        'runner_id': {'key': 'runnerId', 'type': 'str'},
        'download_id': {'key': 'downloadId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runner_id:
        :paramtype runner_id: str
        :keyword download_id:
        :paramtype download_id: str
        """
        super(RemoteShellDeleteRequest, self).__init__(**kwargs)
        self.runner_id = kwargs.get('runner_id', None)
        self.download_id = kwargs.get('download_id', None)


class RemoteShellPingRequest(msrest.serialization.Model):
    """RemoteShellPingRequest.

    :ivar runner_id:
    :vartype runner_id: str
    :ivar download_id:
    :vartype download_id: str
    """

    _attribute_map = {
        'runner_id': {'key': 'runnerId', 'type': 'str'},
        'download_id': {'key': 'downloadId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runner_id:
        :paramtype runner_id: str
        :keyword download_id:
        :paramtype download_id: str
        """
        super(RemoteShellPingRequest, self).__init__(**kwargs)
        self.runner_id = kwargs.get('runner_id', None)
        self.download_id = kwargs.get('download_id', None)


class RemoteShellRequest(msrest.serialization.Model):
    """RemoteShellRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar runner_id:
    :vartype runner_id: str
    :ivar execute_cmd:
    :vartype execute_cmd: str
    :ivar internal_command: Required.
    :vartype internal_command: bool
    """

    _validation = {
        'internal_command': {'required': True},
    }

    _attribute_map = {
        'runner_id': {'key': 'runnerId', 'type': 'str'},
        'execute_cmd': {'key': 'executeCmd', 'type': 'str'},
        'internal_command': {'key': 'internalCommand', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runner_id:
        :paramtype runner_id: str
        :keyword execute_cmd:
        :paramtype execute_cmd: str
        :keyword internal_command: Required.
        :paramtype internal_command: bool
        """
        super(RemoteShellRequest, self).__init__(**kwargs)
        self.runner_id = kwargs.get('runner_id', None)
        self.execute_cmd = kwargs.get('execute_cmd', None)
        self.internal_command = kwargs['internal_command']


class ResetPasswordRequest(msrest.serialization.Model):
    """ResetPasswordRequest.

    :ivar email:
    :vartype email: str
    :ivar old_password:
    :vartype old_password: str
    :ivar new_password:
    :vartype new_password: str
    """

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'old_password': {'key': 'oldPassword', 'type': 'str'},
        'new_password': {'key': 'newPassword', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword email:
        :paramtype email: str
        :keyword old_password:
        :paramtype old_password: str
        :keyword new_password:
        :paramtype new_password: str
        """
        super(ResetPasswordRequest, self).__init__(**kwargs)
        self.email = kwargs.get('email', None)
        self.old_password = kwargs.get('old_password', None)
        self.new_password = kwargs.get('new_password', None)


class RunwayActor(RunwayObject):
    """RunwayActor.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar home_container_id:
    :vartype home_container_id: str
    :ivar sessions:
    :vartype sessions: list[~Runway.Python.models.RunwaySession]
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'home_container_id': {'key': 'homeContainerId', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[RunwaySession]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword home_container_id:
        :paramtype home_container_id: str
        :keyword sessions:
        :paramtype sessions: list[~Runway.Python.models.RunwaySession]
        """
        super(RunwayActor, self).__init__(**kwargs)
        self.home_container_id = kwargs.get('home_container_id', None)
        self.sessions = kwargs.get('sessions', None)


class RunwayConnection(RunwayObject):
    """RunwayConnection.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar assigned_endpoint_id:
    :vartype assigned_endpoint_id: str
    :ivar assigned_endpoint_name:
    :vartype assigned_endpoint_name: str
    :ivar action_name:
    :vartype action_name: str
    :ivar runner_id:
    :vartype runner_id: str
    :ivar action_id:
    :vartype action_id: str
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar settings:
    :vartype settings: list[~Runway.Python.models.ActionSetting]
    :ivar connection_metrics:
    :vartype connection_metrics: list[~Runway.Python.models.RunwayConnectionStatistic]
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'is_hidden': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'assigned_endpoint_id': {'key': 'assignedEndpointId', 'type': 'str'},
        'assigned_endpoint_name': {'key': 'assignedEndpointName', 'type': 'str'},
        'action_name': {'key': 'actionName', 'type': 'str'},
        'runner_id': {'key': 'runnerId', 'type': 'str'},
        'action_id': {'key': 'actionId', 'type': 'str'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '[ActionSetting]'},
        'connection_metrics': {'key': 'connectionMetrics', 'type': '[RunwayConnectionStatistic]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword assigned_endpoint_id:
        :paramtype assigned_endpoint_id: str
        :keyword assigned_endpoint_name:
        :paramtype assigned_endpoint_name: str
        :keyword action_name:
        :paramtype action_name: str
        :keyword runner_id:
        :paramtype runner_id: str
        :keyword action_id:
        :paramtype action_id: str
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword settings:
        :paramtype settings: list[~Runway.Python.models.ActionSetting]
        :keyword connection_metrics:
        :paramtype connection_metrics: list[~Runway.Python.models.RunwayConnectionStatistic]
        """
        super(RunwayConnection, self).__init__(**kwargs)
        self.assigned_endpoint_id = kwargs.get('assigned_endpoint_id', None)
        self.assigned_endpoint_name = kwargs.get('assigned_endpoint_name', None)
        self.action_name = kwargs.get('action_name', None)
        self.runner_id = kwargs.get('runner_id', None)
        self.action_id = kwargs.get('action_id', None)
        self.is_hidden = kwargs['is_hidden']
        self.settings = kwargs.get('settings', None)
        self.connection_metrics = kwargs.get('connection_metrics', None)


class RunwayStatistic(RunwayObject):
    """RunwayStatistic.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    :ivar reference_object_id:
    :vartype reference_object_id: str
    :ivar stat_string:
    :vartype stat_string: str
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'timestamp': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'reference_object_id': {'key': 'referenceObjectId', 'type': 'str'},
        'stat_string': {'key': 'statString', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        :keyword reference_object_id:
        :paramtype reference_object_id: str
        :keyword stat_string:
        :paramtype stat_string: str
        """
        super(RunwayStatistic, self).__init__(**kwargs)
        self.timestamp = kwargs['timestamp']
        self.reference_object_id = kwargs.get('reference_object_id', None)
        self.stat_string = kwargs.get('stat_string', None)


class RunwayConnectionStatistic(RunwayStatistic):
    """RunwayConnectionStatistic.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    :ivar reference_object_id:
    :vartype reference_object_id: str
    :ivar stat_string:
    :vartype stat_string: str
    :ivar transferred_bytes: Required.
    :vartype transferred_bytes: long
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'timestamp': {'required': True},
        'transferred_bytes': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'reference_object_id': {'key': 'referenceObjectId', 'type': 'str'},
        'stat_string': {'key': 'statString', 'type': 'str'},
        'transferred_bytes': {'key': 'transferredBytes', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        :keyword reference_object_id:
        :paramtype reference_object_id: str
        :keyword stat_string:
        :paramtype stat_string: str
        :keyword transferred_bytes: Required.
        :paramtype transferred_bytes: long
        """
        super(RunwayConnectionStatistic, self).__init__(**kwargs)
        self.transferred_bytes = kwargs['transferred_bytes']


class RunwayGroup(RunwayObject):
    """RunwayGroup.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar home_for_user_id:
    :vartype home_for_user_id: str
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar portrait_url:
    :vartype portrait_url: str
    :ivar parent_ids:
    :vartype parent_ids: list[str]
    :ivar licenses_allocated: Required.
    :vartype licenses_allocated: int
    :ivar licenses_in_use: Required.
    :vartype licenses_in_use: int
    :ivar license_expiration: Required.
    :vartype license_expiration: ~datetime.datetime
    :ivar can_create_tenants: Required.
    :vartype can_create_tenants: bool
    :ivar parent_license_container_id:
    :vartype parent_license_container_id: str
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'is_hidden': {'required': True},
        'licenses_allocated': {'required': True},
        'licenses_in_use': {'required': True},
        'license_expiration': {'required': True},
        'can_create_tenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'home_for_user_id': {'key': 'homeForUserId', 'type': 'str'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
        'parent_ids': {'key': 'parentIds', 'type': '[str]'},
        'licenses_allocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licenses_in_use': {'key': 'licensesInUse', 'type': 'int'},
        'license_expiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'can_create_tenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parent_license_container_id': {'key': 'parentLicenseContainerId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword home_for_user_id:
        :paramtype home_for_user_id: str
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword portrait_url:
        :paramtype portrait_url: str
        :keyword parent_ids:
        :paramtype parent_ids: list[str]
        :keyword licenses_allocated: Required.
        :paramtype licenses_allocated: int
        :keyword licenses_in_use: Required.
        :paramtype licenses_in_use: int
        :keyword license_expiration: Required.
        :paramtype license_expiration: ~datetime.datetime
        :keyword can_create_tenants: Required.
        :paramtype can_create_tenants: bool
        :keyword parent_license_container_id:
        :paramtype parent_license_container_id: str
        """
        super(RunwayGroup, self).__init__(**kwargs)
        self.home_for_user_id = kwargs.get('home_for_user_id', None)
        self.is_hidden = kwargs['is_hidden']
        self.portrait_url = kwargs.get('portrait_url', None)
        self.parent_ids = kwargs.get('parent_ids', None)
        self.licenses_allocated = kwargs['licenses_allocated']
        self.licenses_in_use = kwargs['licenses_in_use']
        self.license_expiration = kwargs['license_expiration']
        self.can_create_tenants = kwargs['can_create_tenants']
        self.parent_license_container_id = kwargs.get('parent_license_container_id', None)


class RunwayInvitation(RunwayObject):
    """RunwayInvitation.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar actor_id:
    :vartype actor_id: str
    :ivar actor_name:
    :vartype actor_name: str
    :ivar email_address:
    :vartype email_address: str
    :ivar user_name:
    :vartype user_name: str
    :ivar group_id:
    :vartype group_id: str
    :ivar role_id:
    :vartype role_id: str
    :ivar role_name:
    :vartype role_name: str
    :ivar group_name:
    :vartype group_name: str
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'actor_id': {'key': 'actorId', 'type': 'str'},
        'actor_name': {'key': 'actorName', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
        'role_name': {'key': 'roleName', 'type': 'str'},
        'group_name': {'key': 'groupName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword actor_id:
        :paramtype actor_id: str
        :keyword actor_name:
        :paramtype actor_name: str
        :keyword email_address:
        :paramtype email_address: str
        :keyword user_name:
        :paramtype user_name: str
        :keyword group_id:
        :paramtype group_id: str
        :keyword role_id:
        :paramtype role_id: str
        :keyword role_name:
        :paramtype role_name: str
        :keyword group_name:
        :paramtype group_name: str
        """
        super(RunwayInvitation, self).__init__(**kwargs)
        self.actor_id = kwargs.get('actor_id', None)
        self.actor_name = kwargs.get('actor_name', None)
        self.email_address = kwargs.get('email_address', None)
        self.user_name = kwargs.get('user_name', None)
        self.group_id = kwargs.get('group_id', None)
        self.role_id = kwargs.get('role_id', None)
        self.role_name = kwargs.get('role_name', None)
        self.group_name = kwargs.get('group_name', None)


class RunwayJob(RunwayObject):
    """RunwayJob.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar is_enabled: Required.
    :vartype is_enabled: bool
    :ivar actions:
    :vartype actions: list[~Runway.Python.models.ActionInstance]
    :ivar starting_action_id:
    :vartype starting_action_id: str
    :ivar schedule:
    :vartype schedule: ~Runway.Python.models.JobSchedule
    :ivar endpoint_set_id:
    :vartype endpoint_set_id: str
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar job_metrics:
    :vartype job_metrics: list[~Runway.Python.models.RunwayJobStatistic]
    :ivar total_endpoints_finished: Required.
    :vartype total_endpoints_finished: int
    :ivar total_endpoints_finished_errors: Required.
    :vartype total_endpoints_finished_errors: int
    :ivar total_endpoints_running: Required.
    :vartype total_endpoints_running: int
    :ivar total_endpoints_assigned: Required.
    :vartype total_endpoints_assigned: int
    :ivar last_thread:
    :vartype last_thread: ~Runway.Python.models.RunwayJobThread
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'is_enabled': {'required': True},
        'is_hidden': {'required': True},
        'total_endpoints_finished': {'required': True},
        'total_endpoints_finished_errors': {'required': True},
        'total_endpoints_running': {'required': True},
        'total_endpoints_assigned': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'actions': {'key': 'actions', 'type': '[ActionInstance]'},
        'starting_action_id': {'key': 'startingActionId', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'JobSchedule'},
        'endpoint_set_id': {'key': 'endpointSetId', 'type': 'str'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'job_metrics': {'key': 'jobMetrics', 'type': '[RunwayJobStatistic]'},
        'total_endpoints_finished': {'key': 'totalEndpointsFinished', 'type': 'int'},
        'total_endpoints_finished_errors': {'key': 'totalEndpointsFinishedErrors', 'type': 'int'},
        'total_endpoints_running': {'key': 'totalEndpointsRunning', 'type': 'int'},
        'total_endpoints_assigned': {'key': 'totalEndpointsAssigned', 'type': 'int'},
        'last_thread': {'key': 'lastThread', 'type': 'RunwayJobThread'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword is_enabled: Required.
        :paramtype is_enabled: bool
        :keyword actions:
        :paramtype actions: list[~Runway.Python.models.ActionInstance]
        :keyword starting_action_id:
        :paramtype starting_action_id: str
        :keyword schedule:
        :paramtype schedule: ~Runway.Python.models.JobSchedule
        :keyword endpoint_set_id:
        :paramtype endpoint_set_id: str
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword job_metrics:
        :paramtype job_metrics: list[~Runway.Python.models.RunwayJobStatistic]
        :keyword total_endpoints_finished: Required.
        :paramtype total_endpoints_finished: int
        :keyword total_endpoints_finished_errors: Required.
        :paramtype total_endpoints_finished_errors: int
        :keyword total_endpoints_running: Required.
        :paramtype total_endpoints_running: int
        :keyword total_endpoints_assigned: Required.
        :paramtype total_endpoints_assigned: int
        :keyword last_thread:
        :paramtype last_thread: ~Runway.Python.models.RunwayJobThread
        """
        super(RunwayJob, self).__init__(**kwargs)
        self.is_enabled = kwargs['is_enabled']
        self.actions = kwargs.get('actions', None)
        self.starting_action_id = kwargs.get('starting_action_id', None)
        self.schedule = kwargs.get('schedule', None)
        self.endpoint_set_id = kwargs.get('endpoint_set_id', None)
        self.is_hidden = kwargs['is_hidden']
        self.job_metrics = kwargs.get('job_metrics', None)
        self.total_endpoints_finished = kwargs['total_endpoints_finished']
        self.total_endpoints_finished_errors = kwargs['total_endpoints_finished_errors']
        self.total_endpoints_running = kwargs['total_endpoints_running']
        self.total_endpoints_assigned = kwargs['total_endpoints_assigned']
        self.last_thread = kwargs.get('last_thread', None)


class RunwayJobStatistic(RunwayStatistic):
    """RunwayJobStatistic.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    :ivar reference_object_id:
    :vartype reference_object_id: str
    :ivar stat_string:
    :vartype stat_string: str
    :ivar job_id:
    :vartype job_id: str
    :ivar num_spawned: Required.
    :vartype num_spawned: long
    :ivar num_running: Required.
    :vartype num_running: long
    :ivar num_finished: Required.
    :vartype num_finished: long
    :ivar num_errors: Required.
    :vartype num_errors: long
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'timestamp': {'required': True},
        'num_spawned': {'required': True},
        'num_running': {'required': True},
        'num_finished': {'required': True},
        'num_errors': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'reference_object_id': {'key': 'referenceObjectId', 'type': 'str'},
        'stat_string': {'key': 'statString', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'num_spawned': {'key': 'numSpawned', 'type': 'long'},
        'num_running': {'key': 'numRunning', 'type': 'long'},
        'num_finished': {'key': 'numFinished', 'type': 'long'},
        'num_errors': {'key': 'numErrors', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        :keyword reference_object_id:
        :paramtype reference_object_id: str
        :keyword stat_string:
        :paramtype stat_string: str
        :keyword job_id:
        :paramtype job_id: str
        :keyword num_spawned: Required.
        :paramtype num_spawned: long
        :keyword num_running: Required.
        :paramtype num_running: long
        :keyword num_finished: Required.
        :paramtype num_finished: long
        :keyword num_errors: Required.
        :paramtype num_errors: long
        """
        super(RunwayJobStatistic, self).__init__(**kwargs)
        self.job_id = kwargs.get('job_id', None)
        self.num_spawned = kwargs['num_spawned']
        self.num_running = kwargs['num_running']
        self.num_finished = kwargs['num_finished']
        self.num_errors = kwargs['num_errors']


class RunwayJobThread(RunwayObject):
    """RunwayJobThread.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar source_job_id:
    :vartype source_job_id: str
    :ivar prodigal_object_id:
    :vartype prodigal_object_id: str
    :ivar starting_action_id:
    :vartype starting_action_id: str
    :ivar current_runner_id:
    :vartype current_runner_id: str
    :ivar current_action_id:
    :vartype current_action_id: str
    :ivar final_result: Required. Possible values include: "Uninitialized", "Success", "Failure".
    :vartype final_result: str or ~Runway.Python.models.StepResult
    :ivar thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype thread_state: str or ~Runway.Python.models.JobThreadState
    :ivar last_step_result: Required. Possible values include: "Uninitialized", "Success",
     "Failure".
    :vartype last_step_result: str or ~Runway.Python.models.StepResult
    :ivar specific_placement_id:
    :vartype specific_placement_id: str
    :ivar run_on: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
     "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
    :vartype run_on: str or ~Runway.Python.models.RunLocation
    :ivar placement_namespace_affinity:
    :vartype placement_namespace_affinity: str
    :ivar placement_pod_affinity:
    :vartype placement_pod_affinity: str
    :ivar actions:
    :vartype actions: list[~Runway.Python.models.ActionInstance]
    :ivar node_step_history:
    :vartype node_step_history: list[str]
    :ivar last_run_time: Required.
    :vartype last_run_time: ~datetime.datetime
    :ivar prodigal_object:
    :vartype prodigal_object: ~Runway.Python.models.RunwayEndpointAsset
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'final_result': {'required': True},
        'thread_state': {'required': True},
        'last_step_result': {'required': True},
        'run_on': {'required': True},
        'last_run_time': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'source_job_id': {'key': 'sourceJobId', 'type': 'str'},
        'prodigal_object_id': {'key': 'prodigalObjectId', 'type': 'str'},
        'starting_action_id': {'key': 'startingActionId', 'type': 'str'},
        'current_runner_id': {'key': 'currentRunnerId', 'type': 'str'},
        'current_action_id': {'key': 'currentActionId', 'type': 'str'},
        'final_result': {'key': 'finalResult', 'type': 'str'},
        'thread_state': {'key': 'threadState', 'type': 'str'},
        'last_step_result': {'key': 'lastStepResult', 'type': 'str'},
        'specific_placement_id': {'key': 'specificPlacementId', 'type': 'str'},
        'run_on': {'key': 'runOn', 'type': 'str'},
        'placement_namespace_affinity': {'key': 'placementNamespaceAffinity', 'type': 'str'},
        'placement_pod_affinity': {'key': 'placementPodAffinity', 'type': 'str'},
        'actions': {'key': 'actions', 'type': '[ActionInstance]'},
        'node_step_history': {'key': 'nodeStepHistory', 'type': '[str]'},
        'last_run_time': {'key': 'lastRunTime', 'type': 'iso-8601'},
        'prodigal_object': {'key': 'prodigalObject', 'type': 'RunwayEndpointAsset'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword source_job_id:
        :paramtype source_job_id: str
        :keyword prodigal_object_id:
        :paramtype prodigal_object_id: str
        :keyword starting_action_id:
        :paramtype starting_action_id: str
        :keyword current_runner_id:
        :paramtype current_runner_id: str
        :keyword current_action_id:
        :paramtype current_action_id: str
        :keyword final_result: Required. Possible values include: "Uninitialized", "Success",
         "Failure".
        :paramtype final_result: str or ~Runway.Python.models.StepResult
        :keyword thread_state: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype thread_state: str or ~Runway.Python.models.JobThreadState
        :keyword last_step_result: Required. Possible values include: "Uninitialized", "Success",
         "Failure".
        :paramtype last_step_result: str or ~Runway.Python.models.StepResult
        :keyword specific_placement_id:
        :paramtype specific_placement_id: str
        :keyword run_on: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
         "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
        :paramtype run_on: str or ~Runway.Python.models.RunLocation
        :keyword placement_namespace_affinity:
        :paramtype placement_namespace_affinity: str
        :keyword placement_pod_affinity:
        :paramtype placement_pod_affinity: str
        :keyword actions:
        :paramtype actions: list[~Runway.Python.models.ActionInstance]
        :keyword node_step_history:
        :paramtype node_step_history: list[str]
        :keyword last_run_time: Required.
        :paramtype last_run_time: ~datetime.datetime
        :keyword prodigal_object:
        :paramtype prodigal_object: ~Runway.Python.models.RunwayEndpointAsset
        """
        super(RunwayJobThread, self).__init__(**kwargs)
        self.source_job_id = kwargs.get('source_job_id', None)
        self.prodigal_object_id = kwargs.get('prodigal_object_id', None)
        self.starting_action_id = kwargs.get('starting_action_id', None)
        self.current_runner_id = kwargs.get('current_runner_id', None)
        self.current_action_id = kwargs.get('current_action_id', None)
        self.final_result = kwargs['final_result']
        self.thread_state = kwargs['thread_state']
        self.last_step_result = kwargs['last_step_result']
        self.specific_placement_id = kwargs.get('specific_placement_id', None)
        self.run_on = kwargs['run_on']
        self.placement_namespace_affinity = kwargs.get('placement_namespace_affinity', None)
        self.placement_pod_affinity = kwargs.get('placement_pod_affinity', None)
        self.actions = kwargs.get('actions', None)
        self.node_step_history = kwargs.get('node_step_history', None)
        self.last_run_time = kwargs['last_run_time']
        self.prodigal_object = kwargs.get('prodigal_object', None)


class RunwayKubernetesEndpoint(msrest.serialization.Model):
    """RunwayKubernetesEndpoint.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    :ivar ip_address:
    :vartype ip_address: str
    :ivar node_name:
    :vartype node_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'node_name': {'key': 'nodeName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        :keyword ip_address:
        :paramtype ip_address: str
        :keyword node_name:
        :paramtype node_name: str
        """
        super(RunwayKubernetesEndpoint, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.namespace = kwargs.get('namespace', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.node_name = kwargs.get('node_name', None)


class RunwayNode(RunwayObject):
    """RunwayNode.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar target_id:
    :vartype target_id: str
    :ivar node_state: Required. Possible values include: "NotEnrolled", "Enrolled".
    :vartype node_state: str or ~Runway.Python.models.NodeState
    :ivar is_web_socket_connected: Required.
    :vartype is_web_socket_connected: bool
    :ivar last_checkin_time: Required.
    :vartype last_checkin_time: ~datetime.datetime
    :ivar delete_after: Required.
    :vartype delete_after: str
    :ivar is_pending_dissolve: Required.
    :vartype is_pending_dissolve: bool
    :ivar affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
     "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype affinity: str or ~Runway.Python.models.NodeAffinity
    :ivar pod_name:
    :vartype pod_name: str
    :ivar cluster_namespace:
    :vartype cluster_namespace: str
    :ivar container_image_name:
    :vartype container_image_name: str
    :ivar asset_id:
    :vartype asset_id: str
    :ivar asset_name:
    :vartype asset_name: str
    :ivar sessions:
    :vartype sessions: list[~Runway.Python.models.RunwaySession]
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'node_state': {'required': True},
        'is_web_socket_connected': {'required': True},
        'last_checkin_time': {'required': True},
        'delete_after': {'required': True},
        'is_pending_dissolve': {'required': True},
        'affinity': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'target_id': {'key': 'targetId', 'type': 'str'},
        'node_state': {'key': 'nodeState', 'type': 'str'},
        'is_web_socket_connected': {'key': 'isWebSocketConnected', 'type': 'bool'},
        'last_checkin_time': {'key': 'lastCheckinTime', 'type': 'iso-8601'},
        'delete_after': {'key': 'deleteAfter', 'type': 'str'},
        'is_pending_dissolve': {'key': 'isPendingDissolve', 'type': 'bool'},
        'affinity': {'key': 'affinity', 'type': 'str'},
        'pod_name': {'key': 'podName', 'type': 'str'},
        'cluster_namespace': {'key': 'clusterNamespace', 'type': 'str'},
        'container_image_name': {'key': 'containerImageName', 'type': 'str'},
        'asset_id': {'key': 'assetId', 'type': 'str'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[RunwaySession]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword target_id:
        :paramtype target_id: str
        :keyword node_state: Required. Possible values include: "NotEnrolled", "Enrolled".
        :paramtype node_state: str or ~Runway.Python.models.NodeState
        :keyword is_web_socket_connected: Required.
        :paramtype is_web_socket_connected: bool
        :keyword last_checkin_time: Required.
        :paramtype last_checkin_time: ~datetime.datetime
        :keyword delete_after: Required.
        :paramtype delete_after: str
        :keyword is_pending_dissolve: Required.
        :paramtype is_pending_dissolve: bool
        :keyword affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
         "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype affinity: str or ~Runway.Python.models.NodeAffinity
        :keyword pod_name:
        :paramtype pod_name: str
        :keyword cluster_namespace:
        :paramtype cluster_namespace: str
        :keyword container_image_name:
        :paramtype container_image_name: str
        :keyword asset_id:
        :paramtype asset_id: str
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword sessions:
        :paramtype sessions: list[~Runway.Python.models.RunwaySession]
        """
        super(RunwayNode, self).__init__(**kwargs)
        self.target_id = kwargs.get('target_id', None)
        self.node_state = kwargs['node_state']
        self.is_web_socket_connected = kwargs['is_web_socket_connected']
        self.last_checkin_time = kwargs['last_checkin_time']
        self.delete_after = kwargs['delete_after']
        self.is_pending_dissolve = kwargs['is_pending_dissolve']
        self.affinity = kwargs['affinity']
        self.pod_name = kwargs.get('pod_name', None)
        self.cluster_namespace = kwargs.get('cluster_namespace', None)
        self.container_image_name = kwargs.get('container_image_name', None)
        self.asset_id = kwargs.get('asset_id', None)
        self.asset_name = kwargs.get('asset_name', None)
        self.sessions = kwargs.get('sessions', None)


class RunwayRepositoryItem(RunwayObject):
    """RunwayRepositoryItem.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar desired_settings:
    :vartype desired_settings: list[~Runway.Python.models.ActionSetting]
    :ivar glyph:
    :vartype glyph: str
    :ivar author:
    :vartype author: str
    :ivar language:
    :vartype language: str
    :ivar is_connection_required: Required.
    :vartype is_connection_required: bool
    :ivar license: Required. Possible values include: "Free", "Paid".
    :vartype license: str or ~Runway.Python.models.RepositoryLicense
    :ivar scope: Required. Possible values include: "Private", "Public".
    :vartype scope: str or ~Runway.Python.models.RepositoryScope
    :ivar input:
    :vartype input: str
    :ivar output:
    :vartype output: str
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'is_connection_required': {'required': True},
        'license': {'required': True},
        'scope': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'desired_settings': {'key': 'desiredSettings', 'type': '[ActionSetting]'},
        'glyph': {'key': 'glyph', 'type': 'str'},
        'author': {'key': 'author', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'is_connection_required': {'key': 'isConnectionRequired', 'type': 'bool'},
        'license': {'key': 'license', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'input': {'key': 'input', 'type': 'str'},
        'output': {'key': 'output', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword desired_settings:
        :paramtype desired_settings: list[~Runway.Python.models.ActionSetting]
        :keyword glyph:
        :paramtype glyph: str
        :keyword author:
        :paramtype author: str
        :keyword language:
        :paramtype language: str
        :keyword is_connection_required: Required.
        :paramtype is_connection_required: bool
        :keyword license: Required. Possible values include: "Free", "Paid".
        :paramtype license: str or ~Runway.Python.models.RepositoryLicense
        :keyword scope: Required. Possible values include: "Private", "Public".
        :paramtype scope: str or ~Runway.Python.models.RepositoryScope
        :keyword input:
        :paramtype input: str
        :keyword output:
        :paramtype output: str
        """
        super(RunwayRepositoryItem, self).__init__(**kwargs)
        self.desired_settings = kwargs.get('desired_settings', None)
        self.glyph = kwargs.get('glyph', None)
        self.author = kwargs.get('author', None)
        self.language = kwargs.get('language', None)
        self.is_connection_required = kwargs['is_connection_required']
        self.license = kwargs['license']
        self.scope = kwargs['scope']
        self.input = kwargs.get('input', None)
        self.output = kwargs.get('output', None)


class RunwayRole(RunwayObject):
    """RunwayRole.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar group_id:
    :vartype group_id: str
    :ivar permissions:
    :vartype permissions: list[~Runway.Python.models.RunwayRoleAccess]
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': '[RunwayRoleAccess]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword group_id:
        :paramtype group_id: str
        :keyword permissions:
        :paramtype permissions: list[~Runway.Python.models.RunwayRoleAccess]
        """
        super(RunwayRole, self).__init__(**kwargs)
        self.group_id = kwargs.get('group_id', None)
        self.permissions = kwargs.get('permissions', None)


class RunwayRoleAccess(msrest.serialization.Model):
    """RunwayRoleAccess.

    All required parameters must be populated in order to send to Azure.

    :ivar type_name:
    :vartype type_name: str
    :ivar access_flags: Required. Possible values include: "Read", "Create", "Update", "Delete",
     "Remote", "Execute", "Admin", "SuperAdmin".
    :vartype access_flags: str or ~Runway.Python.models.AccessFlags
    """

    _validation = {
        'access_flags': {'required': True},
    }

    _attribute_map = {
        'type_name': {'key': 'typeName', 'type': 'str'},
        'access_flags': {'key': 'accessFlags', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type_name:
        :paramtype type_name: str
        :keyword access_flags: Required. Possible values include: "Read", "Create", "Update", "Delete",
         "Remote", "Execute", "Admin", "SuperAdmin".
        :paramtype access_flags: str or ~Runway.Python.models.AccessFlags
        """
        super(RunwayRoleAccess, self).__init__(**kwargs)
        self.type_name = kwargs.get('type_name', None)
        self.access_flags = kwargs['access_flags']


class RunwayRunner(RunwayNode):
    """RunwayRunner.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar target_id:
    :vartype target_id: str
    :ivar node_state: Required. Possible values include: "NotEnrolled", "Enrolled".
    :vartype node_state: str or ~Runway.Python.models.NodeState
    :ivar is_web_socket_connected: Required.
    :vartype is_web_socket_connected: bool
    :ivar last_checkin_time: Required.
    :vartype last_checkin_time: ~datetime.datetime
    :ivar delete_after: Required.
    :vartype delete_after: str
    :ivar is_pending_dissolve: Required.
    :vartype is_pending_dissolve: bool
    :ivar affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
     "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype affinity: str or ~Runway.Python.models.NodeAffinity
    :ivar pod_name:
    :vartype pod_name: str
    :ivar cluster_namespace:
    :vartype cluster_namespace: str
    :ivar container_image_name:
    :vartype container_image_name: str
    :ivar asset_id:
    :vartype asset_id: str
    :ivar asset_name:
    :vartype asset_name: str
    :ivar sessions:
    :vartype sessions: list[~Runway.Python.models.RunwaySession]
    :ivar is_active: Required.
    :vartype is_active: bool
    :ivar parent_license_container_id:
    :vartype parent_license_container_id: str
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'node_state': {'required': True},
        'is_web_socket_connected': {'required': True},
        'last_checkin_time': {'required': True},
        'delete_after': {'required': True},
        'is_pending_dissolve': {'required': True},
        'affinity': {'required': True},
        'is_active': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'target_id': {'key': 'targetId', 'type': 'str'},
        'node_state': {'key': 'nodeState', 'type': 'str'},
        'is_web_socket_connected': {'key': 'isWebSocketConnected', 'type': 'bool'},
        'last_checkin_time': {'key': 'lastCheckinTime', 'type': 'iso-8601'},
        'delete_after': {'key': 'deleteAfter', 'type': 'str'},
        'is_pending_dissolve': {'key': 'isPendingDissolve', 'type': 'bool'},
        'affinity': {'key': 'affinity', 'type': 'str'},
        'pod_name': {'key': 'podName', 'type': 'str'},
        'cluster_namespace': {'key': 'clusterNamespace', 'type': 'str'},
        'container_image_name': {'key': 'containerImageName', 'type': 'str'},
        'asset_id': {'key': 'assetId', 'type': 'str'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[RunwaySession]'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
        'parent_license_container_id': {'key': 'parentLicenseContainerId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword target_id:
        :paramtype target_id: str
        :keyword node_state: Required. Possible values include: "NotEnrolled", "Enrolled".
        :paramtype node_state: str or ~Runway.Python.models.NodeState
        :keyword is_web_socket_connected: Required.
        :paramtype is_web_socket_connected: bool
        :keyword last_checkin_time: Required.
        :paramtype last_checkin_time: ~datetime.datetime
        :keyword delete_after: Required.
        :paramtype delete_after: str
        :keyword is_pending_dissolve: Required.
        :paramtype is_pending_dissolve: bool
        :keyword affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
         "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype affinity: str or ~Runway.Python.models.NodeAffinity
        :keyword pod_name:
        :paramtype pod_name: str
        :keyword cluster_namespace:
        :paramtype cluster_namespace: str
        :keyword container_image_name:
        :paramtype container_image_name: str
        :keyword asset_id:
        :paramtype asset_id: str
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword sessions:
        :paramtype sessions: list[~Runway.Python.models.RunwaySession]
        :keyword is_active: Required.
        :paramtype is_active: bool
        :keyword parent_license_container_id:
        :paramtype parent_license_container_id: str
        """
        super(RunwayRunner, self).__init__(**kwargs)
        self.is_active = kwargs['is_active']
        self.parent_license_container_id = kwargs.get('parent_license_container_id', None)


class RunwaySession(RunwayObject):
    """RunwaySession.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar actor_id:
    :vartype actor_id: str
    :ivar node_id:
    :vartype node_id: str
    :ivar session_token:
    :vartype session_token: str
    :ivar socket_connection_id:
    :vartype socket_connection_id: str
    :ivar instance_name:
    :vartype instance_name: str
    :ivar expiration: Required.
    :vartype expiration: ~datetime.datetime
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'expiration': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'actor_id': {'key': 'actorId', 'type': 'str'},
        'node_id': {'key': 'nodeId', 'type': 'str'},
        'session_token': {'key': 'sessionToken', 'type': 'str'},
        'socket_connection_id': {'key': 'socketConnectionId', 'type': 'str'},
        'instance_name': {'key': 'instanceName', 'type': 'str'},
        'expiration': {'key': 'expiration', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword actor_id:
        :paramtype actor_id: str
        :keyword node_id:
        :paramtype node_id: str
        :keyword session_token:
        :paramtype session_token: str
        :keyword socket_connection_id:
        :paramtype socket_connection_id: str
        :keyword instance_name:
        :paramtype instance_name: str
        :keyword expiration: Required.
        :paramtype expiration: ~datetime.datetime
        """
        super(RunwaySession, self).__init__(**kwargs)
        self.actor_id = kwargs.get('actor_id', None)
        self.node_id = kwargs.get('node_id', None)
        self.session_token = kwargs.get('session_token', None)
        self.socket_connection_id = kwargs.get('socket_connection_id', None)
        self.instance_name = kwargs.get('instance_name', None)
        self.expiration = kwargs['expiration']


class RunwayUser(RunwayActor):
    """RunwayUser.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar is_selected: Required.
    :vartype is_selected: bool
    :ivar home_container_id:
    :vartype home_container_id: str
    :ivar sessions:
    :vartype sessions: list[~Runway.Python.models.RunwaySession]
    :ivar email_address:
    :vartype email_address: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    :ivar expires: Required.
    :vartype expires: ~datetime.datetime
    :ivar is_pending: Required.
    :vartype is_pending: bool
    :ivar force_password_reset: Required.
    :vartype force_password_reset: bool
    :ivar portrait_url:
    :vartype portrait_url: str
    """

    _validation = {
        'revision': {'required': True},
        'is_selected': {'required': True},
        'expires': {'required': True},
        'is_pending': {'required': True},
        'force_password_reset': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'is_selected': {'key': 'isSelected', 'type': 'bool'},
        'home_container_id': {'key': 'homeContainerId', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[RunwaySession]'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'expires': {'key': 'expires', 'type': 'iso-8601'},
        'is_pending': {'key': 'isPending', 'type': 'bool'},
        'force_password_reset': {'key': 'forcePasswordReset', 'type': 'bool'},
        'portrait_url': {'key': 'portraitUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword is_selected: Required.
        :paramtype is_selected: bool
        :keyword home_container_id:
        :paramtype home_container_id: str
        :keyword sessions:
        :paramtype sessions: list[~Runway.Python.models.RunwaySession]
        :keyword email_address:
        :paramtype email_address: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        :keyword expires: Required.
        :paramtype expires: ~datetime.datetime
        :keyword is_pending: Required.
        :paramtype is_pending: bool
        :keyword force_password_reset: Required.
        :paramtype force_password_reset: bool
        :keyword portrait_url:
        :paramtype portrait_url: str
        """
        super(RunwayUser, self).__init__(**kwargs)
        self.email_address = kwargs.get('email_address', None)
        self.company = kwargs.get('company', None)
        self.phone = kwargs.get('phone', None)
        self.expires = kwargs['expires']
        self.is_pending = kwargs['is_pending']
        self.force_password_reset = kwargs['force_password_reset']
        self.portrait_url = kwargs.get('portrait_url', None)


class SignupRequest(msrest.serialization.Model):
    """SignupRequest.

    :ivar email_address:
    :vartype email_address: str
    :ivar password:
    :vartype password: str
    :ivar name:
    :vartype name: str
    :ivar phone:
    :vartype phone: str
    :ivar company:
    :vartype company: str
    :ivar captcha:
    :vartype captcha: str
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'captcha': {'key': 'captcha', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword email_address:
        :paramtype email_address: str
        :keyword password:
        :paramtype password: str
        :keyword name:
        :paramtype name: str
        :keyword phone:
        :paramtype phone: str
        :keyword company:
        :paramtype company: str
        :keyword captcha:
        :paramtype captcha: str
        """
        super(SignupRequest, self).__init__(**kwargs)
        self.email_address = kwargs.get('email_address', None)
        self.password = kwargs.get('password', None)
        self.name = kwargs.get('name', None)
        self.phone = kwargs.get('phone', None)
        self.company = kwargs.get('company', None)
        self.captcha = kwargs.get('captcha', None)


class StepThreadRequest(msrest.serialization.Model):
    """StepThreadRequest.

    :ivar thread_id:
    :vartype thread_id: str
    :ivar result:
    :vartype result: str
    :ivar std_out_blob_id:
    :vartype std_out_blob_id: str
    :ivar result_filename:
    :vartype result_filename: str
    :ivar result_file_size:
    :vartype result_file_size: str
    """

    _attribute_map = {
        'thread_id': {'key': 'threadId', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
        'std_out_blob_id': {'key': 'stdOutBlobId', 'type': 'str'},
        'result_filename': {'key': 'resultFilename', 'type': 'str'},
        'result_file_size': {'key': 'resultFileSize', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword thread_id:
        :paramtype thread_id: str
        :keyword result:
        :paramtype result: str
        :keyword std_out_blob_id:
        :paramtype std_out_blob_id: str
        :keyword result_filename:
        :paramtype result_filename: str
        :keyword result_file_size:
        :paramtype result_file_size: str
        """
        super(StepThreadRequest, self).__init__(**kwargs)
        self.thread_id = kwargs.get('thread_id', None)
        self.result = kwargs.get('result', None)
        self.std_out_blob_id = kwargs.get('std_out_blob_id', None)
        self.result_filename = kwargs.get('result_filename', None)
        self.result_file_size = kwargs.get('result_file_size', None)


class TagRequest(msrest.serialization.Model):
    """TagRequest.

    :ivar set_id:
    :vartype set_id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    """

    _attribute_map = {
        'set_id': {'key': 'setId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword set_id:
        :paramtype set_id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        """
        super(TagRequest, self).__init__(**kwargs)
        self.set_id = kwargs.get('set_id', None)
        self.tags = kwargs.get('tags', None)


class TagView(msrest.serialization.Model):
    """TagView.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar count: Required.
    :vartype count: long
    """

    _validation = {
        'count': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword count: Required.
        :paramtype count: long
        """
        super(TagView, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.count = kwargs['count']


class ThreadView(msrest.serialization.Model):
    """ThreadView.

    :ivar prodigal_object_id:
    :vartype prodigal_object_id: str
    :ivar prodigal_asset_name:
    :vartype prodigal_asset_name: str
    :ivar action_instance_id:
    :vartype action_instance_id: str
    :ivar repository_action_id:
    :vartype repository_action_id: str
    :ivar job_id:
    :vartype job_id: str
    :ivar thread_id:
    :vartype thread_id: str
    :ivar connection_id:
    :vartype connection_id: str
    :ivar connection_name:
    :vartype connection_name: str
    :ivar connection_string:
    :vartype connection_string: str
    :ivar settings:
    :vartype settings: list[~Runway.Python.models.ActionSetting]
    """

    _attribute_map = {
        'prodigal_object_id': {'key': 'prodigalObjectId', 'type': 'str'},
        'prodigal_asset_name': {'key': 'prodigalAssetName', 'type': 'str'},
        'action_instance_id': {'key': 'actionInstanceId', 'type': 'str'},
        'repository_action_id': {'key': 'repositoryActionId', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'thread_id': {'key': 'threadId', 'type': 'str'},
        'connection_id': {'key': 'connectionId', 'type': 'str'},
        'connection_name': {'key': 'connectionName', 'type': 'str'},
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '[ActionSetting]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword prodigal_object_id:
        :paramtype prodigal_object_id: str
        :keyword prodigal_asset_name:
        :paramtype prodigal_asset_name: str
        :keyword action_instance_id:
        :paramtype action_instance_id: str
        :keyword repository_action_id:
        :paramtype repository_action_id: str
        :keyword job_id:
        :paramtype job_id: str
        :keyword thread_id:
        :paramtype thread_id: str
        :keyword connection_id:
        :paramtype connection_id: str
        :keyword connection_name:
        :paramtype connection_name: str
        :keyword connection_string:
        :paramtype connection_string: str
        :keyword settings:
        :paramtype settings: list[~Runway.Python.models.ActionSetting]
        """
        super(ThreadView, self).__init__(**kwargs)
        self.prodigal_object_id = kwargs.get('prodigal_object_id', None)
        self.prodigal_asset_name = kwargs.get('prodigal_asset_name', None)
        self.action_instance_id = kwargs.get('action_instance_id', None)
        self.repository_action_id = kwargs.get('repository_action_id', None)
        self.job_id = kwargs.get('job_id', None)
        self.thread_id = kwargs.get('thread_id', None)
        self.connection_id = kwargs.get('connection_id', None)
        self.connection_name = kwargs.get('connection_name', None)
        self.connection_string = kwargs.get('connection_string', None)
        self.settings = kwargs.get('settings', None)


class TokenResponse(msrest.serialization.Model):
    """TokenResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar token:
    :vartype token: str
    :ivar expiration: Required.
    :vartype expiration: ~datetime.datetime
    """

    _validation = {
        'expiration': {'required': True},
    }

    _attribute_map = {
        'token': {'key': 'token', 'type': 'str'},
        'expiration': {'key': 'expiration', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword token:
        :paramtype token: str
        :keyword expiration: Required.
        :paramtype expiration: ~datetime.datetime
        """
        super(TokenResponse, self).__init__(**kwargs)
        self.token = kwargs.get('token', None)
        self.expiration = kwargs['expiration']


class UpdateConnectionRequest(CreateConnectionRequest):
    """UpdateConnectionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar group_id:
    :vartype group_id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar assigned_endpoint_id:
    :vartype assigned_endpoint_id: str
    :ivar runner_id:
    :vartype runner_id: str
    :ivar action_id:
    :vartype action_id: str
    :ivar is_hidden: Required.
    :vartype is_hidden: bool
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    :ivar id:
    :vartype id: str
    """

    _validation = {
        'is_hidden': {'required': True},
    }

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'assigned_endpoint_id': {'key': 'assignedEndpointId', 'type': 'str'},
        'runner_id': {'key': 'runnerId', 'type': 'str'},
        'action_id': {'key': 'actionId', 'type': 'str'},
        'is_hidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword group_id:
        :paramtype group_id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword assigned_endpoint_id:
        :paramtype assigned_endpoint_id: str
        :keyword runner_id:
        :paramtype runner_id: str
        :keyword action_id:
        :paramtype action_id: str
        :keyword is_hidden: Required.
        :paramtype is_hidden: bool
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        :keyword id:
        :paramtype id: str
        """
        super(UpdateConnectionRequest, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class UpdateJobRequest(msrest.serialization.Model):
    """UpdateJobRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super(UpdateJobRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)


class VersionResponse(msrest.serialization.Model):
    """VersionResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar major_version: Required.
    :vartype major_version: int
    :ivar minor_version: Required.
    :vartype minor_version: int
    """

    _validation = {
        'major_version': {'required': True},
        'minor_version': {'required': True},
    }

    _attribute_map = {
        'major_version': {'key': 'majorVersion', 'type': 'int'},
        'minor_version': {'key': 'minorVersion', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword major_version: Required.
        :paramtype major_version: int
        :keyword minor_version: Required.
        :paramtype minor_version: int
        """
        super(VersionResponse, self).__init__(**kwargs)
        self.major_version = kwargs['major_version']
        self.minor_version = kwargs['minor_version']
