# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.7.6, generator: @autorest/python@5.14.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class actionChainSettingsRequest(msrest.serialization.Model):
    """actionChainSettingsRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar actions:
    :vartype actions: list[~runway.sdk.models.actionSettingRequest]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions': {'key': 'actions', 'type': '[actionSettingRequest]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword actions:
        :paramtype actions: list[~runway.sdk.models.actionSettingRequest]
        """
        super(actionChainSettingsRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.actions = kwargs.get('actions', None)


class actionConfiguration(msrest.serialization.Model):
    """actionConfiguration.

    :ivar repositoryactionid:
    :vartype repositoryactionid: str
    :ivar runon:
    :vartype runon: str
    :ivar specificplacementid:
    :vartype specificplacementid: str
    :ivar connectionid:
    :vartype connectionid: str
    :ivar connectionname:
    :vartype connectionname: str
    :ivar folder:
    :vartype folder: str
    :ivar stepbehavior:
    :vartype stepbehavior: str
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    """

    _attribute_map = {
        'repositoryactionid': {'key': 'repositoryActionId', 'type': 'str'},
        'runon': {'key': 'runOn', 'type': 'str'},
        'specificplacementid': {'key': 'specificPlacementId', 'type': 'str'},
        'connectionid': {'key': 'connectionId', 'type': 'str'},
        'connectionname': {'key': 'connectionName', 'type': 'str'},
        'folder': {'key': 'folder', 'type': 'str'},
        'stepbehavior': {'key': 'stepBehavior', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword repositoryactionid:
        :paramtype repositoryactionid: str
        :keyword runon:
        :paramtype runon: str
        :keyword specificplacementid:
        :paramtype specificplacementid: str
        :keyword connectionid:
        :paramtype connectionid: str
        :keyword connectionname:
        :paramtype connectionname: str
        :keyword folder:
        :paramtype folder: str
        :keyword stepbehavior:
        :paramtype stepbehavior: str
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        """
        super(actionConfiguration, self).__init__(**kwargs)
        self.repositoryactionid = kwargs.get('repositoryactionid', None)
        self.runon = kwargs.get('runon', None)
        self.specificplacementid = kwargs.get('specificplacementid', None)
        self.connectionid = kwargs.get('connectionid', None)
        self.connectionname = kwargs.get('connectionname', None)
        self.folder = kwargs.get('folder', None)
        self.stepbehavior = kwargs.get('stepbehavior', None)
        self.settings = kwargs.get('settings', None)


class actionInstance(msrest.serialization.Model):
    """actionInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar state: Required. Possible values include: "Uninitialized", "Ready", "Running", "Waiting",
     "Finished".
    :vartype state: str or ~runway.sdk.models.actionState
    :ivar responsiblerunnerid:
    :vartype responsiblerunnerid: str
    :ivar nextactionid:
    :vartype nextactionid: str
    :ivar prevactionid:
    :vartype prevactionid: str
    :ivar result: Required. Possible values include: "Uninitialized", "Success", "Failure".
    :vartype result: str or ~runway.sdk.models.stepResult
    :ivar resultfilename:
    :vartype resultfilename: str
    :ivar stdoutcontentpath:
    :vartype stdoutcontentpath: str
    :ivar runon: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
     "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
    :vartype runon: str or ~runway.sdk.models.runLocation
    :ivar specificplacementid:
    :vartype specificplacementid: str
    :ivar connectionid:
    :vartype connectionid: str
    :ivar connectionname:
    :vartype connectionname: str
    :ivar containerimagename:
    :vartype containerimagename: str
    :ivar repositoryactionid:
    :vartype repositoryactionid: str
    :ivar actionname:
    :vartype actionname: str
    :ivar settings:
    :vartype settings: list[~runway.sdk.models.actionSetting]
    """

    _validation = {
        'state': {'required': True},
        'result': {'required': True},
        'runon': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'responsiblerunnerid': {'key': 'responsibleRunnerId', 'type': 'str'},
        'nextactionid': {'key': 'nextActionId', 'type': 'str'},
        'prevactionid': {'key': 'prevActionId', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
        'resultfilename': {'key': 'resultFilename', 'type': 'str'},
        'stdoutcontentpath': {'key': 'stdoutContentPath', 'type': 'str'},
        'runon': {'key': 'runOn', 'type': 'str'},
        'specificplacementid': {'key': 'specificPlacementId', 'type': 'str'},
        'connectionid': {'key': 'connectionId', 'type': 'str'},
        'connectionname': {'key': 'connectionName', 'type': 'str'},
        'containerimagename': {'key': 'containerImageName', 'type': 'str'},
        'repositoryactionid': {'key': 'repositoryActionId', 'type': 'str'},
        'actionname': {'key': 'actionName', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '[actionSetting]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword state: Required. Possible values include: "Uninitialized", "Ready", "Running",
         "Waiting", "Finished".
        :paramtype state: str or ~runway.sdk.models.actionState
        :keyword responsiblerunnerid:
        :paramtype responsiblerunnerid: str
        :keyword nextactionid:
        :paramtype nextactionid: str
        :keyword prevactionid:
        :paramtype prevactionid: str
        :keyword result: Required. Possible values include: "Uninitialized", "Success", "Failure".
        :paramtype result: str or ~runway.sdk.models.stepResult
        :keyword resultfilename:
        :paramtype resultfilename: str
        :keyword stdoutcontentpath:
        :paramtype stdoutcontentpath: str
        :keyword runon: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
         "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
        :paramtype runon: str or ~runway.sdk.models.runLocation
        :keyword specificplacementid:
        :paramtype specificplacementid: str
        :keyword connectionid:
        :paramtype connectionid: str
        :keyword connectionname:
        :paramtype connectionname: str
        :keyword containerimagename:
        :paramtype containerimagename: str
        :keyword repositoryactionid:
        :paramtype repositoryactionid: str
        :keyword actionname:
        :paramtype actionname: str
        :keyword settings:
        :paramtype settings: list[~runway.sdk.models.actionSetting]
        """
        super(actionInstance, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.state = kwargs['state']
        self.responsiblerunnerid = kwargs.get('responsiblerunnerid', None)
        self.nextactionid = kwargs.get('nextactionid', None)
        self.prevactionid = kwargs.get('prevactionid', None)
        self.result = kwargs['result']
        self.resultfilename = kwargs.get('resultfilename', None)
        self.stdoutcontentpath = kwargs.get('stdoutcontentpath', None)
        self.runon = kwargs['runon']
        self.specificplacementid = kwargs.get('specificplacementid', None)
        self.connectionid = kwargs.get('connectionid', None)
        self.connectionname = kwargs.get('connectionname', None)
        self.containerimagename = kwargs.get('containerimagename', None)
        self.repositoryactionid = kwargs.get('repositoryactionid', None)
        self.actionname = kwargs.get('actionname', None)
        self.settings = kwargs.get('settings', None)


class actionResultRequest(msrest.serialization.Model):
    """actionResultRequest.

    :ivar threadid:
    :vartype threadid: str
    :ivar actionid:
    :vartype actionid: str
    """

    _attribute_map = {
        'threadid': {'key': 'threadId', 'type': 'str'},
        'actionid': {'key': 'actionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword threadid:
        :paramtype threadid: str
        :keyword actionid:
        :paramtype actionid: str
        """
        super(actionResultRequest, self).__init__(**kwargs)
        self.threadid = kwargs.get('threadid', None)
        self.actionid = kwargs.get('actionid', None)


class actionSetting(msrest.serialization.Model):
    """actionSetting.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar type: Required. Possible values include: "String", "Number", "Boolean", "Password".
    :vartype type: str or ~runway.sdk.models.actionSettingType
    :ivar value:
    :vartype value: str
    :ivar isoptional: Required.
    :vartype isoptional: bool
    :ivar description:
    :vartype description: str
    :ivar defaultvalue:
    :vartype defaultvalue: str
    """

    _validation = {
        'type': {'required': True},
        'isoptional': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'isoptional': {'key': 'isOptional', 'type': 'bool'},
        'description': {'key': 'description', 'type': 'str'},
        'defaultvalue': {'key': 'defaultValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword type: Required. Possible values include: "String", "Number", "Boolean", "Password".
        :paramtype type: str or ~runway.sdk.models.actionSettingType
        :keyword value:
        :paramtype value: str
        :keyword isoptional: Required.
        :paramtype isoptional: bool
        :keyword description:
        :paramtype description: str
        :keyword defaultvalue:
        :paramtype defaultvalue: str
        """
        super(actionSetting, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs['type']
        self.value = kwargs.get('value', None)
        self.isoptional = kwargs['isoptional']
        self.description = kwargs.get('description', None)
        self.defaultvalue = kwargs.get('defaultvalue', None)


class actionSettingRequest(msrest.serialization.Model):
    """actionSettingRequest.

    :ivar repositoryactionid:
    :vartype repositoryactionid: str
    :ivar runon:
    :vartype runon: str
    :ivar specificplacementid:
    :vartype specificplacementid: str
    :ivar connectionid:
    :vartype connectionid: str
    :ivar connectionname:
    :vartype connectionname: str
    :ivar folder:
    :vartype folder: str
    :ivar stepbehavior:
    :vartype stepbehavior: str
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    """

    _attribute_map = {
        'repositoryactionid': {'key': 'repositoryActionId', 'type': 'str'},
        'runon': {'key': 'runOn', 'type': 'str'},
        'specificplacementid': {'key': 'specificPlacementId', 'type': 'str'},
        'connectionid': {'key': 'connectionId', 'type': 'str'},
        'connectionname': {'key': 'connectionName', 'type': 'str'},
        'folder': {'key': 'folder', 'type': 'str'},
        'stepbehavior': {'key': 'stepBehavior', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword repositoryactionid:
        :paramtype repositoryactionid: str
        :keyword runon:
        :paramtype runon: str
        :keyword specificplacementid:
        :paramtype specificplacementid: str
        :keyword connectionid:
        :paramtype connectionid: str
        :keyword connectionname:
        :paramtype connectionname: str
        :keyword folder:
        :paramtype folder: str
        :keyword stepbehavior:
        :paramtype stepbehavior: str
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        """
        super(actionSettingRequest, self).__init__(**kwargs)
        self.repositoryactionid = kwargs.get('repositoryactionid', None)
        self.runon = kwargs.get('runon', None)
        self.specificplacementid = kwargs.get('specificplacementid', None)
        self.connectionid = kwargs.get('connectionid', None)
        self.connectionname = kwargs.get('connectionname', None)
        self.folder = kwargs.get('folder', None)
        self.stepbehavior = kwargs.get('stepbehavior', None)
        self.settings = kwargs.get('settings', None)


class activateUserRequest(msrest.serialization.Model):
    """activateUserRequest.

    :ivar token:
    :vartype token: str
    :ivar password:
    :vartype password: str
    :ivar captcha:
    :vartype captcha: str
    """

    _attribute_map = {
        'token': {'key': 'token', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'captcha': {'key': 'captcha', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword token:
        :paramtype token: str
        :keyword password:
        :paramtype password: str
        :keyword captcha:
        :paramtype captcha: str
        """
        super(activateUserRequest, self).__init__(**kwargs)
        self.token = kwargs.get('token', None)
        self.password = kwargs.get('password', None)
        self.captcha = kwargs.get('captcha', None)


class adapterInformation(msrest.serialization.Model):
    """adapterInformation.

    All required parameters must be populated in order to send to Azure.

    :ivar mediastate:
    :vartype mediastate: str
    :ivar name:
    :vartype name: str
    :ivar type:
    :vartype type: str
    :ivar macaddress:
    :vartype macaddress: str
    :ivar dhcpenabled: Required.
    :vartype dhcpenabled: bool
    :ivar leaseobtained:
    :vartype leaseobtained: str
    :ivar leaseexpires:
    :vartype leaseexpires: str
    :ivar ipv6address:
    :vartype ipv6address: str
    :ivar temporaryipv6address:
    :vartype temporaryipv6address: str
    :ivar linklocalipv6address:
    :vartype linklocalipv6address: str
    :ivar ipv4address:
    :vartype ipv4address: str
    :ivar subnetmask:
    :vartype subnetmask: str
    :ivar gatewayaddress:
    :vartype gatewayaddress: str
    :ivar dhcpserver:
    :vartype dhcpserver: str
    :ivar dhcpv6iaid:
    :vartype dhcpv6iaid: str
    :ivar dhcpv6clientduid:
    :vartype dhcpv6clientduid: str
    :ivar dnsservers:
    :vartype dnsservers: list[str]
    :ivar primarywinsserver:
    :vartype primarywinsserver: str
    :ivar secondarywinsserver:
    :vartype secondarywinsserver: str
    :ivar netbiosovertcpip: Required.
    :vartype netbiosovertcpip: bool
    :ivar dnsname:
    :vartype dnsname: str
    :ivar configuration:
    :vartype configuration: str
    """

    _validation = {
        'dhcpenabled': {'required': True},
        'netbiosovertcpip': {'required': True},
    }

    _attribute_map = {
        'mediastate': {'key': 'mediaState', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'macaddress': {'key': 'macAddress', 'type': 'str'},
        'dhcpenabled': {'key': 'dhcpEnabled', 'type': 'bool'},
        'leaseobtained': {'key': 'leaseObtained', 'type': 'str'},
        'leaseexpires': {'key': 'leaseExpires', 'type': 'str'},
        'ipv6address': {'key': 'iPv6Address', 'type': 'str'},
        'temporaryipv6address': {'key': 'temporaryIPv6Address', 'type': 'str'},
        'linklocalipv6address': {'key': 'linklocalIPv6Address', 'type': 'str'},
        'ipv4address': {'key': 'iPv4Address', 'type': 'str'},
        'subnetmask': {'key': 'subnetMask', 'type': 'str'},
        'gatewayaddress': {'key': 'gatewayAddress', 'type': 'str'},
        'dhcpserver': {'key': 'dhcpServer', 'type': 'str'},
        'dhcpv6iaid': {'key': 'dhcPv6IAID', 'type': 'str'},
        'dhcpv6clientduid': {'key': 'dhcPv6ClientDUID', 'type': 'str'},
        'dnsservers': {'key': 'dnsServers', 'type': '[str]'},
        'primarywinsserver': {'key': 'primaryWINSServer', 'type': 'str'},
        'secondarywinsserver': {'key': 'secondaryWINSServer', 'type': 'str'},
        'netbiosovertcpip': {'key': 'netBIOSoverTcpip', 'type': 'bool'},
        'dnsname': {'key': 'dnsName', 'type': 'str'},
        'configuration': {'key': 'configuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword mediastate:
        :paramtype mediastate: str
        :keyword name:
        :paramtype name: str
        :keyword type:
        :paramtype type: str
        :keyword macaddress:
        :paramtype macaddress: str
        :keyword dhcpenabled: Required.
        :paramtype dhcpenabled: bool
        :keyword leaseobtained:
        :paramtype leaseobtained: str
        :keyword leaseexpires:
        :paramtype leaseexpires: str
        :keyword ipv6address:
        :paramtype ipv6address: str
        :keyword temporaryipv6address:
        :paramtype temporaryipv6address: str
        :keyword linklocalipv6address:
        :paramtype linklocalipv6address: str
        :keyword ipv4address:
        :paramtype ipv4address: str
        :keyword subnetmask:
        :paramtype subnetmask: str
        :keyword gatewayaddress:
        :paramtype gatewayaddress: str
        :keyword dhcpserver:
        :paramtype dhcpserver: str
        :keyword dhcpv6iaid:
        :paramtype dhcpv6iaid: str
        :keyword dhcpv6clientduid:
        :paramtype dhcpv6clientduid: str
        :keyword dnsservers:
        :paramtype dnsservers: list[str]
        :keyword primarywinsserver:
        :paramtype primarywinsserver: str
        :keyword secondarywinsserver:
        :paramtype secondarywinsserver: str
        :keyword netbiosovertcpip: Required.
        :paramtype netbiosovertcpip: bool
        :keyword dnsname:
        :paramtype dnsname: str
        :keyword configuration:
        :paramtype configuration: str
        """
        super(adapterInformation, self).__init__(**kwargs)
        self.mediastate = kwargs.get('mediastate', None)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.macaddress = kwargs.get('macaddress', None)
        self.dhcpenabled = kwargs['dhcpenabled']
        self.leaseobtained = kwargs.get('leaseobtained', None)
        self.leaseexpires = kwargs.get('leaseexpires', None)
        self.ipv6address = kwargs.get('ipv6address', None)
        self.temporaryipv6address = kwargs.get('temporaryipv6address', None)
        self.linklocalipv6address = kwargs.get('linklocalipv6address', None)
        self.ipv4address = kwargs.get('ipv4address', None)
        self.subnetmask = kwargs.get('subnetmask', None)
        self.gatewayaddress = kwargs.get('gatewayaddress', None)
        self.dhcpserver = kwargs.get('dhcpserver', None)
        self.dhcpv6iaid = kwargs.get('dhcpv6iaid', None)
        self.dhcpv6clientduid = kwargs.get('dhcpv6clientduid', None)
        self.dnsservers = kwargs.get('dnsservers', None)
        self.primarywinsserver = kwargs.get('primarywinsserver', None)
        self.secondarywinsserver = kwargs.get('secondarywinsserver', None)
        self.netbiosovertcpip = kwargs['netbiosovertcpip']
        self.dnsname = kwargs.get('dnsname', None)
        self.configuration = kwargs.get('configuration', None)


class assetMap(msrest.serialization.Model):
    """assetMap.

    :ivar endpointdata:
    :vartype endpointdata: list[~runway.sdk.models.assetMapEndpoint]
    :ivar kubernetesdata:
    :vartype kubernetesdata: list[~runway.sdk.models.kubernetesEndpoint]
    """

    _attribute_map = {
        'endpointdata': {'key': 'endpointData', 'type': '[assetMapEndpoint]'},
        'kubernetesdata': {'key': 'kubernetesData', 'type': '[kubernetesEndpoint]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpointdata:
        :paramtype endpointdata: list[~runway.sdk.models.assetMapEndpoint]
        :keyword kubernetesdata:
        :paramtype kubernetesdata: list[~runway.sdk.models.kubernetesEndpoint]
        """
        super(assetMap, self).__init__(**kwargs)
        self.endpointdata = kwargs.get('endpointdata', None)
        self.kubernetesdata = kwargs.get('kubernetesdata', None)


class runwayObject(msrest.serialization.Model):
    """runwayObject.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        """
        super(runwayObject, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.revision = kwargs['revision']
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.tags = kwargs.get('tags', None)
        self.groups = kwargs.get('groups', None)
        self.isselected = kwargs['isselected']


class runwayAsset(runwayObject):
    """runwayAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        """
        super(runwayAsset, self).__init__(**kwargs)


class runwayAccountAsset(runwayAsset):
    """runwayAccountAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar endpointid:
    :vartype endpointid: str
    :ivar endpointhostname:
    :vartype endpointhostname: str
    :ivar instancetimestamp: Required.
    :vartype instancetimestamp: ~datetime.datetime
    :ivar username:
    :vartype username: str
    :ivar domain:
    :vartype domain: str
    :ivar sid:
    :vartype sid: str
    :ivar instancetype:
    :vartype instancetype: str
    :ivar securitygroups:
    :vartype securitygroups: list[str]
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'instancetimestamp': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'endpointid': {'key': 'endpointId', 'type': 'str'},
        'endpointhostname': {'key': 'endpointHostname', 'type': 'str'},
        'instancetimestamp': {'key': 'instanceTimestamp', 'type': 'iso-8601'},
        'username': {'key': 'username', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'sid': {'key': 'sid', 'type': 'str'},
        'instancetype': {'key': 'instanceType', 'type': 'str'},
        'securitygroups': {'key': 'securityGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword endpointid:
        :paramtype endpointid: str
        :keyword endpointhostname:
        :paramtype endpointhostname: str
        :keyword instancetimestamp: Required.
        :paramtype instancetimestamp: ~datetime.datetime
        :keyword username:
        :paramtype username: str
        :keyword domain:
        :paramtype domain: str
        :keyword sid:
        :paramtype sid: str
        :keyword instancetype:
        :paramtype instancetype: str
        :keyword securitygroups:
        :paramtype securitygroups: list[str]
        """
        super(runwayAccountAsset, self).__init__(**kwargs)
        self.endpointid = kwargs.get('endpointid', None)
        self.endpointhostname = kwargs.get('endpointhostname', None)
        self.instancetimestamp = kwargs['instancetimestamp']
        self.username = kwargs.get('username', None)
        self.domain = kwargs.get('domain', None)
        self.sid = kwargs.get('sid', None)
        self.instancetype = kwargs.get('instancetype', None)
        self.securitygroups = kwargs.get('securitygroups', None)


class assetMapAccountView(runwayAccountAsset):
    """assetMapAccountView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar endpointid:
    :vartype endpointid: str
    :ivar endpointhostname:
    :vartype endpointhostname: str
    :ivar instancetimestamp: Required.
    :vartype instancetimestamp: ~datetime.datetime
    :ivar username:
    :vartype username: str
    :ivar domain:
    :vartype domain: str
    :ivar sid:
    :vartype sid: str
    :ivar instancetype:
    :vartype instancetype: str
    :ivar securitygroups:
    :vartype securitygroups: list[str]
    :ivar endpointcount: Required.
    :vartype endpointcount: int
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'instancetimestamp': {'required': True},
        'endpointcount': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'endpointid': {'key': 'endpointId', 'type': 'str'},
        'endpointhostname': {'key': 'endpointHostname', 'type': 'str'},
        'instancetimestamp': {'key': 'instanceTimestamp', 'type': 'iso-8601'},
        'username': {'key': 'username', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'sid': {'key': 'sid', 'type': 'str'},
        'instancetype': {'key': 'instanceType', 'type': 'str'},
        'securitygroups': {'key': 'securityGroups', 'type': '[str]'},
        'endpointcount': {'key': 'endpointCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword endpointid:
        :paramtype endpointid: str
        :keyword endpointhostname:
        :paramtype endpointhostname: str
        :keyword instancetimestamp: Required.
        :paramtype instancetimestamp: ~datetime.datetime
        :keyword username:
        :paramtype username: str
        :keyword domain:
        :paramtype domain: str
        :keyword sid:
        :paramtype sid: str
        :keyword instancetype:
        :paramtype instancetype: str
        :keyword securitygroups:
        :paramtype securitygroups: list[str]
        :keyword endpointcount: Required.
        :paramtype endpointcount: int
        """
        super(assetMapAccountView, self).__init__(**kwargs)
        self.endpointcount = kwargs['endpointcount']


class assetMapArpCache(msrest.serialization.Model):
    """assetMapArpCache.

    :ivar ipaddress:
    :vartype ipaddress: str
    :ivar macaddress:
    :vartype macaddress: str
    """

    _attribute_map = {
        'ipaddress': {'key': 'ipAddress', 'type': 'str'},
        'macaddress': {'key': 'macAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ipaddress:
        :paramtype ipaddress: str
        :keyword macaddress:
        :paramtype macaddress: str
        """
        super(assetMapArpCache, self).__init__(**kwargs)
        self.ipaddress = kwargs.get('ipaddress', None)
        self.macaddress = kwargs.get('macaddress', None)


class assetMapDataPair(msrest.serialization.Model):
    """assetMapDataPair.

    :ivar name:
    :vartype name: str
    :ivar value:
    :vartype value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword value:
        :paramtype value: str
        """
        super(assetMapDataPair, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class assetMapEndpoint(msrest.serialization.Model):
    """assetMapEndpoint.

    All required parameters must be populated in order to send to Azure.

    :ivar uniquefingerprint:
    :vartype uniquefingerprint: str
    :ivar dnsname:
    :vartype dnsname: str
    :ivar localname:
    :vartype localname: str
    :ivar ipaddress:
    :vartype ipaddress: str
    :ivar macaddress:
    :vartype macaddress: str
    :ivar gatewayaddress:
    :vartype gatewayaddress: str
    :ivar knownmac:
    :vartype knownmac: str
    :ivar endpointtype:
    :vartype endpointtype: str
    :ivar typehint: Required.
    :vartype typehint: int
    :ivar systeminfo:
    :vartype systeminfo: list[~runway.sdk.models.assetMapDataPair]
    :ivar interfaces:
    :vartype interfaces: list[~runway.sdk.models.assetMapNetworkInterface]
    :ivar useraccounts:
    :vartype useraccounts: list[~runway.sdk.models.assetMapUserAccount]
    :ivar props:
    :vartype props: list[~runway.sdk.models.assetMapDataPair]
    """

    _validation = {
        'typehint': {'required': True},
    }

    _attribute_map = {
        'uniquefingerprint': {'key': 'uniqueFingerprint', 'type': 'str'},
        'dnsname': {'key': 'dnsName', 'type': 'str'},
        'localname': {'key': 'localName', 'type': 'str'},
        'ipaddress': {'key': 'ipAddress', 'type': 'str'},
        'macaddress': {'key': 'macAddress', 'type': 'str'},
        'gatewayaddress': {'key': 'gatewayAddress', 'type': 'str'},
        'knownmac': {'key': 'knownMAC', 'type': 'str'},
        'endpointtype': {'key': 'endpointType', 'type': 'str'},
        'typehint': {'key': 'typeHint', 'type': 'int'},
        'systeminfo': {'key': 'systemInfo', 'type': '[assetMapDataPair]'},
        'interfaces': {'key': 'interfaces', 'type': '[assetMapNetworkInterface]'},
        'useraccounts': {'key': 'userAccounts', 'type': '[assetMapUserAccount]'},
        'props': {'key': 'props', 'type': '[assetMapDataPair]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword uniquefingerprint:
        :paramtype uniquefingerprint: str
        :keyword dnsname:
        :paramtype dnsname: str
        :keyword localname:
        :paramtype localname: str
        :keyword ipaddress:
        :paramtype ipaddress: str
        :keyword macaddress:
        :paramtype macaddress: str
        :keyword gatewayaddress:
        :paramtype gatewayaddress: str
        :keyword knownmac:
        :paramtype knownmac: str
        :keyword endpointtype:
        :paramtype endpointtype: str
        :keyword typehint: Required.
        :paramtype typehint: int
        :keyword systeminfo:
        :paramtype systeminfo: list[~runway.sdk.models.assetMapDataPair]
        :keyword interfaces:
        :paramtype interfaces: list[~runway.sdk.models.assetMapNetworkInterface]
        :keyword useraccounts:
        :paramtype useraccounts: list[~runway.sdk.models.assetMapUserAccount]
        :keyword props:
        :paramtype props: list[~runway.sdk.models.assetMapDataPair]
        """
        super(assetMapEndpoint, self).__init__(**kwargs)
        self.uniquefingerprint = kwargs.get('uniquefingerprint', None)
        self.dnsname = kwargs.get('dnsname', None)
        self.localname = kwargs.get('localname', None)
        self.ipaddress = kwargs.get('ipaddress', None)
        self.macaddress = kwargs.get('macaddress', None)
        self.gatewayaddress = kwargs.get('gatewayaddress', None)
        self.knownmac = kwargs.get('knownmac', None)
        self.endpointtype = kwargs.get('endpointtype', None)
        self.typehint = kwargs['typehint']
        self.systeminfo = kwargs.get('systeminfo', None)
        self.interfaces = kwargs.get('interfaces', None)
        self.useraccounts = kwargs.get('useraccounts', None)
        self.props = kwargs.get('props', None)


class runwayEndpointAsset(runwayAsset):
    """runwayEndpointAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar uniquefingerprint:
    :vartype uniquefingerprint: str
    :ivar endpointtype:
    :vartype endpointtype: str
    :ivar buildinformation:
    :vartype buildinformation: str
    :ivar osname:
    :vartype osname: str
    :ivar osversion:
    :vartype osversion: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar lastipaddress:
    :vartype lastipaddress: str
    :ivar lastgatewayaddress:
    :vartype lastgatewayaddress: str
    :ivar lasthostname:
    :vartype lasthostname: str
    :ivar lastlocalname:
    :vartype lastlocalname: str
    :ivar preferredmacaddress:
    :vartype preferredmacaddress: str
    :ivar organizationalunit:
    :vartype organizationalunit: str
    :ivar adapters:
    :vartype adapters: list[~runway.sdk.models.adapterInformation]
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    :ivar ispendingdelete: Required.
    :vartype ispendingdelete: bool
    :ivar membershipflag: Required.
    :vartype membershipflag: bool
    :ivar hasactiverunner: Required.
    :vartype hasactiverunner: bool
    :ivar hasrunner: Required.
    :vartype hasrunner: bool
    :ivar runnercount: Required.
    :vartype runnercount: int
    :ivar runneraffinity: Required. Possible values include: "EphemeralContainer",
     "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype runneraffinity: str or ~runway.sdk.models.nodeAffinity
    :ivar lastthreadid:
    :vartype lastthreadid: str
    :ivar lastthreadstate: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype lastthreadstate: str or ~runway.sdk.models.jobThreadState
    :ivar devicetype:
    :vartype devicetype: str
    :ivar hardwareproduct:
    :vartype hardwareproduct: str
    :ivar kubernetesdata: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
    :vartype kubernetesdata: dict[str, ~runway.sdk.models.runwayKubernetesEndpoint]
    :ivar enrollmentosname:
    :vartype enrollmentosname: str
    :ivar discoveryosname:
    :vartype discoveryosname: str
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'ispendingdelete': {'required': True},
        'membershipflag': {'required': True},
        'hasactiverunner': {'required': True},
        'hasrunner': {'required': True},
        'runnercount': {'required': True},
        'runneraffinity': {'required': True},
        'lastthreadstate': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'uniquefingerprint': {'key': 'uniqueFingerprint', 'type': 'str'},
        'endpointtype': {'key': 'endpointType', 'type': 'str'},
        'buildinformation': {'key': 'buildInformation', 'type': 'str'},
        'osname': {'key': 'osName', 'type': 'str'},
        'osversion': {'key': 'osVersion', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'lastipaddress': {'key': 'lastIpAddress', 'type': 'str'},
        'lastgatewayaddress': {'key': 'lastGatewayAddress', 'type': 'str'},
        'lasthostname': {'key': 'lastHostName', 'type': 'str'},
        'lastlocalname': {'key': 'lastLocalName', 'type': 'str'},
        'preferredmacaddress': {'key': 'preferredMacAddress', 'type': 'str'},
        'organizationalunit': {'key': 'organizationalUnit', 'type': 'str'},
        'adapters': {'key': 'adapters', 'type': '[adapterInformation]'},
        'metadata': {'key': 'metaData', 'type': '{str}'},
        'ispendingdelete': {'key': 'isPendingDelete', 'type': 'bool'},
        'membershipflag': {'key': 'membershipFlag', 'type': 'bool'},
        'hasactiverunner': {'key': 'hasActiveRunner', 'type': 'bool'},
        'hasrunner': {'key': 'hasRunner', 'type': 'bool'},
        'runnercount': {'key': 'runnerCount', 'type': 'int'},
        'runneraffinity': {'key': 'runnerAffinity', 'type': 'str'},
        'lastthreadid': {'key': 'lastThreadId', 'type': 'str'},
        'lastthreadstate': {'key': 'lastThreadState', 'type': 'str'},
        'devicetype': {'key': 'deviceType', 'type': 'str'},
        'hardwareproduct': {'key': 'hardwareProduct', 'type': 'str'},
        'kubernetesdata': {'key': 'kubernetesData', 'type': '{runwayKubernetesEndpoint}'},
        'enrollmentosname': {'key': 'enrollmentOSName', 'type': 'str'},
        'discoveryosname': {'key': 'discoveryOSName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword uniquefingerprint:
        :paramtype uniquefingerprint: str
        :keyword endpointtype:
        :paramtype endpointtype: str
        :keyword buildinformation:
        :paramtype buildinformation: str
        :keyword osname:
        :paramtype osname: str
        :keyword osversion:
        :paramtype osversion: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword lastipaddress:
        :paramtype lastipaddress: str
        :keyword lastgatewayaddress:
        :paramtype lastgatewayaddress: str
        :keyword lasthostname:
        :paramtype lasthostname: str
        :keyword lastlocalname:
        :paramtype lastlocalname: str
        :keyword preferredmacaddress:
        :paramtype preferredmacaddress: str
        :keyword organizationalunit:
        :paramtype organizationalunit: str
        :keyword adapters:
        :paramtype adapters: list[~runway.sdk.models.adapterInformation]
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        :keyword ispendingdelete: Required.
        :paramtype ispendingdelete: bool
        :keyword membershipflag: Required.
        :paramtype membershipflag: bool
        :keyword hasactiverunner: Required.
        :paramtype hasactiverunner: bool
        :keyword hasrunner: Required.
        :paramtype hasrunner: bool
        :keyword runnercount: Required.
        :paramtype runnercount: int
        :keyword runneraffinity: Required. Possible values include: "EphemeralContainer",
         "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype runneraffinity: str or ~runway.sdk.models.nodeAffinity
        :keyword lastthreadid:
        :paramtype lastthreadid: str
        :keyword lastthreadstate: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype lastthreadstate: str or ~runway.sdk.models.jobThreadState
        :keyword devicetype:
        :paramtype devicetype: str
        :keyword hardwareproduct:
        :paramtype hardwareproduct: str
        :keyword kubernetesdata: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
        :paramtype kubernetesdata: dict[str, ~runway.sdk.models.runwayKubernetesEndpoint]
        :keyword enrollmentosname:
        :paramtype enrollmentosname: str
        :keyword discoveryosname:
        :paramtype discoveryosname: str
        """
        super(runwayEndpointAsset, self).__init__(**kwargs)
        self.uniquefingerprint = kwargs.get('uniquefingerprint', None)
        self.endpointtype = kwargs.get('endpointtype', None)
        self.buildinformation = kwargs.get('buildinformation', None)
        self.osname = kwargs.get('osname', None)
        self.osversion = kwargs.get('osversion', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.lastipaddress = kwargs.get('lastipaddress', None)
        self.lastgatewayaddress = kwargs.get('lastgatewayaddress', None)
        self.lasthostname = kwargs.get('lasthostname', None)
        self.lastlocalname = kwargs.get('lastlocalname', None)
        self.preferredmacaddress = kwargs.get('preferredmacaddress', None)
        self.organizationalunit = kwargs.get('organizationalunit', None)
        self.adapters = kwargs.get('adapters', None)
        self.metadata = kwargs.get('metadata', None)
        self.ispendingdelete = kwargs['ispendingdelete']
        self.membershipflag = kwargs['membershipflag']
        self.hasactiverunner = kwargs['hasactiverunner']
        self.hasrunner = kwargs['hasrunner']
        self.runnercount = kwargs['runnercount']
        self.runneraffinity = kwargs['runneraffinity']
        self.lastthreadid = kwargs.get('lastthreadid', None)
        self.lastthreadstate = kwargs['lastthreadstate']
        self.devicetype = kwargs.get('devicetype', None)
        self.hardwareproduct = kwargs.get('hardwareproduct', None)
        self.kubernetesdata = kwargs.get('kubernetesdata', None)
        self.enrollmentosname = kwargs.get('enrollmentosname', None)
        self.discoveryosname = kwargs.get('discoveryosname', None)


class assetMapEndpointView(runwayEndpointAsset):
    """assetMapEndpointView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar uniquefingerprint:
    :vartype uniquefingerprint: str
    :ivar endpointtype:
    :vartype endpointtype: str
    :ivar buildinformation:
    :vartype buildinformation: str
    :ivar osname:
    :vartype osname: str
    :ivar osversion:
    :vartype osversion: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar lastipaddress:
    :vartype lastipaddress: str
    :ivar lastgatewayaddress:
    :vartype lastgatewayaddress: str
    :ivar lasthostname:
    :vartype lasthostname: str
    :ivar lastlocalname:
    :vartype lastlocalname: str
    :ivar preferredmacaddress:
    :vartype preferredmacaddress: str
    :ivar organizationalunit:
    :vartype organizationalunit: str
    :ivar adapters:
    :vartype adapters: list[~runway.sdk.models.adapterInformation]
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    :ivar ispendingdelete: Required.
    :vartype ispendingdelete: bool
    :ivar membershipflag: Required.
    :vartype membershipflag: bool
    :ivar hasactiverunner: Required.
    :vartype hasactiverunner: bool
    :ivar hasrunner: Required.
    :vartype hasrunner: bool
    :ivar runnercount: Required.
    :vartype runnercount: int
    :ivar runneraffinity: Required. Possible values include: "EphemeralContainer",
     "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype runneraffinity: str or ~runway.sdk.models.nodeAffinity
    :ivar lastthreadid:
    :vartype lastthreadid: str
    :ivar lastthreadstate: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype lastthreadstate: str or ~runway.sdk.models.jobThreadState
    :ivar devicetype:
    :vartype devicetype: str
    :ivar hardwareproduct:
    :vartype hardwareproduct: str
    :ivar kubernetesdata: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
    :vartype kubernetesdata: dict[str, ~runway.sdk.models.runwayKubernetesEndpoint]
    :ivar enrollmentosname:
    :vartype enrollmentosname: str
    :ivar discoveryosname:
    :vartype discoveryosname: str
    :ivar users:
    :vartype users: list[~runway.sdk.models.assetMapAccountView]
    :ivar usercount: Required.
    :vartype usercount: int
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'ispendingdelete': {'required': True},
        'membershipflag': {'required': True},
        'hasactiverunner': {'required': True},
        'hasrunner': {'required': True},
        'runnercount': {'required': True},
        'runneraffinity': {'required': True},
        'lastthreadstate': {'required': True},
        'usercount': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'uniquefingerprint': {'key': 'uniqueFingerprint', 'type': 'str'},
        'endpointtype': {'key': 'endpointType', 'type': 'str'},
        'buildinformation': {'key': 'buildInformation', 'type': 'str'},
        'osname': {'key': 'osName', 'type': 'str'},
        'osversion': {'key': 'osVersion', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'lastipaddress': {'key': 'lastIpAddress', 'type': 'str'},
        'lastgatewayaddress': {'key': 'lastGatewayAddress', 'type': 'str'},
        'lasthostname': {'key': 'lastHostName', 'type': 'str'},
        'lastlocalname': {'key': 'lastLocalName', 'type': 'str'},
        'preferredmacaddress': {'key': 'preferredMacAddress', 'type': 'str'},
        'organizationalunit': {'key': 'organizationalUnit', 'type': 'str'},
        'adapters': {'key': 'adapters', 'type': '[adapterInformation]'},
        'metadata': {'key': 'metaData', 'type': '{str}'},
        'ispendingdelete': {'key': 'isPendingDelete', 'type': 'bool'},
        'membershipflag': {'key': 'membershipFlag', 'type': 'bool'},
        'hasactiverunner': {'key': 'hasActiveRunner', 'type': 'bool'},
        'hasrunner': {'key': 'hasRunner', 'type': 'bool'},
        'runnercount': {'key': 'runnerCount', 'type': 'int'},
        'runneraffinity': {'key': 'runnerAffinity', 'type': 'str'},
        'lastthreadid': {'key': 'lastThreadId', 'type': 'str'},
        'lastthreadstate': {'key': 'lastThreadState', 'type': 'str'},
        'devicetype': {'key': 'deviceType', 'type': 'str'},
        'hardwareproduct': {'key': 'hardwareProduct', 'type': 'str'},
        'kubernetesdata': {'key': 'kubernetesData', 'type': '{runwayKubernetesEndpoint}'},
        'enrollmentosname': {'key': 'enrollmentOSName', 'type': 'str'},
        'discoveryosname': {'key': 'discoveryOSName', 'type': 'str'},
        'users': {'key': 'users', 'type': '[assetMapAccountView]'},
        'usercount': {'key': 'userCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword uniquefingerprint:
        :paramtype uniquefingerprint: str
        :keyword endpointtype:
        :paramtype endpointtype: str
        :keyword buildinformation:
        :paramtype buildinformation: str
        :keyword osname:
        :paramtype osname: str
        :keyword osversion:
        :paramtype osversion: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword lastipaddress:
        :paramtype lastipaddress: str
        :keyword lastgatewayaddress:
        :paramtype lastgatewayaddress: str
        :keyword lasthostname:
        :paramtype lasthostname: str
        :keyword lastlocalname:
        :paramtype lastlocalname: str
        :keyword preferredmacaddress:
        :paramtype preferredmacaddress: str
        :keyword organizationalunit:
        :paramtype organizationalunit: str
        :keyword adapters:
        :paramtype adapters: list[~runway.sdk.models.adapterInformation]
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        :keyword ispendingdelete: Required.
        :paramtype ispendingdelete: bool
        :keyword membershipflag: Required.
        :paramtype membershipflag: bool
        :keyword hasactiverunner: Required.
        :paramtype hasactiverunner: bool
        :keyword hasrunner: Required.
        :paramtype hasrunner: bool
        :keyword runnercount: Required.
        :paramtype runnercount: int
        :keyword runneraffinity: Required. Possible values include: "EphemeralContainer",
         "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype runneraffinity: str or ~runway.sdk.models.nodeAffinity
        :keyword lastthreadid:
        :paramtype lastthreadid: str
        :keyword lastthreadstate: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype lastthreadstate: str or ~runway.sdk.models.jobThreadState
        :keyword devicetype:
        :paramtype devicetype: str
        :keyword hardwareproduct:
        :paramtype hardwareproduct: str
        :keyword kubernetesdata: Dictionary of :code:`<RunwayKubernetesEndpoint>`.
        :paramtype kubernetesdata: dict[str, ~runway.sdk.models.runwayKubernetesEndpoint]
        :keyword enrollmentosname:
        :paramtype enrollmentosname: str
        :keyword discoveryosname:
        :paramtype discoveryosname: str
        :keyword users:
        :paramtype users: list[~runway.sdk.models.assetMapAccountView]
        :keyword usercount: Required.
        :paramtype usercount: int
        """
        super(assetMapEndpointView, self).__init__(**kwargs)
        self.users = kwargs.get('users', None)
        self.usercount = kwargs['usercount']


class assetMapNetworkInterface(msrest.serialization.Model):
    """assetMapNetworkInterface.

    :ivar dnsname:
    :vartype dnsname: str
    :ivar ipaddress:
    :vartype ipaddress: str
    :ivar macaddress:
    :vartype macaddress: str
    :ivar gatewayaddress:
    :vartype gatewayaddress: str
    :ivar index:
    :vartype index: str
    :ivar arpcache:
    :vartype arpcache: list[~runway.sdk.models.assetMapArpCache]
    """

    _attribute_map = {
        'dnsname': {'key': 'dnsName', 'type': 'str'},
        'ipaddress': {'key': 'ipAddress', 'type': 'str'},
        'macaddress': {'key': 'macAddress', 'type': 'str'},
        'gatewayaddress': {'key': 'gatewayAddress', 'type': 'str'},
        'index': {'key': 'index', 'type': 'str'},
        'arpcache': {'key': 'arpCache', 'type': '[assetMapArpCache]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dnsname:
        :paramtype dnsname: str
        :keyword ipaddress:
        :paramtype ipaddress: str
        :keyword macaddress:
        :paramtype macaddress: str
        :keyword gatewayaddress:
        :paramtype gatewayaddress: str
        :keyword index:
        :paramtype index: str
        :keyword arpcache:
        :paramtype arpcache: list[~runway.sdk.models.assetMapArpCache]
        """
        super(assetMapNetworkInterface, self).__init__(**kwargs)
        self.dnsname = kwargs.get('dnsname', None)
        self.ipaddress = kwargs.get('ipaddress', None)
        self.macaddress = kwargs.get('macaddress', None)
        self.gatewayaddress = kwargs.get('gatewayaddress', None)
        self.index = kwargs.get('index', None)
        self.arpcache = kwargs.get('arpcache', None)


class assetMapUserAccount(msrest.serialization.Model):
    """assetMapUserAccount.

    :ivar accountdata:
    :vartype accountdata: list[~runway.sdk.models.assetMapDataPair]
    """

    _attribute_map = {
        'accountdata': {'key': 'accountData', 'type': '[assetMapDataPair]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword accountdata:
        :paramtype accountdata: list[~runway.sdk.models.assetMapDataPair]
        """
        super(assetMapUserAccount, self).__init__(**kwargs)
        self.accountdata = kwargs.get('accountdata', None)


class checkResultResponse(msrest.serialization.Model):
    """checkResultResponse.

    :ivar notifyid:
    :vartype notifyid: str
    :ivar contentid:
    :vartype contentid: str
    :ivar inprogressupdatetime:
    :vartype inprogressupdatetime: ~datetime.datetime
    :ivar error:
    :vartype error: str
    """

    _attribute_map = {
        'notifyid': {'key': 'notifyId', 'type': 'str'},
        'contentid': {'key': 'contentId', 'type': 'str'},
        'inprogressupdatetime': {'key': 'inProgressUpdateTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword notifyid:
        :paramtype notifyid: str
        :keyword contentid:
        :paramtype contentid: str
        :keyword inprogressupdatetime:
        :paramtype inprogressupdatetime: ~datetime.datetime
        :keyword error:
        :paramtype error: str
        """
        super(checkResultResponse, self).__init__(**kwargs)
        self.notifyid = kwargs.get('notifyid', None)
        self.contentid = kwargs.get('contentid', None)
        self.inprogressupdatetime = kwargs.get('inprogressupdatetime', None)
        self.error = kwargs.get('error', None)


class compileJobRequest(msrest.serialization.Model):
    """compileJobRequest.

    :ivar actionchaincommand:
    :vartype actionchaincommand: str
    """

    _attribute_map = {
        'actionchaincommand': {'key': 'actionChainCommand', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword actionchaincommand:
        :paramtype actionchaincommand: str
        """
        super(compileJobRequest, self).__init__(**kwargs)
        self.actionchaincommand = kwargs.get('actionchaincommand', None)


class content(msrest.serialization.Model):
    """content.

    :ivar contenttype:
    :vartype contenttype: str
    """

    _attribute_map = {
        'contenttype': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword contenttype:
        :paramtype contenttype: str
        """
        super(content, self).__init__(**kwargs)
        self.contenttype = kwargs.get('contenttype', None)


class contentInfo(msrest.serialization.Model):
    """contentInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar md5:
    :vartype md5: str
    :ivar contenttype:
    :vartype contenttype: str
    :ivar length: Required.
    :vartype length: long
    """

    _validation = {
        'length': {'required': True},
    }

    _attribute_map = {
        'md5': {'key': 'mD5', 'type': 'str'},
        'contenttype': {'key': 'contentType', 'type': 'str'},
        'length': {'key': 'length', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword md5:
        :paramtype md5: str
        :keyword contenttype:
        :paramtype contenttype: str
        :keyword length: Required.
        :paramtype length: long
        """
        super(contentInfo, self).__init__(**kwargs)
        self.md5 = kwargs.get('md5', None)
        self.contenttype = kwargs.get('contenttype', None)
        self.length = kwargs['length']


class contentView(content):
    """contentView.

    All required parameters must be populated in order to send to Azure.

    :ivar contenttype:
    :vartype contenttype: str
    :ivar id:
    :vartype id: str
    :ivar path:
    :vartype path: str
    :ivar title:
    :vartype title: str
    :ivar version:
    :vartype version: str
    :ivar key:
    :vartype key: str
    :ivar platform: Required. Possible values include: "Agnostic", "Cloud", "Windows64",
     "Windows32", "Linux64", "Linux32", "MacOS", "Android", "iOS".
    :vartype platform: str or ~runway.sdk.models.platform
    :ivar length: Required.
    :vartype length: long
    :ivar md5:
    :vartype md5: str
    """

    _validation = {
        'platform': {'required': True},
        'length': {'required': True},
    }

    _attribute_map = {
        'contenttype': {'key': 'contentType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'platform': {'key': 'platform', 'type': 'str'},
        'length': {'key': 'length', 'type': 'long'},
        'md5': {'key': 'md5', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword contenttype:
        :paramtype contenttype: str
        :keyword id:
        :paramtype id: str
        :keyword path:
        :paramtype path: str
        :keyword title:
        :paramtype title: str
        :keyword version:
        :paramtype version: str
        :keyword key:
        :paramtype key: str
        :keyword platform: Required. Possible values include: "Agnostic", "Cloud", "Windows64",
         "Windows32", "Linux64", "Linux32", "MacOS", "Android", "iOS".
        :paramtype platform: str or ~runway.sdk.models.platform
        :keyword length: Required.
        :paramtype length: long
        :keyword md5:
        :paramtype md5: str
        """
        super(contentView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.path = kwargs.get('path', None)
        self.title = kwargs.get('title', None)
        self.version = kwargs.get('version', None)
        self.key = kwargs.get('key', None)
        self.platform = kwargs['platform']
        self.length = kwargs['length']
        self.md5 = kwargs.get('md5', None)


class createActionRequest(msrest.serialization.Model):
    """createActionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar contentid:
    :vartype contentid: str
    :ivar ispublic: Required.
    :vartype ispublic: bool
    """

    _validation = {
        'ispublic': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'contentid': {'key': 'contentId', 'type': 'str'},
        'ispublic': {'key': 'isPublic', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword contentid:
        :paramtype contentid: str
        :keyword ispublic: Required.
        :paramtype ispublic: bool
        """
        super(createActionRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.contentid = kwargs.get('contentid', None)
        self.ispublic = kwargs['ispublic']


class createConnectionRequest(msrest.serialization.Model):
    """createConnectionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar groupid:
    :vartype groupid: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar assignedendpointid:
    :vartype assignedendpointid: str
    :ivar runnerid:
    :vartype runnerid: str
    :ivar actionid:
    :vartype actionid: str
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    """

    _validation = {
        'ishidden': {'required': True},
    }

    _attribute_map = {
        'groupid': {'key': 'groupId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'assignedendpointid': {'key': 'assignedEndpointId', 'type': 'str'},
        'runnerid': {'key': 'runnerId', 'type': 'str'},
        'actionid': {'key': 'actionId', 'type': 'str'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword groupid:
        :paramtype groupid: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword assignedendpointid:
        :paramtype assignedendpointid: str
        :keyword runnerid:
        :paramtype runnerid: str
        :keyword actionid:
        :paramtype actionid: str
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        """
        super(createConnectionRequest, self).__init__(**kwargs)
        self.groupid = kwargs.get('groupid', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.assignedendpointid = kwargs.get('assignedendpointid', None)
        self.runnerid = kwargs.get('runnerid', None)
        self.actionid = kwargs.get('actionid', None)
        self.ishidden = kwargs['ishidden']
        self.settings = kwargs.get('settings', None)


class createEnrollmentSessionRequest(msrest.serialization.Model):
    """createEnrollmentSessionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Possible values include: "Uninitialized", "AddMembership",
     "ActivateUserCredential", "EnrollEphemeralContainer", "EnrollPersistentRunner",
     "EnrollCloudWorker", "EnrollPersistentCloud".
    :vartype type: str or ~runway.sdk.models.enrollmentType
    :ivar expiration: Required.
    :vartype expiration: ~datetime.datetime
    :ivar groupid:
    :vartype groupid: str
    :ivar jobids:
    :vartype jobids: list[str]
    :ivar isonetime: Required.
    :vartype isonetime: bool
    """

    _validation = {
        'type': {'required': True},
        'expiration': {'required': True},
        'isonetime': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'expiration': {'key': 'expiration', 'type': 'iso-8601'},
        'groupid': {'key': 'groupId', 'type': 'str'},
        'jobids': {'key': 'jobIds', 'type': '[str]'},
        'isonetime': {'key': 'isOneTime', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Required. Possible values include: "Uninitialized", "AddMembership",
         "ActivateUserCredential", "EnrollEphemeralContainer", "EnrollPersistentRunner",
         "EnrollCloudWorker", "EnrollPersistentCloud".
        :paramtype type: str or ~runway.sdk.models.enrollmentType
        :keyword expiration: Required.
        :paramtype expiration: ~datetime.datetime
        :keyword groupid:
        :paramtype groupid: str
        :keyword jobids:
        :paramtype jobids: list[str]
        :keyword isonetime: Required.
        :paramtype isonetime: bool
        """
        super(createEnrollmentSessionRequest, self).__init__(**kwargs)
        self.type = kwargs['type']
        self.expiration = kwargs['expiration']
        self.groupid = kwargs.get('groupid', None)
        self.jobids = kwargs.get('jobids', None)
        self.isonetime = kwargs['isonetime']


class updateGroupRequest(msrest.serialization.Model):
    """updateGroupRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tenantcompanyname:
    :vartype tenantcompanyname: str
    :ivar tenantpointofcontact:
    :vartype tenantpointofcontact: str
    :ivar tenantphonenumber:
    :vartype tenantphonenumber: str
    :ivar tenantotherdetails:
    :vartype tenantotherdetails: str
    :ivar tenantexpiration:
    :vartype tenantexpiration: str
    :ivar licenseallocatedrunners: Required.
    :vartype licenseallocatedrunners: int
    :ivar licenseexpiration:
    :vartype licenseexpiration: str
    :ivar licensecanassignsublicenses: Required.
    :vartype licensecanassignsublicenses: bool
    :ivar portraiturl:
    :vartype portraiturl: str
    """

    _validation = {
        'licenseallocatedrunners': {'required': True},
        'licensecanassignsublicenses': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tenantcompanyname': {'key': 'tenantCompanyName', 'type': 'str'},
        'tenantpointofcontact': {'key': 'tenantPointOfContact', 'type': 'str'},
        'tenantphonenumber': {'key': 'tenantPhoneNumber', 'type': 'str'},
        'tenantotherdetails': {'key': 'tenantOtherDetails', 'type': 'str'},
        'tenantexpiration': {'key': 'tenantExpiration', 'type': 'str'},
        'licenseallocatedrunners': {'key': 'licenseAllocatedRunners', 'type': 'int'},
        'licenseexpiration': {'key': 'licenseExpiration', 'type': 'str'},
        'licensecanassignsublicenses': {'key': 'licenseCanAssignSubLicenses', 'type': 'bool'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tenantcompanyname:
        :paramtype tenantcompanyname: str
        :keyword tenantpointofcontact:
        :paramtype tenantpointofcontact: str
        :keyword tenantphonenumber:
        :paramtype tenantphonenumber: str
        :keyword tenantotherdetails:
        :paramtype tenantotherdetails: str
        :keyword tenantexpiration:
        :paramtype tenantexpiration: str
        :keyword licenseallocatedrunners: Required.
        :paramtype licenseallocatedrunners: int
        :keyword licenseexpiration:
        :paramtype licenseexpiration: str
        :keyword licensecanassignsublicenses: Required.
        :paramtype licensecanassignsublicenses: bool
        :keyword portraiturl:
        :paramtype portraiturl: str
        """
        super(updateGroupRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.tenantcompanyname = kwargs.get('tenantcompanyname', None)
        self.tenantpointofcontact = kwargs.get('tenantpointofcontact', None)
        self.tenantphonenumber = kwargs.get('tenantphonenumber', None)
        self.tenantotherdetails = kwargs.get('tenantotherdetails', None)
        self.tenantexpiration = kwargs.get('tenantexpiration', None)
        self.licenseallocatedrunners = kwargs['licenseallocatedrunners']
        self.licenseexpiration = kwargs.get('licenseexpiration', None)
        self.licensecanassignsublicenses = kwargs['licensecanassignsublicenses']
        self.portraiturl = kwargs.get('portraiturl', None)


class createGroupRequest(updateGroupRequest):
    """createGroupRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tenantcompanyname:
    :vartype tenantcompanyname: str
    :ivar tenantpointofcontact:
    :vartype tenantpointofcontact: str
    :ivar tenantphonenumber:
    :vartype tenantphonenumber: str
    :ivar tenantotherdetails:
    :vartype tenantotherdetails: str
    :ivar tenantexpiration:
    :vartype tenantexpiration: str
    :ivar licenseallocatedrunners: Required.
    :vartype licenseallocatedrunners: int
    :ivar licenseexpiration:
    :vartype licenseexpiration: str
    :ivar licensecanassignsublicenses: Required.
    :vartype licensecanassignsublicenses: bool
    :ivar portraiturl:
    :vartype portraiturl: str
    :ivar parentgroupid:
    :vartype parentgroupid: str
    :ivar tenantrootuser:
    :vartype tenantrootuser: str
    :ivar tenantpassword:
    :vartype tenantpassword: str
    :ivar invitations:
    :vartype invitations: list[~runway.sdk.models.emailInvitation]
    """

    _validation = {
        'licenseallocatedrunners': {'required': True},
        'licensecanassignsublicenses': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tenantcompanyname': {'key': 'tenantCompanyName', 'type': 'str'},
        'tenantpointofcontact': {'key': 'tenantPointOfContact', 'type': 'str'},
        'tenantphonenumber': {'key': 'tenantPhoneNumber', 'type': 'str'},
        'tenantotherdetails': {'key': 'tenantOtherDetails', 'type': 'str'},
        'tenantexpiration': {'key': 'tenantExpiration', 'type': 'str'},
        'licenseallocatedrunners': {'key': 'licenseAllocatedRunners', 'type': 'int'},
        'licenseexpiration': {'key': 'licenseExpiration', 'type': 'str'},
        'licensecanassignsublicenses': {'key': 'licenseCanAssignSubLicenses', 'type': 'bool'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
        'parentgroupid': {'key': 'parentGroupId', 'type': 'str'},
        'tenantrootuser': {'key': 'tenantRootUser', 'type': 'str'},
        'tenantpassword': {'key': 'tenantPassword', 'type': 'str'},
        'invitations': {'key': 'invitations', 'type': '[emailInvitation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tenantcompanyname:
        :paramtype tenantcompanyname: str
        :keyword tenantpointofcontact:
        :paramtype tenantpointofcontact: str
        :keyword tenantphonenumber:
        :paramtype tenantphonenumber: str
        :keyword tenantotherdetails:
        :paramtype tenantotherdetails: str
        :keyword tenantexpiration:
        :paramtype tenantexpiration: str
        :keyword licenseallocatedrunners: Required.
        :paramtype licenseallocatedrunners: int
        :keyword licenseexpiration:
        :paramtype licenseexpiration: str
        :keyword licensecanassignsublicenses: Required.
        :paramtype licensecanassignsublicenses: bool
        :keyword portraiturl:
        :paramtype portraiturl: str
        :keyword parentgroupid:
        :paramtype parentgroupid: str
        :keyword tenantrootuser:
        :paramtype tenantrootuser: str
        :keyword tenantpassword:
        :paramtype tenantpassword: str
        :keyword invitations:
        :paramtype invitations: list[~runway.sdk.models.emailInvitation]
        """
        super(createGroupRequest, self).__init__(**kwargs)
        self.parentgroupid = kwargs.get('parentgroupid', None)
        self.tenantrootuser = kwargs.get('tenantrootuser', None)
        self.tenantpassword = kwargs.get('tenantpassword', None)
        self.invitations = kwargs.get('invitations', None)


class createJobRequest(actionChainSettingsRequest):
    """createJobRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar actions:
    :vartype actions: list[~runway.sdk.models.actionSettingRequest]
    :ivar groupid:
    :vartype groupid: str
    :ivar isenabled: Required.
    :vartype isenabled: bool
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar endpointsetid:
    :vartype endpointsetid: str
    :ivar schedule:
    :vartype schedule: ~runway.sdk.models.jobSchedule
    """

    _validation = {
        'isenabled': {'required': True},
        'ishidden': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions': {'key': 'actions', 'type': '[actionSettingRequest]'},
        'groupid': {'key': 'groupId', 'type': 'str'},
        'isenabled': {'key': 'isEnabled', 'type': 'bool'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'endpointsetid': {'key': 'endpointSetId', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'jobSchedule'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword actions:
        :paramtype actions: list[~runway.sdk.models.actionSettingRequest]
        :keyword groupid:
        :paramtype groupid: str
        :keyword isenabled: Required.
        :paramtype isenabled: bool
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword endpointsetid:
        :paramtype endpointsetid: str
        :keyword schedule:
        :paramtype schedule: ~runway.sdk.models.jobSchedule
        """
        super(createJobRequest, self).__init__(**kwargs)
        self.groupid = kwargs.get('groupid', None)
        self.isenabled = kwargs['isenabled']
        self.ishidden = kwargs['ishidden']
        self.endpointsetid = kwargs.get('endpointsetid', None)
        self.schedule = kwargs.get('schedule', None)


class createJobResponse(msrest.serialization.Model):
    """createJobResponse.

    :ivar jobid:
    :vartype jobid: str
    :ivar jobname:
    :vartype jobname: str
    :ivar endpointsetid:
    :vartype endpointsetid: str
    """

    _attribute_map = {
        'jobid': {'key': 'jobId', 'type': 'str'},
        'jobname': {'key': 'jobName', 'type': 'str'},
        'endpointsetid': {'key': 'endpointSetId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword jobid:
        :paramtype jobid: str
        :keyword jobname:
        :paramtype jobname: str
        :keyword endpointsetid:
        :paramtype endpointsetid: str
        """
        super(createJobResponse, self).__init__(**kwargs)
        self.jobid = kwargs.get('jobid', None)
        self.jobname = kwargs.get('jobname', None)
        self.endpointsetid = kwargs.get('endpointsetid', None)


class updateRoleRequest(msrest.serialization.Model):
    """updateRoleRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar permissions:
    :vartype permissions: list[~runway.sdk.models.runwayRoleAccess]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': '[runwayRoleAccess]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword permissions:
        :paramtype permissions: list[~runway.sdk.models.runwayRoleAccess]
        """
        super(updateRoleRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.permissions = kwargs.get('permissions', None)


class createRoleRequest(updateRoleRequest):
    """createRoleRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar permissions:
    :vartype permissions: list[~runway.sdk.models.runwayRoleAccess]
    :ivar groupid:
    :vartype groupid: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': '[runwayRoleAccess]'},
        'groupid': {'key': 'groupId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword permissions:
        :paramtype permissions: list[~runway.sdk.models.runwayRoleAccess]
        :keyword groupid:
        :paramtype groupid: str
        """
        super(createRoleRequest, self).__init__(**kwargs)
        self.groupid = kwargs.get('groupid', None)


class updateUserRequest(msrest.serialization.Model):
    """updateUserRequest.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        """
        super(updateUserRequest, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.company = kwargs.get('company', None)
        self.phone = kwargs.get('phone', None)


class createUserRequest(updateUserRequest):
    """createUserRequest.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    :ivar email:
    :vartype email: str
    :ivar password:
    :vartype password: str
    :ivar optionalgroupid:
    :vartype optionalgroupid: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'optionalgroupid': {'key': 'optionalGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        :keyword email:
        :paramtype email: str
        :keyword password:
        :paramtype password: str
        :keyword optionalgroupid:
        :paramtype optionalgroupid: str
        """
        super(createUserRequest, self).__init__(**kwargs)
        self.email = kwargs.get('email', None)
        self.password = kwargs.get('password', None)
        self.optionalgroupid = kwargs.get('optionalgroupid', None)


class dissolveEndpointsRequest(msrest.serialization.Model):
    """dissolveEndpointsRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar setid:
    :vartype setid: str
    :ivar skipdissolve: Required.
    :vartype skipdissolve: bool
    """

    _validation = {
        'skipdissolve': {'required': True},
    }

    _attribute_map = {
        'setid': {'key': 'setId', 'type': 'str'},
        'skipdissolve': {'key': 'skipDissolve', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword setid:
        :paramtype setid: str
        :keyword skipdissolve: Required.
        :paramtype skipdissolve: bool
        """
        super(dissolveEndpointsRequest, self).__init__(**kwargs)
        self.setid = kwargs.get('setid', None)
        self.skipdissolve = kwargs['skipdissolve']


class dissolveRunnersRequest(msrest.serialization.Model):
    """dissolveRunnersRequest.

    :ivar setid:
    :vartype setid: str
    """

    _attribute_map = {
        'setid': {'key': 'setId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword setid:
        :paramtype setid: str
        """
        super(dissolveRunnersRequest, self).__init__(**kwargs)
        self.setid = kwargs.get('setid', None)


class emailInvitation(msrest.serialization.Model):
    """emailInvitation.

    :ivar emailaddress:
    :vartype emailaddress: str
    :ivar roleid:
    :vartype roleid: str
    """

    _attribute_map = {
        'emailaddress': {'key': 'emailAddress', 'type': 'str'},
        'roleid': {'key': 'roleId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword emailaddress:
        :paramtype emailaddress: str
        :keyword roleid:
        :paramtype roleid: str
        """
        super(emailInvitation, self).__init__(**kwargs)
        self.emailaddress = kwargs.get('emailaddress', None)
        self.roleid = kwargs.get('roleid', None)


class enrollRequest(msrest.serialization.Model):
    """enrollRequest.

    :ivar enrollmenttoken:
    :vartype enrollmenttoken: str
    :ivar parameters: Dictionary of :code:`<string>`.
    :vartype parameters: dict[str, str]
    """

    _attribute_map = {
        'enrollmenttoken': {'key': 'enrollmentToken', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enrollmenttoken:
        :paramtype enrollmenttoken: str
        :keyword parameters: Dictionary of :code:`<string>`.
        :paramtype parameters: dict[str, str]
        """
        super(enrollRequest, self).__init__(**kwargs)
        self.enrollmenttoken = kwargs.get('enrollmenttoken', None)
        self.parameters = kwargs.get('parameters', None)


class enrollResponse(msrest.serialization.Model):
    """enrollResponse.

    :ivar nodeid:
    :vartype nodeid: str
    :ivar nodesecretkey:
    :vartype nodesecretkey: str
    :ivar parameters: Dictionary of :code:`<string>`.
    :vartype parameters: dict[str, str]
    """

    _attribute_map = {
        'nodeid': {'key': 'nodeId', 'type': 'str'},
        'nodesecretkey': {'key': 'nodeSecretKey', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword nodeid:
        :paramtype nodeid: str
        :keyword nodesecretkey:
        :paramtype nodesecretkey: str
        :keyword parameters: Dictionary of :code:`<string>`.
        :paramtype parameters: dict[str, str]
        """
        super(enrollResponse, self).__init__(**kwargs)
        self.nodeid = kwargs.get('nodeid', None)
        self.nodesecretkey = kwargs.get('nodesecretkey', None)
        self.parameters = kwargs.get('parameters', None)


class filterComparison(msrest.serialization.Model):
    """filterComparison.

    All required parameters must be populated in order to send to Azure.

    :ivar operator:
    :vartype operator: str
    :ivar casesensitive: Required.
    :vartype casesensitive: bool
    :ivar left:
    :vartype left: str
    :ivar right:
    :vartype right: str
    :ivar children:
    :vartype children: list[~runway.sdk.models.filterComparison]
    """

    _validation = {
        'casesensitive': {'required': True},
    }

    _attribute_map = {
        'operator': {'key': 'operator', 'type': 'str'},
        'casesensitive': {'key': 'caseSensitive', 'type': 'bool'},
        'left': {'key': 'left', 'type': 'str'},
        'right': {'key': 'right', 'type': 'str'},
        'children': {'key': 'children', 'type': '[filterComparison]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operator:
        :paramtype operator: str
        :keyword casesensitive: Required.
        :paramtype casesensitive: bool
        :keyword left:
        :paramtype left: str
        :keyword right:
        :paramtype right: str
        :keyword children:
        :paramtype children: list[~runway.sdk.models.filterComparison]
        """
        super(filterComparison, self).__init__(**kwargs)
        self.operator = kwargs.get('operator', None)
        self.casesensitive = kwargs['casesensitive']
        self.left = kwargs.get('left', None)
        self.right = kwargs.get('right', None)
        self.children = kwargs.get('children', None)


class groupHierarchyViewEx(msrest.serialization.Model):
    """groupHierarchyViewEx.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar portraiturl:
    :vartype portraiturl: str
    :ivar homeforuserid:
    :vartype homeforuserid: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar licensesallocated: Required.
    :vartype licensesallocated: int
    :ivar licensesinuse: Required.
    :vartype licensesinuse: int
    :ivar licenseexpiration: Required.
    :vartype licenseexpiration: ~datetime.datetime
    :ivar cancreatetenants: Required.
    :vartype cancreatetenants: bool
    :ivar parentlicensecontainerid:
    :vartype parentlicensecontainerid: str
    :ivar parentids:
    :vartype parentids: list[str]
    :ivar homeforusername:
    :vartype homeforusername: str
    :ivar homeforuseremail:
    :vartype homeforuseremail: str
    """

    _validation = {
        'isselected': {'required': True},
        'licensesallocated': {'required': True},
        'licensesinuse': {'required': True},
        'licenseexpiration': {'required': True},
        'cancreatetenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
        'homeforuserid': {'key': 'homeForUserId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'licensesallocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licensesinuse': {'key': 'licensesInUse', 'type': 'int'},
        'licenseexpiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'cancreatetenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parentlicensecontainerid': {'key': 'parentLicenseContainerId', 'type': 'str'},
        'parentids': {'key': 'parentIds', 'type': '[str]'},
        'homeforusername': {'key': 'homeForUserName', 'type': 'str'},
        'homeforuseremail': {'key': 'homeForUserEmail', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword portraiturl:
        :paramtype portraiturl: str
        :keyword homeforuserid:
        :paramtype homeforuserid: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword licensesallocated: Required.
        :paramtype licensesallocated: int
        :keyword licensesinuse: Required.
        :paramtype licensesinuse: int
        :keyword licenseexpiration: Required.
        :paramtype licenseexpiration: ~datetime.datetime
        :keyword cancreatetenants: Required.
        :paramtype cancreatetenants: bool
        :keyword parentlicensecontainerid:
        :paramtype parentlicensecontainerid: str
        :keyword parentids:
        :paramtype parentids: list[str]
        :keyword homeforusername:
        :paramtype homeforusername: str
        :keyword homeforuseremail:
        :paramtype homeforuseremail: str
        """
        super(groupHierarchyViewEx, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.portraiturl = kwargs.get('portraiturl', None)
        self.homeforuserid = kwargs.get('homeforuserid', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']
        self.licensesallocated = kwargs['licensesallocated']
        self.licensesinuse = kwargs['licensesinuse']
        self.licenseexpiration = kwargs['licenseexpiration']
        self.cancreatetenants = kwargs['cancreatetenants']
        self.parentlicensecontainerid = kwargs.get('parentlicensecontainerid', None)
        self.parentids = kwargs.get('parentids', None)
        self.homeforusername = kwargs.get('homeforusername', None)
        self.homeforuseremail = kwargs.get('homeforuseremail', None)


class groupInvitationRequest(msrest.serialization.Model):
    """groupInvitationRequest.

    :ivar groupid:
    :vartype groupid: str
    :ivar invitations:
    :vartype invitations: list[~runway.sdk.models.emailInvitation]
    """

    _attribute_map = {
        'groupid': {'key': 'groupId', 'type': 'str'},
        'invitations': {'key': 'invitations', 'type': '[emailInvitation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword groupid:
        :paramtype groupid: str
        :keyword invitations:
        :paramtype invitations: list[~runway.sdk.models.emailInvitation]
        """
        super(groupInvitationRequest, self).__init__(**kwargs)
        self.groupid = kwargs.get('groupid', None)
        self.invitations = kwargs.get('invitations', None)


class groupQueryViewEx(msrest.serialization.Model):
    """groupQueryViewEx.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar portraiturl:
    :vartype portraiturl: str
    :ivar homeforuserid:
    :vartype homeforuserid: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar licensesallocated: Required.
    :vartype licensesallocated: int
    :ivar licensesinuse: Required.
    :vartype licensesinuse: int
    :ivar licenseexpiration: Required.
    :vartype licenseexpiration: ~datetime.datetime
    :ivar cancreatetenants: Required.
    :vartype cancreatetenants: bool
    :ivar parentlicensecontainerid:
    :vartype parentlicensecontainerid: str
    :ivar ownername:
    :vartype ownername: str
    :ivar owneremail:
    :vartype owneremail: str
    :ivar tenantname:
    :vartype tenantname: str
    :ivar tenantemail:
    :vartype tenantemail: str
    :ivar tenantcompanyname:
    :vartype tenantcompanyname: str
    :ivar tenantphonenumber:
    :vartype tenantphonenumber: str
    :ivar tenantotherdetails:
    :vartype tenantotherdetails: str
    :ivar tenantexpiration:
    :vartype tenantexpiration: str
    """

    _validation = {
        'isselected': {'required': True},
        'licensesallocated': {'required': True},
        'licensesinuse': {'required': True},
        'licenseexpiration': {'required': True},
        'cancreatetenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
        'homeforuserid': {'key': 'homeForUserId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'licensesallocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licensesinuse': {'key': 'licensesInUse', 'type': 'int'},
        'licenseexpiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'cancreatetenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parentlicensecontainerid': {'key': 'parentLicenseContainerId', 'type': 'str'},
        'ownername': {'key': 'ownerName', 'type': 'str'},
        'owneremail': {'key': 'ownerEmail', 'type': 'str'},
        'tenantname': {'key': 'tenantName', 'type': 'str'},
        'tenantemail': {'key': 'tenantEmail', 'type': 'str'},
        'tenantcompanyname': {'key': 'tenantCompanyName', 'type': 'str'},
        'tenantphonenumber': {'key': 'tenantPhoneNumber', 'type': 'str'},
        'tenantotherdetails': {'key': 'tenantOtherDetails', 'type': 'str'},
        'tenantexpiration': {'key': 'tenantExpiration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword portraiturl:
        :paramtype portraiturl: str
        :keyword homeforuserid:
        :paramtype homeforuserid: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword licensesallocated: Required.
        :paramtype licensesallocated: int
        :keyword licensesinuse: Required.
        :paramtype licensesinuse: int
        :keyword licenseexpiration: Required.
        :paramtype licenseexpiration: ~datetime.datetime
        :keyword cancreatetenants: Required.
        :paramtype cancreatetenants: bool
        :keyword parentlicensecontainerid:
        :paramtype parentlicensecontainerid: str
        :keyword ownername:
        :paramtype ownername: str
        :keyword owneremail:
        :paramtype owneremail: str
        :keyword tenantname:
        :paramtype tenantname: str
        :keyword tenantemail:
        :paramtype tenantemail: str
        :keyword tenantcompanyname:
        :paramtype tenantcompanyname: str
        :keyword tenantphonenumber:
        :paramtype tenantphonenumber: str
        :keyword tenantotherdetails:
        :paramtype tenantotherdetails: str
        :keyword tenantexpiration:
        :paramtype tenantexpiration: str
        """
        super(groupQueryViewEx, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.portraiturl = kwargs.get('portraiturl', None)
        self.homeforuserid = kwargs.get('homeforuserid', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']
        self.licensesallocated = kwargs['licensesallocated']
        self.licensesinuse = kwargs['licensesinuse']
        self.licenseexpiration = kwargs['licenseexpiration']
        self.cancreatetenants = kwargs['cancreatetenants']
        self.parentlicensecontainerid = kwargs.get('parentlicensecontainerid', None)
        self.ownername = kwargs.get('ownername', None)
        self.owneremail = kwargs.get('owneremail', None)
        self.tenantname = kwargs.get('tenantname', None)
        self.tenantemail = kwargs.get('tenantemail', None)
        self.tenantcompanyname = kwargs.get('tenantcompanyname', None)
        self.tenantphonenumber = kwargs.get('tenantphonenumber', None)
        self.tenantotherdetails = kwargs.get('tenantotherdetails', None)
        self.tenantexpiration = kwargs.get('tenantexpiration', None)


class iAccountAssetQueryView(msrest.serialization.Model):
    """iAccountAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar endpointid:
    :vartype endpointid: str
    :ivar endpointhostname:
    :vartype endpointhostname: str
    :ivar username:
    :vartype username: str
    :ivar domain:
    :vartype domain: str
    :ivar sid:
    :vartype sid: str
    :ivar instancetype:
    :vartype instancetype: str
    :ivar securitygroups:
    :vartype securitygroups: list[str]
    :ivar id:
    :vartype id: str
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    """

    _validation = {
        'isselected': {'required': True},
    }

    _attribute_map = {
        'endpointid': {'key': 'endpointId', 'type': 'str'},
        'endpointhostname': {'key': 'endpointHostname', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'sid': {'key': 'sid', 'type': 'str'},
        'instancetype': {'key': 'instanceType', 'type': 'str'},
        'securitygroups': {'key': 'securityGroups', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpointid:
        :paramtype endpointid: str
        :keyword endpointhostname:
        :paramtype endpointhostname: str
        :keyword username:
        :paramtype username: str
        :keyword domain:
        :paramtype domain: str
        :keyword sid:
        :paramtype sid: str
        :keyword instancetype:
        :paramtype instancetype: str
        :keyword securitygroups:
        :paramtype securitygroups: list[str]
        :keyword id:
        :paramtype id: str
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        """
        super(iAccountAssetQueryView, self).__init__(**kwargs)
        self.endpointid = kwargs.get('endpointid', None)
        self.endpointhostname = kwargs.get('endpointhostname', None)
        self.username = kwargs.get('username', None)
        self.domain = kwargs.get('domain', None)
        self.sid = kwargs.get('sid', None)
        self.instancetype = kwargs.get('instancetype', None)
        self.securitygroups = kwargs.get('securitygroups', None)
        self.id = kwargs.get('id', None)
        self.isselected = kwargs['isselected']
        self.tags = kwargs.get('tags', None)


class iConnectionQueryView(msrest.serialization.Model):
    """iConnectionQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar assignedendpointid:
    :vartype assignedendpointid: str
    :ivar assignedendpointname:
    :vartype assignedendpointname: str
    :ivar actionname:
    :vartype actionname: str
    :ivar runnerid:
    :vartype runnerid: str
    :ivar actionid:
    :vartype actionid: str
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar settings:
    :vartype settings: list[~runway.sdk.models.actionSetting]
    :ivar connectionmetrics:
    :vartype connectionmetrics: list[~runway.sdk.models.runwayConnectionStatistic]
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    """

    _validation = {
        'ishidden': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'assignedendpointid': {'key': 'assignedEndpointId', 'type': 'str'},
        'assignedendpointname': {'key': 'assignedEndpointName', 'type': 'str'},
        'actionname': {'key': 'actionName', 'type': 'str'},
        'runnerid': {'key': 'runnerId', 'type': 'str'},
        'actionid': {'key': 'actionId', 'type': 'str'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '[actionSetting]'},
        'connectionmetrics': {'key': 'connectionMetrics', 'type': '[runwayConnectionStatistic]'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword assignedendpointid:
        :paramtype assignedendpointid: str
        :keyword assignedendpointname:
        :paramtype assignedendpointname: str
        :keyword actionname:
        :paramtype actionname: str
        :keyword runnerid:
        :paramtype runnerid: str
        :keyword actionid:
        :paramtype actionid: str
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword settings:
        :paramtype settings: list[~runway.sdk.models.actionSetting]
        :keyword connectionmetrics:
        :paramtype connectionmetrics: list[~runway.sdk.models.runwayConnectionStatistic]
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        """
        super(iConnectionQueryView, self).__init__(**kwargs)
        self.assignedendpointid = kwargs.get('assignedendpointid', None)
        self.assignedendpointname = kwargs.get('assignedendpointname', None)
        self.actionname = kwargs.get('actionname', None)
        self.runnerid = kwargs.get('runnerid', None)
        self.actionid = kwargs.get('actionid', None)
        self.ishidden = kwargs['ishidden']
        self.settings = kwargs.get('settings', None)
        self.connectionmetrics = kwargs.get('connectionmetrics', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']


class idRequest(msrest.serialization.Model):
    """idRequest.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        """
        super(idRequest, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class idResponse(idRequest):
    """idResponse.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        """
        super(idResponse, self).__init__(**kwargs)


class iEndpointAssetQueryView(msrest.serialization.Model):
    """iEndpointAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar membershipflag: Required.
    :vartype membershipflag: bool
    :ivar ispendingdelete: Required.
    :vartype ispendingdelete: bool
    :ivar name:
    :vartype name: str
    :ivar endpointtype:
    :vartype endpointtype: str
    :ivar buildinformation:
    :vartype buildinformation: str
    :ivar osname:
    :vartype osname: str
    :ivar osversion:
    :vartype osversion: str
    :ivar manufacturer:
    :vartype manufacturer: str
    :ivar lastipaddress:
    :vartype lastipaddress: str
    :ivar preferredmacaddress:
    :vartype preferredmacaddress: str
    :ivar lastgatewayaddress:
    :vartype lastgatewayaddress: str
    :ivar organizationalunit:
    :vartype organizationalunit: str
    :ivar adapters:
    :vartype adapters: list[~runway.sdk.models.adapterInformation]
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    :ivar hasrunner: Required.
    :vartype hasrunner: bool
    :ivar hasactiverunner: Required.
    :vartype hasactiverunner: bool
    :ivar runnercount: Required.
    :vartype runnercount: int
    :ivar runneraffinity: Required. Possible values include: "EphemeralContainer",
     "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype runneraffinity: str or ~runway.sdk.models.nodeAffinity
    :ivar lastthreadstate: Required. Possible values include: "Uninitialized", "NotStarted",
     "Running", "Waiting", "Finished".
    :vartype lastthreadstate: str or ~runway.sdk.models.jobThreadState
    :ivar lastthreadid:
    :vartype lastthreadid: str
    :ivar devicetype:
    :vartype devicetype: str
    :ivar hardwareproduct:
    :vartype hardwareproduct: str
    """

    _validation = {
        'isselected': {'required': True},
        'membershipflag': {'required': True},
        'ispendingdelete': {'required': True},
        'hasrunner': {'required': True},
        'hasactiverunner': {'required': True},
        'runnercount': {'required': True},
        'runneraffinity': {'required': True},
        'lastthreadstate': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'membershipflag': {'key': 'membershipFlag', 'type': 'bool'},
        'ispendingdelete': {'key': 'isPendingDelete', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'endpointtype': {'key': 'endpointType', 'type': 'str'},
        'buildinformation': {'key': 'buildInformation', 'type': 'str'},
        'osname': {'key': 'osName', 'type': 'str'},
        'osversion': {'key': 'osVersion', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'lastipaddress': {'key': 'lastIpAddress', 'type': 'str'},
        'preferredmacaddress': {'key': 'preferredMacAddress', 'type': 'str'},
        'lastgatewayaddress': {'key': 'lastGatewayAddress', 'type': 'str'},
        'organizationalunit': {'key': 'organizationalUnit', 'type': 'str'},
        'adapters': {'key': 'adapters', 'type': '[adapterInformation]'},
        'metadata': {'key': 'metaData', 'type': '{str}'},
        'hasrunner': {'key': 'hasRunner', 'type': 'bool'},
        'hasactiverunner': {'key': 'hasActiveRunner', 'type': 'bool'},
        'runnercount': {'key': 'runnerCount', 'type': 'int'},
        'runneraffinity': {'key': 'runnerAffinity', 'type': 'str'},
        'lastthreadstate': {'key': 'lastThreadState', 'type': 'str'},
        'lastthreadid': {'key': 'lastThreadId', 'type': 'str'},
        'devicetype': {'key': 'deviceType', 'type': 'str'},
        'hardwareproduct': {'key': 'hardwareProduct', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword membershipflag: Required.
        :paramtype membershipflag: bool
        :keyword ispendingdelete: Required.
        :paramtype ispendingdelete: bool
        :keyword name:
        :paramtype name: str
        :keyword endpointtype:
        :paramtype endpointtype: str
        :keyword buildinformation:
        :paramtype buildinformation: str
        :keyword osname:
        :paramtype osname: str
        :keyword osversion:
        :paramtype osversion: str
        :keyword manufacturer:
        :paramtype manufacturer: str
        :keyword lastipaddress:
        :paramtype lastipaddress: str
        :keyword preferredmacaddress:
        :paramtype preferredmacaddress: str
        :keyword lastgatewayaddress:
        :paramtype lastgatewayaddress: str
        :keyword organizationalunit:
        :paramtype organizationalunit: str
        :keyword adapters:
        :paramtype adapters: list[~runway.sdk.models.adapterInformation]
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        :keyword hasrunner: Required.
        :paramtype hasrunner: bool
        :keyword hasactiverunner: Required.
        :paramtype hasactiverunner: bool
        :keyword runnercount: Required.
        :paramtype runnercount: int
        :keyword runneraffinity: Required. Possible values include: "EphemeralContainer",
         "PersistentRunner", "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype runneraffinity: str or ~runway.sdk.models.nodeAffinity
        :keyword lastthreadstate: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype lastthreadstate: str or ~runway.sdk.models.jobThreadState
        :keyword lastthreadid:
        :paramtype lastthreadid: str
        :keyword devicetype:
        :paramtype devicetype: str
        :keyword hardwareproduct:
        :paramtype hardwareproduct: str
        """
        super(iEndpointAssetQueryView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']
        self.membershipflag = kwargs['membershipflag']
        self.ispendingdelete = kwargs['ispendingdelete']
        self.name = kwargs.get('name', None)
        self.endpointtype = kwargs.get('endpointtype', None)
        self.buildinformation = kwargs.get('buildinformation', None)
        self.osname = kwargs.get('osname', None)
        self.osversion = kwargs.get('osversion', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.lastipaddress = kwargs.get('lastipaddress', None)
        self.preferredmacaddress = kwargs.get('preferredmacaddress', None)
        self.lastgatewayaddress = kwargs.get('lastgatewayaddress', None)
        self.organizationalunit = kwargs.get('organizationalunit', None)
        self.adapters = kwargs.get('adapters', None)
        self.metadata = kwargs.get('metadata', None)
        self.hasrunner = kwargs['hasrunner']
        self.hasactiverunner = kwargs['hasactiverunner']
        self.runnercount = kwargs['runnercount']
        self.runneraffinity = kwargs['runneraffinity']
        self.lastthreadstate = kwargs['lastthreadstate']
        self.lastthreadid = kwargs.get('lastthreadid', None)
        self.devicetype = kwargs.get('devicetype', None)
        self.hardwareproduct = kwargs.get('hardwareproduct', None)


class iFilterProperty(msrest.serialization.Model):
    """iFilterProperty.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar type: Required. Possible values include: "String", "Integer", "Boolean", "Timestamp".
    :vartype type: str or ~runway.sdk.models.filterDataType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword type: Required. Possible values include: "String", "Integer", "Boolean", "Timestamp".
        :paramtype type: str or ~runway.sdk.models.filterDataType
        """
        super(iFilterProperty, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs['type']


class iGroupQueryView(msrest.serialization.Model):
    """iGroupQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar portraiturl:
    :vartype portraiturl: str
    :ivar homeforuserid:
    :vartype homeforuserid: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar licensesallocated: Required.
    :vartype licensesallocated: int
    :ivar licensesinuse: Required.
    :vartype licensesinuse: int
    :ivar licenseexpiration: Required.
    :vartype licenseexpiration: ~datetime.datetime
    :ivar cancreatetenants: Required.
    :vartype cancreatetenants: bool
    :ivar parentlicensecontainerid:
    :vartype parentlicensecontainerid: str
    """

    _validation = {
        'isselected': {'required': True},
        'licensesallocated': {'required': True},
        'licensesinuse': {'required': True},
        'licenseexpiration': {'required': True},
        'cancreatetenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
        'homeforuserid': {'key': 'homeForUserId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'licensesallocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licensesinuse': {'key': 'licensesInUse', 'type': 'int'},
        'licenseexpiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'cancreatetenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parentlicensecontainerid': {'key': 'parentLicenseContainerId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword portraiturl:
        :paramtype portraiturl: str
        :keyword homeforuserid:
        :paramtype homeforuserid: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword licensesallocated: Required.
        :paramtype licensesallocated: int
        :keyword licensesinuse: Required.
        :paramtype licensesinuse: int
        :keyword licenseexpiration: Required.
        :paramtype licenseexpiration: ~datetime.datetime
        :keyword cancreatetenants: Required.
        :paramtype cancreatetenants: bool
        :keyword parentlicensecontainerid:
        :paramtype parentlicensecontainerid: str
        """
        super(iGroupQueryView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.portraiturl = kwargs.get('portraiturl', None)
        self.homeforuserid = kwargs.get('homeforuserid', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']
        self.licensesallocated = kwargs['licensesallocated']
        self.licensesinuse = kwargs['licensesinuse']
        self.licenseexpiration = kwargs['licenseexpiration']
        self.cancreatetenants = kwargs['cancreatetenants']
        self.parentlicensecontainerid = kwargs.get('parentlicensecontainerid', None)


class iInvitationQueryView(msrest.serialization.Model):
    """iInvitationQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar actorid:
    :vartype actorid: str
    :ivar emailaddress:
    :vartype emailaddress: str
    :ivar username:
    :vartype username: str
    :ivar groupid:
    :vartype groupid: str
    :ivar groupname:
    :vartype groupname: str
    :ivar roleid:
    :vartype roleid: str
    :ivar rolename:
    :vartype rolename: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    """

    _validation = {
        'isselected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'actorid': {'key': 'actorId', 'type': 'str'},
        'emailaddress': {'key': 'emailAddress', 'type': 'str'},
        'username': {'key': 'userName', 'type': 'str'},
        'groupid': {'key': 'groupId', 'type': 'str'},
        'groupname': {'key': 'groupName', 'type': 'str'},
        'roleid': {'key': 'roleId', 'type': 'str'},
        'rolename': {'key': 'roleName', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword actorid:
        :paramtype actorid: str
        :keyword emailaddress:
        :paramtype emailaddress: str
        :keyword username:
        :paramtype username: str
        :keyword groupid:
        :paramtype groupid: str
        :keyword groupname:
        :paramtype groupname: str
        :keyword roleid:
        :paramtype roleid: str
        :keyword rolename:
        :paramtype rolename: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        """
        super(iInvitationQueryView, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.actorid = kwargs.get('actorid', None)
        self.emailaddress = kwargs.get('emailaddress', None)
        self.username = kwargs.get('username', None)
        self.groupid = kwargs.get('groupid', None)
        self.groupname = kwargs.get('groupname', None)
        self.roleid = kwargs.get('roleid', None)
        self.rolename = kwargs.get('rolename', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']


class iJobQueryView(msrest.serialization.Model):
    """iJobQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar isenabled: Required.
    :vartype isenabled: bool
    :ivar actions:
    :vartype actions: list[~runway.sdk.models.actionInstance]
    :ivar schedule:
    :vartype schedule: ~runway.sdk.models.jobSchedule
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar jobmetrics:
    :vartype jobmetrics: list[~runway.sdk.models.runwayJobStatistic]
    :ivar totalendpointsfinished: Required.
    :vartype totalendpointsfinished: int
    :ivar totalendpointsfinishederrors: Required.
    :vartype totalendpointsfinishederrors: int
    :ivar totalendpointsrunning: Required.
    :vartype totalendpointsrunning: int
    :ivar totalendpointsassigned: Required.
    :vartype totalendpointsassigned: int
    :ivar id:
    :vartype id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        'isenabled': {'required': True},
        'ishidden': {'required': True},
        'totalendpointsfinished': {'required': True},
        'totalendpointsfinishederrors': {'required': True},
        'totalendpointsrunning': {'required': True},
        'totalendpointsassigned': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'isenabled': {'key': 'isEnabled', 'type': 'bool'},
        'actions': {'key': 'actions', 'type': '[actionInstance]'},
        'schedule': {'key': 'schedule', 'type': 'jobSchedule'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'jobmetrics': {'key': 'jobMetrics', 'type': '[runwayJobStatistic]'},
        'totalendpointsfinished': {'key': 'totalEndpointsFinished', 'type': 'int'},
        'totalendpointsfinishederrors': {'key': 'totalEndpointsFinishedErrors', 'type': 'int'},
        'totalendpointsrunning': {'key': 'totalEndpointsRunning', 'type': 'int'},
        'totalendpointsassigned': {'key': 'totalEndpointsAssigned', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword isenabled: Required.
        :paramtype isenabled: bool
        :keyword actions:
        :paramtype actions: list[~runway.sdk.models.actionInstance]
        :keyword schedule:
        :paramtype schedule: ~runway.sdk.models.jobSchedule
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword jobmetrics:
        :paramtype jobmetrics: list[~runway.sdk.models.runwayJobStatistic]
        :keyword totalendpointsfinished: Required.
        :paramtype totalendpointsfinished: int
        :keyword totalendpointsfinishederrors: Required.
        :paramtype totalendpointsfinishederrors: int
        :keyword totalendpointsrunning: Required.
        :paramtype totalendpointsrunning: int
        :keyword totalendpointsassigned: Required.
        :paramtype totalendpointsassigned: int
        :keyword id:
        :paramtype id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super(iJobQueryView, self).__init__(**kwargs)
        self.isenabled = kwargs['isenabled']
        self.actions = kwargs.get('actions', None)
        self.schedule = kwargs.get('schedule', None)
        self.ishidden = kwargs['ishidden']
        self.jobmetrics = kwargs.get('jobmetrics', None)
        self.totalendpointsfinished = kwargs['totalendpointsfinished']
        self.totalendpointsfinishederrors = kwargs['totalendpointsfinishederrors']
        self.totalendpointsrunning = kwargs['totalendpointsrunning']
        self.totalendpointsassigned = kwargs['totalendpointsassigned']
        self.id = kwargs.get('id', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)


class iJobThreadQueryView(msrest.serialization.Model):
    """iJobThreadQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar prodigalobjectid:
    :vartype prodigalobjectid: str
    :ivar threadstate: Required. Possible values include: "Uninitialized", "NotStarted", "Running",
     "Waiting", "Finished".
    :vartype threadstate: str or ~runway.sdk.models.jobThreadState
    :ivar laststepresult: Required. Possible values include: "Uninitialized", "Success", "Failure".
    :vartype laststepresult: str or ~runway.sdk.models.stepResult
    :ivar id:
    :vartype id: str
    """

    _validation = {
        'threadstate': {'required': True},
        'laststepresult': {'required': True},
    }

    _attribute_map = {
        'prodigalobjectid': {'key': 'prodigalObjectId', 'type': 'str'},
        'threadstate': {'key': 'threadState', 'type': 'str'},
        'laststepresult': {'key': 'lastStepResult', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword prodigalobjectid:
        :paramtype prodigalobjectid: str
        :keyword threadstate: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype threadstate: str or ~runway.sdk.models.jobThreadState
        :keyword laststepresult: Required. Possible values include: "Uninitialized", "Success",
         "Failure".
        :paramtype laststepresult: str or ~runway.sdk.models.stepResult
        :keyword id:
        :paramtype id: str
        """
        super(iJobThreadQueryView, self).__init__(**kwargs)
        self.prodigalobjectid = kwargs.get('prodigalobjectid', None)
        self.threadstate = kwargs['threadstate']
        self.laststepresult = kwargs['laststepresult']
        self.id = kwargs.get('id', None)


class invitationAnswerRequest(msrest.serialization.Model):
    """invitationAnswerRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar accept: Required.
    :vartype accept: bool
    :ivar invitationid:
    :vartype invitationid: str
    """

    _validation = {
        'accept': {'required': True},
    }

    _attribute_map = {
        'accept': {'key': 'accept', 'type': 'bool'},
        'invitationid': {'key': 'invitationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword accept: Required.
        :paramtype accept: bool
        :keyword invitationid:
        :paramtype invitationid: str
        """
        super(invitationAnswerRequest, self).__init__(**kwargs)
        self.accept = kwargs['accept']
        self.invitationid = kwargs.get('invitationid', None)


class iRepositoryItemQueryView(msrest.serialization.Model):
    """iRepositoryItemQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar desiredsettings:
    :vartype desiredsettings: list[~runway.sdk.models.actionSetting]
    :ivar glyph:
    :vartype glyph: str
    :ivar author:
    :vartype author: str
    :ivar language:
    :vartype language: str
    :ivar isconnectionrequired: Required.
    :vartype isconnectionrequired: bool
    :ivar license: Required. Possible values include: "Free", "Paid".
    :vartype license: str or ~runway.sdk.models.repositoryLicense
    :ivar scope: Required. Possible values include: "Private", "Public".
    :vartype scope: str or ~runway.sdk.models.repositoryScope
    :ivar input:
    :vartype input: str
    :ivar output:
    :vartype output: str
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    """

    _validation = {
        'isconnectionrequired': {'required': True},
        'license': {'required': True},
        'scope': {'required': True},
        'revision': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'desiredsettings': {'key': 'desiredSettings', 'type': '[actionSetting]'},
        'glyph': {'key': 'glyph', 'type': 'str'},
        'author': {'key': 'author', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'isconnectionrequired': {'key': 'isConnectionRequired', 'type': 'bool'},
        'license': {'key': 'license', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'input': {'key': 'input', 'type': 'str'},
        'output': {'key': 'output', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword desiredsettings:
        :paramtype desiredsettings: list[~runway.sdk.models.actionSetting]
        :keyword glyph:
        :paramtype glyph: str
        :keyword author:
        :paramtype author: str
        :keyword language:
        :paramtype language: str
        :keyword isconnectionrequired: Required.
        :paramtype isconnectionrequired: bool
        :keyword license: Required. Possible values include: "Free", "Paid".
        :paramtype license: str or ~runway.sdk.models.repositoryLicense
        :keyword scope: Required. Possible values include: "Private", "Public".
        :paramtype scope: str or ~runway.sdk.models.repositoryScope
        :keyword input:
        :paramtype input: str
        :keyword output:
        :paramtype output: str
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        """
        super(iRepositoryItemQueryView, self).__init__(**kwargs)
        self.desiredsettings = kwargs.get('desiredsettings', None)
        self.glyph = kwargs.get('glyph', None)
        self.author = kwargs.get('author', None)
        self.language = kwargs.get('language', None)
        self.isconnectionrequired = kwargs['isconnectionrequired']
        self.license = kwargs['license']
        self.scope = kwargs['scope']
        self.input = kwargs.get('input', None)
        self.output = kwargs.get('output', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.revision = kwargs['revision']
        self.isselected = kwargs['isselected']
        self.tags = kwargs.get('tags', None)


class iRoleView(msrest.serialization.Model):
    """iRoleView.

    All required parameters must be populated in order to send to Azure.

    :ivar permissions:
    :vartype permissions: list[~runway.sdk.models.runwayRoleAccess]
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar isselected: Required.
    :vartype isselected: bool
    """

    _validation = {
        'isselected': {'required': True},
    }

    _attribute_map = {
        'permissions': {'key': 'permissions', 'type': '[runwayRoleAccess]'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword permissions:
        :paramtype permissions: list[~runway.sdk.models.runwayRoleAccess]
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword isselected: Required.
        :paramtype isselected: bool
        """
        super(iRoleView, self).__init__(**kwargs)
        self.permissions = kwargs.get('permissions', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.isselected = kwargs['isselected']


class iRunnerQueryView(msrest.serialization.Model):
    """iRunnerQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar isactive: Required.
    :vartype isactive: bool
    :ivar id:
    :vartype id: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar name:
    :vartype name: str
    :ivar affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
     "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype affinity: str or ~runway.sdk.models.nodeAffinity
    :ivar assetname:
    :vartype assetname: str
    :ivar assetid:
    :vartype assetid: str
    """

    _validation = {
        'isactive': {'required': True},
        'isselected': {'required': True},
        'affinity': {'required': True},
    }

    _attribute_map = {
        'isactive': {'key': 'isActive', 'type': 'bool'},
        'id': {'key': 'id', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'affinity': {'key': 'affinity', 'type': 'str'},
        'assetname': {'key': 'assetName', 'type': 'str'},
        'assetid': {'key': 'assetId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword isactive: Required.
        :paramtype isactive: bool
        :keyword id:
        :paramtype id: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword name:
        :paramtype name: str
        :keyword affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
         "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype affinity: str or ~runway.sdk.models.nodeAffinity
        :keyword assetname:
        :paramtype assetname: str
        :keyword assetid:
        :paramtype assetid: str
        """
        super(iRunnerQueryView, self).__init__(**kwargs)
        self.isactive = kwargs['isactive']
        self.id = kwargs.get('id', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']
        self.name = kwargs.get('name', None)
        self.affinity = kwargs['affinity']
        self.assetname = kwargs.get('assetname', None)
        self.assetid = kwargs.get('assetid', None)


class iUserQueryView(msrest.serialization.Model):
    """iUserQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar emailaddress:
    :vartype emailaddress: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    :ivar portraiturl:
    :vartype portraiturl: str
    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar homecontainerid:
    :vartype homecontainerid: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    """

    _validation = {
        'isselected': {'required': True},
    }

    _attribute_map = {
        'emailaddress': {'key': 'emailAddress', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'homecontainerid': {'key': 'homeContainerId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword emailaddress:
        :paramtype emailaddress: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        :keyword portraiturl:
        :paramtype portraiturl: str
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword homecontainerid:
        :paramtype homecontainerid: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        """
        super(iUserQueryView, self).__init__(**kwargs)
        self.emailaddress = kwargs.get('emailaddress', None)
        self.company = kwargs.get('company', None)
        self.phone = kwargs.get('phone', None)
        self.portraiturl = kwargs.get('portraiturl', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.homecontainerid = kwargs.get('homecontainerid', None)
        self.tags = kwargs.get('tags', None)
        self.isselected = kwargs['isselected']


class jobSchedule(msrest.serialization.Model):
    """jobSchedule.

    All required parameters must be populated in order to send to Azure.

    :ivar scheduletype: Required. Possible values include: "RunNow", "RunOnce", "RunEvery".
    :vartype scheduletype: str or ~runway.sdk.models.jobScheduleType
    :ivar schedule:
    :vartype schedule: str
    :ivar repeatminutes: Required.
    :vartype repeatminutes: int
    :ivar weekdays:
    :vartype weekdays: str
    """

    _validation = {
        'scheduletype': {'required': True},
        'repeatminutes': {'required': True},
    }

    _attribute_map = {
        'scheduletype': {'key': 'scheduleType', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'str'},
        'repeatminutes': {'key': 'repeatMinutes', 'type': 'int'},
        'weekdays': {'key': 'weekdays', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword scheduletype: Required. Possible values include: "RunNow", "RunOnce", "RunEvery".
        :paramtype scheduletype: str or ~runway.sdk.models.jobScheduleType
        :keyword schedule:
        :paramtype schedule: str
        :keyword repeatminutes: Required.
        :paramtype repeatminutes: int
        :keyword weekdays:
        :paramtype weekdays: str
        """
        super(jobSchedule, self).__init__(**kwargs)
        self.scheduletype = kwargs['scheduletype']
        self.schedule = kwargs.get('schedule', None)
        self.repeatminutes = kwargs['repeatminutes']
        self.weekdays = kwargs.get('weekdays', None)


class kubernetesEndpoint(msrest.serialization.Model):
    """kubernetesEndpoint.

    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    :ivar hostip:
    :vartype hostip: str
    :ivar ipaddress:
    :vartype ipaddress: str
    :ivar nodename:
    :vartype nodename: str
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'hostip': {'key': 'hostIP', 'type': 'str'},
        'ipaddress': {'key': 'ipAddress', 'type': 'str'},
        'nodename': {'key': 'nodeName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        :keyword hostip:
        :paramtype hostip: str
        :keyword ipaddress:
        :paramtype ipaddress: str
        :keyword nodename:
        :paramtype nodename: str
        """
        super(kubernetesEndpoint, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)
        self.name = kwargs.get('name', None)
        self.namespace = kwargs.get('namespace', None)
        self.hostip = kwargs.get('hostip', None)
        self.ipaddress = kwargs.get('ipaddress', None)
        self.nodename = kwargs.get('nodename', None)


class loginRequest(msrest.serialization.Model):
    """loginRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar ttl:
    :vartype ttl: str
    :ivar email:
    :vartype email: str
    :ivar password:
    :vartype password: str
    :ivar remember: Required.
    :vartype remember: bool
    """

    _validation = {
        'remember': {'required': True},
    }

    _attribute_map = {
        'ttl': {'key': 'ttl', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'remember': {'key': 'remember', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ttl:
        :paramtype ttl: str
        :keyword email:
        :paramtype email: str
        :keyword password:
        :paramtype password: str
        :keyword remember: Required.
        :paramtype remember: bool
        """
        super(loginRequest, self).__init__(**kwargs)
        self.ttl = kwargs.get('ttl', None)
        self.email = kwargs.get('email', None)
        self.password = kwargs.get('password', None)
        self.remember = kwargs['remember']


class loginResponse(msrest.serialization.Model):
    """loginResponse.

    :ivar ttl:
    :vartype ttl: str
    :ivar session:
    :vartype session: str
    """

    _attribute_map = {
        'ttl': {'key': 'ttl', 'type': 'str'},
        'session': {'key': 'session', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ttl:
        :paramtype ttl: str
        :keyword session:
        :paramtype session: str
        """
        super(loginResponse, self).__init__(**kwargs)
        self.ttl = kwargs.get('ttl', None)
        self.session = kwargs.get('session', None)


class query(msrest.serialization.Model):
    """query.

    All required parameters must be populated in order to send to Azure.

    :ivar skip: Required.
    :vartype skip: int
    :ivar take: Required.
    :vartype take: int
    :ivar rootcontainerid:
    :vartype rootcontainerid: str
    :ivar includesubgroups: Required.
    :vartype includesubgroups: bool
    :ivar membershipcheckid:
    :vartype membershipcheckid: str
    :ivar selectioncheckid:
    :vartype selectioncheckid: str
    :ivar filter:
    :vartype filter: ~runway.sdk.models.filterComparison
    :ivar sortfield:
    :vartype sortfield: str
    :ivar sortdirection: Required. Possible values include: "Ascending", "Descending".
    :vartype sortdirection: str or ~runway.sdk.models.sortDirection
    """

    _validation = {
        'skip': {'required': True},
        'take': {'required': True},
        'includesubgroups': {'required': True},
        'sortdirection': {'required': True},
    }

    _attribute_map = {
        'skip': {'key': 'skip', 'type': 'int'},
        'take': {'key': 'take', 'type': 'int'},
        'rootcontainerid': {'key': 'rootContainerId', 'type': 'str'},
        'includesubgroups': {'key': 'includeSubgroups', 'type': 'bool'},
        'membershipcheckid': {'key': 'membershipCheckId', 'type': 'str'},
        'selectioncheckid': {'key': 'selectionCheckId', 'type': 'str'},
        'filter': {'key': 'filter', 'type': 'filterComparison'},
        'sortfield': {'key': 'sortField', 'type': 'str'},
        'sortdirection': {'key': 'sortDirection', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword skip: Required.
        :paramtype skip: int
        :keyword take: Required.
        :paramtype take: int
        :keyword rootcontainerid:
        :paramtype rootcontainerid: str
        :keyword includesubgroups: Required.
        :paramtype includesubgroups: bool
        :keyword membershipcheckid:
        :paramtype membershipcheckid: str
        :keyword selectioncheckid:
        :paramtype selectioncheckid: str
        :keyword filter:
        :paramtype filter: ~runway.sdk.models.filterComparison
        :keyword sortfield:
        :paramtype sortfield: str
        :keyword sortdirection: Required. Possible values include: "Ascending", "Descending".
        :paramtype sortdirection: str or ~runway.sdk.models.sortDirection
        """
        super(query, self).__init__(**kwargs)
        self.skip = kwargs['skip']
        self.take = kwargs['take']
        self.rootcontainerid = kwargs.get('rootcontainerid', None)
        self.includesubgroups = kwargs['includesubgroups']
        self.membershipcheckid = kwargs.get('membershipcheckid', None)
        self.selectioncheckid = kwargs.get('selectioncheckid', None)
        self.filter = kwargs.get('filter', None)
        self.sortfield = kwargs.get('sortfield', None)
        self.sortdirection = kwargs['sortdirection']


class queryResponseOfAssetMapEndpointView(msrest.serialization.Model):
    """queryResponseOfAssetMapEndpointView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.assetMapEndpointView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[assetMapEndpointView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.assetMapEndpointView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfAssetMapEndpointView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfGroupQueryViewEx(msrest.serialization.Model):
    """queryResponseOfGroupQueryViewEx.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.groupQueryViewEx]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[groupQueryViewEx]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.groupQueryViewEx]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfGroupQueryViewEx, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIAccountAssetQueryView(msrest.serialization.Model):
    """queryResponseOfIAccountAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iAccountAssetQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iAccountAssetQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iAccountAssetQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIAccountAssetQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIConnectionQueryView(msrest.serialization.Model):
    """queryResponseOfIConnectionQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iConnectionQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iConnectionQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iConnectionQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIConnectionQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIEndpointAssetQueryView(msrest.serialization.Model):
    """queryResponseOfIEndpointAssetQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iEndpointAssetQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iEndpointAssetQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iEndpointAssetQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIEndpointAssetQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIGroupQueryView(msrest.serialization.Model):
    """queryResponseOfIGroupQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iGroupQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iGroupQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iGroupQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIGroupQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIInvitationQueryView(msrest.serialization.Model):
    """queryResponseOfIInvitationQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iInvitationQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iInvitationQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iInvitationQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIInvitationQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIJobQueryView(msrest.serialization.Model):
    """queryResponseOfIJobQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iJobQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iJobQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iJobQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIJobQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIJobThreadQueryView(msrest.serialization.Model):
    """queryResponseOfIJobThreadQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iJobThreadQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iJobThreadQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iJobThreadQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIJobThreadQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIRepositoryItemQueryView(msrest.serialization.Model):
    """queryResponseOfIRepositoryItemQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iRepositoryItemQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iRepositoryItemQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iRepositoryItemQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIRepositoryItemQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIRoleView(msrest.serialization.Model):
    """queryResponseOfIRoleView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iRoleView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iRoleView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iRoleView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIRoleView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIRunnerQueryView(msrest.serialization.Model):
    """queryResponseOfIRunnerQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iRunnerQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iRunnerQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iRunnerQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIRunnerQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryResponseOfIUserQueryView(msrest.serialization.Model):
    """queryResponseOfIUserQueryView.

    All required parameters must be populated in order to send to Azure.

    :ivar items:
    :vartype items: list[~runway.sdk.models.iUserQueryView]
    :ivar filteredcount: Required.
    :vartype filteredcount: long
    :ivar totalcount: Required.
    :vartype totalcount: long
    :ivar selectedcount: Required.
    :vartype selectedcount: long
    """

    _validation = {
        'filteredcount': {'required': True},
        'totalcount': {'required': True},
        'selectedcount': {'required': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[iUserQueryView]'},
        'filteredcount': {'key': 'filteredCount', 'type': 'long'},
        'totalcount': {'key': 'totalCount', 'type': 'long'},
        'selectedcount': {'key': 'selectedCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword items:
        :paramtype items: list[~runway.sdk.models.iUserQueryView]
        :keyword filteredcount: Required.
        :paramtype filteredcount: long
        :keyword totalcount: Required.
        :paramtype totalcount: long
        :keyword selectedcount: Required.
        :paramtype selectedcount: long
        """
        super(queryResponseOfIUserQueryView, self).__init__(**kwargs)
        self.items = kwargs.get('items', None)
        self.filteredcount = kwargs['filteredcount']
        self.totalcount = kwargs['totalcount']
        self.selectedcount = kwargs['selectedcount']


class queryRunnersResponse(msrest.serialization.Model):
    """queryRunnersResponse.

    :ivar runners:
    :vartype runners: list[str]
    """

    _attribute_map = {
        'runners': {'key': 'runners', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runners:
        :paramtype runners: list[str]
        """
        super(queryRunnersResponse, self).__init__(**kwargs)
        self.runners = kwargs.get('runners', None)


class remoteShellDeleteRequest(msrest.serialization.Model):
    """remoteShellDeleteRequest.

    :ivar runnerid:
    :vartype runnerid: str
    :ivar downloadid:
    :vartype downloadid: str
    """

    _attribute_map = {
        'runnerid': {'key': 'runnerId', 'type': 'str'},
        'downloadid': {'key': 'downloadId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runnerid:
        :paramtype runnerid: str
        :keyword downloadid:
        :paramtype downloadid: str
        """
        super(remoteShellDeleteRequest, self).__init__(**kwargs)
        self.runnerid = kwargs.get('runnerid', None)
        self.downloadid = kwargs.get('downloadid', None)


class remoteShellPingRequest(msrest.serialization.Model):
    """remoteShellPingRequest.

    :ivar runnerid:
    :vartype runnerid: str
    :ivar downloadid:
    :vartype downloadid: str
    """

    _attribute_map = {
        'runnerid': {'key': 'runnerId', 'type': 'str'},
        'downloadid': {'key': 'downloadId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runnerid:
        :paramtype runnerid: str
        :keyword downloadid:
        :paramtype downloadid: str
        """
        super(remoteShellPingRequest, self).__init__(**kwargs)
        self.runnerid = kwargs.get('runnerid', None)
        self.downloadid = kwargs.get('downloadid', None)


class remoteShellRequest(msrest.serialization.Model):
    """remoteShellRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar runnerid:
    :vartype runnerid: str
    :ivar executecmd:
    :vartype executecmd: str
    :ivar internalcommand: Required.
    :vartype internalcommand: bool
    """

    _validation = {
        'internalcommand': {'required': True},
    }

    _attribute_map = {
        'runnerid': {'key': 'runnerId', 'type': 'str'},
        'executecmd': {'key': 'executeCmd', 'type': 'str'},
        'internalcommand': {'key': 'internalCommand', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword runnerid:
        :paramtype runnerid: str
        :keyword executecmd:
        :paramtype executecmd: str
        :keyword internalcommand: Required.
        :paramtype internalcommand: bool
        """
        super(remoteShellRequest, self).__init__(**kwargs)
        self.runnerid = kwargs.get('runnerid', None)
        self.executecmd = kwargs.get('executecmd', None)
        self.internalcommand = kwargs['internalcommand']


class resetPasswordRequest(msrest.serialization.Model):
    """resetPasswordRequest.

    :ivar email:
    :vartype email: str
    :ivar oldpassword:
    :vartype oldpassword: str
    :ivar newpassword:
    :vartype newpassword: str
    """

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'oldpassword': {'key': 'oldPassword', 'type': 'str'},
        'newpassword': {'key': 'newPassword', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword email:
        :paramtype email: str
        :keyword oldpassword:
        :paramtype oldpassword: str
        :keyword newpassword:
        :paramtype newpassword: str
        """
        super(resetPasswordRequest, self).__init__(**kwargs)
        self.email = kwargs.get('email', None)
        self.oldpassword = kwargs.get('oldpassword', None)
        self.newpassword = kwargs.get('newpassword', None)


class runwayActor(runwayObject):
    """runwayActor.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar homecontainerid:
    :vartype homecontainerid: str
    :ivar sessions:
    :vartype sessions: list[~runway.sdk.models.runwaySession]
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'homecontainerid': {'key': 'homeContainerId', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[runwaySession]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword homecontainerid:
        :paramtype homecontainerid: str
        :keyword sessions:
        :paramtype sessions: list[~runway.sdk.models.runwaySession]
        """
        super(runwayActor, self).__init__(**kwargs)
        self.homecontainerid = kwargs.get('homecontainerid', None)
        self.sessions = kwargs.get('sessions', None)


class runwayConnection(runwayObject):
    """runwayConnection.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar assignedendpointid:
    :vartype assignedendpointid: str
    :ivar assignedendpointname:
    :vartype assignedendpointname: str
    :ivar actionname:
    :vartype actionname: str
    :ivar runnerid:
    :vartype runnerid: str
    :ivar actionid:
    :vartype actionid: str
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar settings:
    :vartype settings: list[~runway.sdk.models.actionSetting]
    :ivar connectionmetrics:
    :vartype connectionmetrics: list[~runway.sdk.models.runwayConnectionStatistic]
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'ishidden': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'assignedendpointid': {'key': 'assignedEndpointId', 'type': 'str'},
        'assignedendpointname': {'key': 'assignedEndpointName', 'type': 'str'},
        'actionname': {'key': 'actionName', 'type': 'str'},
        'runnerid': {'key': 'runnerId', 'type': 'str'},
        'actionid': {'key': 'actionId', 'type': 'str'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '[actionSetting]'},
        'connectionmetrics': {'key': 'connectionMetrics', 'type': '[runwayConnectionStatistic]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword assignedendpointid:
        :paramtype assignedendpointid: str
        :keyword assignedendpointname:
        :paramtype assignedendpointname: str
        :keyword actionname:
        :paramtype actionname: str
        :keyword runnerid:
        :paramtype runnerid: str
        :keyword actionid:
        :paramtype actionid: str
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword settings:
        :paramtype settings: list[~runway.sdk.models.actionSetting]
        :keyword connectionmetrics:
        :paramtype connectionmetrics: list[~runway.sdk.models.runwayConnectionStatistic]
        """
        super(runwayConnection, self).__init__(**kwargs)
        self.assignedendpointid = kwargs.get('assignedendpointid', None)
        self.assignedendpointname = kwargs.get('assignedendpointname', None)
        self.actionname = kwargs.get('actionname', None)
        self.runnerid = kwargs.get('runnerid', None)
        self.actionid = kwargs.get('actionid', None)
        self.ishidden = kwargs['ishidden']
        self.settings = kwargs.get('settings', None)
        self.connectionmetrics = kwargs.get('connectionmetrics', None)


class runwayStatistic(runwayObject):
    """runwayStatistic.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    :ivar referenceobjectid:
    :vartype referenceobjectid: str
    :ivar statstring:
    :vartype statstring: str
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'timestamp': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'referenceobjectid': {'key': 'referenceObjectId', 'type': 'str'},
        'statstring': {'key': 'statString', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        :keyword referenceobjectid:
        :paramtype referenceobjectid: str
        :keyword statstring:
        :paramtype statstring: str
        """
        super(runwayStatistic, self).__init__(**kwargs)
        self.timestamp = kwargs['timestamp']
        self.referenceobjectid = kwargs.get('referenceobjectid', None)
        self.statstring = kwargs.get('statstring', None)


class runwayConnectionStatistic(runwayStatistic):
    """runwayConnectionStatistic.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    :ivar referenceobjectid:
    :vartype referenceobjectid: str
    :ivar statstring:
    :vartype statstring: str
    :ivar transferredbytes: Required.
    :vartype transferredbytes: long
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'timestamp': {'required': True},
        'transferredbytes': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'referenceobjectid': {'key': 'referenceObjectId', 'type': 'str'},
        'statstring': {'key': 'statString', 'type': 'str'},
        'transferredbytes': {'key': 'transferredBytes', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        :keyword referenceobjectid:
        :paramtype referenceobjectid: str
        :keyword statstring:
        :paramtype statstring: str
        :keyword transferredbytes: Required.
        :paramtype transferredbytes: long
        """
        super(runwayConnectionStatistic, self).__init__(**kwargs)
        self.transferredbytes = kwargs['transferredbytes']


class runwayGroup(runwayObject):
    """runwayGroup.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar homeforuserid:
    :vartype homeforuserid: str
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar portraiturl:
    :vartype portraiturl: str
    :ivar parentids:
    :vartype parentids: list[str]
    :ivar licensesallocated: Required.
    :vartype licensesallocated: int
    :ivar licensesinuse: Required.
    :vartype licensesinuse: int
    :ivar licenseexpiration: Required.
    :vartype licenseexpiration: ~datetime.datetime
    :ivar cancreatetenants: Required.
    :vartype cancreatetenants: bool
    :ivar parentlicensecontainerid:
    :vartype parentlicensecontainerid: str
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'ishidden': {'required': True},
        'licensesallocated': {'required': True},
        'licensesinuse': {'required': True},
        'licenseexpiration': {'required': True},
        'cancreatetenants': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'homeforuserid': {'key': 'homeForUserId', 'type': 'str'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
        'parentids': {'key': 'parentIds', 'type': '[str]'},
        'licensesallocated': {'key': 'licensesAllocated', 'type': 'int'},
        'licensesinuse': {'key': 'licensesInUse', 'type': 'int'},
        'licenseexpiration': {'key': 'licenseExpiration', 'type': 'iso-8601'},
        'cancreatetenants': {'key': 'canCreateTenants', 'type': 'bool'},
        'parentlicensecontainerid': {'key': 'parentLicenseContainerId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword homeforuserid:
        :paramtype homeforuserid: str
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword portraiturl:
        :paramtype portraiturl: str
        :keyword parentids:
        :paramtype parentids: list[str]
        :keyword licensesallocated: Required.
        :paramtype licensesallocated: int
        :keyword licensesinuse: Required.
        :paramtype licensesinuse: int
        :keyword licenseexpiration: Required.
        :paramtype licenseexpiration: ~datetime.datetime
        :keyword cancreatetenants: Required.
        :paramtype cancreatetenants: bool
        :keyword parentlicensecontainerid:
        :paramtype parentlicensecontainerid: str
        """
        super(runwayGroup, self).__init__(**kwargs)
        self.homeforuserid = kwargs.get('homeforuserid', None)
        self.ishidden = kwargs['ishidden']
        self.portraiturl = kwargs.get('portraiturl', None)
        self.parentids = kwargs.get('parentids', None)
        self.licensesallocated = kwargs['licensesallocated']
        self.licensesinuse = kwargs['licensesinuse']
        self.licenseexpiration = kwargs['licenseexpiration']
        self.cancreatetenants = kwargs['cancreatetenants']
        self.parentlicensecontainerid = kwargs.get('parentlicensecontainerid', None)


class runwayInvitation(runwayObject):
    """runwayInvitation.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar actorid:
    :vartype actorid: str
    :ivar actorname:
    :vartype actorname: str
    :ivar emailaddress:
    :vartype emailaddress: str
    :ivar username:
    :vartype username: str
    :ivar groupid:
    :vartype groupid: str
    :ivar roleid:
    :vartype roleid: str
    :ivar rolename:
    :vartype rolename: str
    :ivar groupname:
    :vartype groupname: str
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'actorid': {'key': 'actorId', 'type': 'str'},
        'actorname': {'key': 'actorName', 'type': 'str'},
        'emailaddress': {'key': 'emailAddress', 'type': 'str'},
        'username': {'key': 'userName', 'type': 'str'},
        'groupid': {'key': 'groupId', 'type': 'str'},
        'roleid': {'key': 'roleId', 'type': 'str'},
        'rolename': {'key': 'roleName', 'type': 'str'},
        'groupname': {'key': 'groupName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword actorid:
        :paramtype actorid: str
        :keyword actorname:
        :paramtype actorname: str
        :keyword emailaddress:
        :paramtype emailaddress: str
        :keyword username:
        :paramtype username: str
        :keyword groupid:
        :paramtype groupid: str
        :keyword roleid:
        :paramtype roleid: str
        :keyword rolename:
        :paramtype rolename: str
        :keyword groupname:
        :paramtype groupname: str
        """
        super(runwayInvitation, self).__init__(**kwargs)
        self.actorid = kwargs.get('actorid', None)
        self.actorname = kwargs.get('actorname', None)
        self.emailaddress = kwargs.get('emailaddress', None)
        self.username = kwargs.get('username', None)
        self.groupid = kwargs.get('groupid', None)
        self.roleid = kwargs.get('roleid', None)
        self.rolename = kwargs.get('rolename', None)
        self.groupname = kwargs.get('groupname', None)


class runwayJob(runwayObject):
    """runwayJob.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar isenabled: Required.
    :vartype isenabled: bool
    :ivar actions:
    :vartype actions: list[~runway.sdk.models.actionInstance]
    :ivar startingactionid:
    :vartype startingactionid: str
    :ivar schedule:
    :vartype schedule: ~runway.sdk.models.jobSchedule
    :ivar endpointsetid:
    :vartype endpointsetid: str
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar jobmetrics:
    :vartype jobmetrics: list[~runway.sdk.models.runwayJobStatistic]
    :ivar totalendpointsfinished: Required.
    :vartype totalendpointsfinished: int
    :ivar totalendpointsfinishederrors: Required.
    :vartype totalendpointsfinishederrors: int
    :ivar totalendpointsrunning: Required.
    :vartype totalendpointsrunning: int
    :ivar totalendpointsassigned: Required.
    :vartype totalendpointsassigned: int
    :ivar lastthread:
    :vartype lastthread: ~runway.sdk.models.runwayJobThread
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'isenabled': {'required': True},
        'ishidden': {'required': True},
        'totalendpointsfinished': {'required': True},
        'totalendpointsfinishederrors': {'required': True},
        'totalendpointsrunning': {'required': True},
        'totalendpointsassigned': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'isenabled': {'key': 'isEnabled', 'type': 'bool'},
        'actions': {'key': 'actions', 'type': '[actionInstance]'},
        'startingactionid': {'key': 'startingActionId', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'jobSchedule'},
        'endpointsetid': {'key': 'endpointSetId', 'type': 'str'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'jobmetrics': {'key': 'jobMetrics', 'type': '[runwayJobStatistic]'},
        'totalendpointsfinished': {'key': 'totalEndpointsFinished', 'type': 'int'},
        'totalendpointsfinishederrors': {'key': 'totalEndpointsFinishedErrors', 'type': 'int'},
        'totalendpointsrunning': {'key': 'totalEndpointsRunning', 'type': 'int'},
        'totalendpointsassigned': {'key': 'totalEndpointsAssigned', 'type': 'int'},
        'lastthread': {'key': 'lastThread', 'type': 'runwayJobThread'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword isenabled: Required.
        :paramtype isenabled: bool
        :keyword actions:
        :paramtype actions: list[~runway.sdk.models.actionInstance]
        :keyword startingactionid:
        :paramtype startingactionid: str
        :keyword schedule:
        :paramtype schedule: ~runway.sdk.models.jobSchedule
        :keyword endpointsetid:
        :paramtype endpointsetid: str
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword jobmetrics:
        :paramtype jobmetrics: list[~runway.sdk.models.runwayJobStatistic]
        :keyword totalendpointsfinished: Required.
        :paramtype totalendpointsfinished: int
        :keyword totalendpointsfinishederrors: Required.
        :paramtype totalendpointsfinishederrors: int
        :keyword totalendpointsrunning: Required.
        :paramtype totalendpointsrunning: int
        :keyword totalendpointsassigned: Required.
        :paramtype totalendpointsassigned: int
        :keyword lastthread:
        :paramtype lastthread: ~runway.sdk.models.runwayJobThread
        """
        super(runwayJob, self).__init__(**kwargs)
        self.isenabled = kwargs['isenabled']
        self.actions = kwargs.get('actions', None)
        self.startingactionid = kwargs.get('startingactionid', None)
        self.schedule = kwargs.get('schedule', None)
        self.endpointsetid = kwargs.get('endpointsetid', None)
        self.ishidden = kwargs['ishidden']
        self.jobmetrics = kwargs.get('jobmetrics', None)
        self.totalendpointsfinished = kwargs['totalendpointsfinished']
        self.totalendpointsfinishederrors = kwargs['totalendpointsfinishederrors']
        self.totalendpointsrunning = kwargs['totalendpointsrunning']
        self.totalendpointsassigned = kwargs['totalendpointsassigned']
        self.lastthread = kwargs.get('lastthread', None)


class runwayJobStatistic(runwayStatistic):
    """runwayJobStatistic.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar timestamp: Required.
    :vartype timestamp: ~datetime.datetime
    :ivar referenceobjectid:
    :vartype referenceobjectid: str
    :ivar statstring:
    :vartype statstring: str
    :ivar jobid:
    :vartype jobid: str
    :ivar numspawned: Required.
    :vartype numspawned: long
    :ivar numrunning: Required.
    :vartype numrunning: long
    :ivar numfinished: Required.
    :vartype numfinished: long
    :ivar numerrors: Required.
    :vartype numerrors: long
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'timestamp': {'required': True},
        'numspawned': {'required': True},
        'numrunning': {'required': True},
        'numfinished': {'required': True},
        'numerrors': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'referenceobjectid': {'key': 'referenceObjectId', 'type': 'str'},
        'statstring': {'key': 'statString', 'type': 'str'},
        'jobid': {'key': 'jobId', 'type': 'str'},
        'numspawned': {'key': 'numSpawned', 'type': 'long'},
        'numrunning': {'key': 'numRunning', 'type': 'long'},
        'numfinished': {'key': 'numFinished', 'type': 'long'},
        'numerrors': {'key': 'numErrors', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword timestamp: Required.
        :paramtype timestamp: ~datetime.datetime
        :keyword referenceobjectid:
        :paramtype referenceobjectid: str
        :keyword statstring:
        :paramtype statstring: str
        :keyword jobid:
        :paramtype jobid: str
        :keyword numspawned: Required.
        :paramtype numspawned: long
        :keyword numrunning: Required.
        :paramtype numrunning: long
        :keyword numfinished: Required.
        :paramtype numfinished: long
        :keyword numerrors: Required.
        :paramtype numerrors: long
        """
        super(runwayJobStatistic, self).__init__(**kwargs)
        self.jobid = kwargs.get('jobid', None)
        self.numspawned = kwargs['numspawned']
        self.numrunning = kwargs['numrunning']
        self.numfinished = kwargs['numfinished']
        self.numerrors = kwargs['numerrors']


class runwayJobThread(runwayObject):
    """runwayJobThread.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar sourcejobid:
    :vartype sourcejobid: str
    :ivar prodigalobjectid:
    :vartype prodigalobjectid: str
    :ivar startingactionid:
    :vartype startingactionid: str
    :ivar currentrunnerid:
    :vartype currentrunnerid: str
    :ivar currentactionid:
    :vartype currentactionid: str
    :ivar finalresult: Required. Possible values include: "Uninitialized", "Success", "Failure".
    :vartype finalresult: str or ~runway.sdk.models.stepResult
    :ivar threadstate: Required. Possible values include: "Uninitialized", "NotStarted", "Running",
     "Waiting", "Finished".
    :vartype threadstate: str or ~runway.sdk.models.jobThreadState
    :ivar laststepresult: Required. Possible values include: "Uninitialized", "Success", "Failure".
    :vartype laststepresult: str or ~runway.sdk.models.stepResult
    :ivar specificplacementid:
    :vartype specificplacementid: str
    :ivar runon: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
     "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
    :vartype runon: str or ~runway.sdk.models.runLocation
    :ivar placementnamespaceaffinity:
    :vartype placementnamespaceaffinity: str
    :ivar placementpodaffinity:
    :vartype placementpodaffinity: str
    :ivar actions:
    :vartype actions: list[~runway.sdk.models.actionInstance]
    :ivar nodestephistory:
    :vartype nodestephistory: list[str]
    :ivar lastruntime: Required.
    :vartype lastruntime: ~datetime.datetime
    :ivar prodigalobject:
    :vartype prodigalobject: ~runway.sdk.models.runwayEndpointAsset
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'finalresult': {'required': True},
        'threadstate': {'required': True},
        'laststepresult': {'required': True},
        'runon': {'required': True},
        'lastruntime': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'sourcejobid': {'key': 'sourceJobId', 'type': 'str'},
        'prodigalobjectid': {'key': 'prodigalObjectId', 'type': 'str'},
        'startingactionid': {'key': 'startingActionId', 'type': 'str'},
        'currentrunnerid': {'key': 'currentRunnerId', 'type': 'str'},
        'currentactionid': {'key': 'currentActionId', 'type': 'str'},
        'finalresult': {'key': 'finalResult', 'type': 'str'},
        'threadstate': {'key': 'threadState', 'type': 'str'},
        'laststepresult': {'key': 'lastStepResult', 'type': 'str'},
        'specificplacementid': {'key': 'specificPlacementId', 'type': 'str'},
        'runon': {'key': 'runOn', 'type': 'str'},
        'placementnamespaceaffinity': {'key': 'placementNamespaceAffinity', 'type': 'str'},
        'placementpodaffinity': {'key': 'placementPodAffinity', 'type': 'str'},
        'actions': {'key': 'actions', 'type': '[actionInstance]'},
        'nodestephistory': {'key': 'nodeStepHistory', 'type': '[str]'},
        'lastruntime': {'key': 'lastRunTime', 'type': 'iso-8601'},
        'prodigalobject': {'key': 'prodigalObject', 'type': 'runwayEndpointAsset'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword sourcejobid:
        :paramtype sourcejobid: str
        :keyword prodigalobjectid:
        :paramtype prodigalobjectid: str
        :keyword startingactionid:
        :paramtype startingactionid: str
        :keyword currentrunnerid:
        :paramtype currentrunnerid: str
        :keyword currentactionid:
        :paramtype currentactionid: str
        :keyword finalresult: Required. Possible values include: "Uninitialized", "Success", "Failure".
        :paramtype finalresult: str or ~runway.sdk.models.stepResult
        :keyword threadstate: Required. Possible values include: "Uninitialized", "NotStarted",
         "Running", "Waiting", "Finished".
        :paramtype threadstate: str or ~runway.sdk.models.jobThreadState
        :keyword laststepresult: Required. Possible values include: "Uninitialized", "Success",
         "Failure".
        :paramtype laststepresult: str or ~runway.sdk.models.stepResult
        :keyword specificplacementid:
        :paramtype specificplacementid: str
        :keyword runon: Required. Possible values include: "Uninitialized", "RunOnProdigalObject",
         "RunOnGenericPool", "RunOnSpecificObject", "RunOnDedicatedService", "RunOnConnection".
        :paramtype runon: str or ~runway.sdk.models.runLocation
        :keyword placementnamespaceaffinity:
        :paramtype placementnamespaceaffinity: str
        :keyword placementpodaffinity:
        :paramtype placementpodaffinity: str
        :keyword actions:
        :paramtype actions: list[~runway.sdk.models.actionInstance]
        :keyword nodestephistory:
        :paramtype nodestephistory: list[str]
        :keyword lastruntime: Required.
        :paramtype lastruntime: ~datetime.datetime
        :keyword prodigalobject:
        :paramtype prodigalobject: ~runway.sdk.models.runwayEndpointAsset
        """
        super(runwayJobThread, self).__init__(**kwargs)
        self.sourcejobid = kwargs.get('sourcejobid', None)
        self.prodigalobjectid = kwargs.get('prodigalobjectid', None)
        self.startingactionid = kwargs.get('startingactionid', None)
        self.currentrunnerid = kwargs.get('currentrunnerid', None)
        self.currentactionid = kwargs.get('currentactionid', None)
        self.finalresult = kwargs['finalresult']
        self.threadstate = kwargs['threadstate']
        self.laststepresult = kwargs['laststepresult']
        self.specificplacementid = kwargs.get('specificplacementid', None)
        self.runon = kwargs['runon']
        self.placementnamespaceaffinity = kwargs.get('placementnamespaceaffinity', None)
        self.placementpodaffinity = kwargs.get('placementpodaffinity', None)
        self.actions = kwargs.get('actions', None)
        self.nodestephistory = kwargs.get('nodestephistory', None)
        self.lastruntime = kwargs['lastruntime']
        self.prodigalobject = kwargs.get('prodigalobject', None)


class runwayKubernetesEndpoint(msrest.serialization.Model):
    """runwayKubernetesEndpoint.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    :ivar ipaddress:
    :vartype ipaddress: str
    :ivar nodename:
    :vartype nodename: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'ipaddress': {'key': 'ipAddress', 'type': 'str'},
        'nodename': {'key': 'nodeName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        :keyword ipaddress:
        :paramtype ipaddress: str
        :keyword nodename:
        :paramtype nodename: str
        """
        super(runwayKubernetesEndpoint, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.namespace = kwargs.get('namespace', None)
        self.ipaddress = kwargs.get('ipaddress', None)
        self.nodename = kwargs.get('nodename', None)


class runwayNode(runwayObject):
    """runwayNode.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar targetid:
    :vartype targetid: str
    :ivar nodestate: Required. Possible values include: "NotEnrolled", "Enrolled".
    :vartype nodestate: str or ~runway.sdk.models.nodeState
    :ivar iswebsocketconnected: Required.
    :vartype iswebsocketconnected: bool
    :ivar lastcheckintime: Required.
    :vartype lastcheckintime: ~datetime.datetime
    :ivar deleteafter: Required.
    :vartype deleteafter: str
    :ivar ispendingdissolve: Required.
    :vartype ispendingdissolve: bool
    :ivar affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
     "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype affinity: str or ~runway.sdk.models.nodeAffinity
    :ivar podname:
    :vartype podname: str
    :ivar clusternamespace:
    :vartype clusternamespace: str
    :ivar containerimagename:
    :vartype containerimagename: str
    :ivar assetid:
    :vartype assetid: str
    :ivar assetname:
    :vartype assetname: str
    :ivar sessions:
    :vartype sessions: list[~runway.sdk.models.runwaySession]
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'nodestate': {'required': True},
        'iswebsocketconnected': {'required': True},
        'lastcheckintime': {'required': True},
        'deleteafter': {'required': True},
        'ispendingdissolve': {'required': True},
        'affinity': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'targetid': {'key': 'targetId', 'type': 'str'},
        'nodestate': {'key': 'nodeState', 'type': 'str'},
        'iswebsocketconnected': {'key': 'isWebSocketConnected', 'type': 'bool'},
        'lastcheckintime': {'key': 'lastCheckinTime', 'type': 'iso-8601'},
        'deleteafter': {'key': 'deleteAfter', 'type': 'str'},
        'ispendingdissolve': {'key': 'isPendingDissolve', 'type': 'bool'},
        'affinity': {'key': 'affinity', 'type': 'str'},
        'podname': {'key': 'podName', 'type': 'str'},
        'clusternamespace': {'key': 'clusterNamespace', 'type': 'str'},
        'containerimagename': {'key': 'containerImageName', 'type': 'str'},
        'assetid': {'key': 'assetId', 'type': 'str'},
        'assetname': {'key': 'assetName', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[runwaySession]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword targetid:
        :paramtype targetid: str
        :keyword nodestate: Required. Possible values include: "NotEnrolled", "Enrolled".
        :paramtype nodestate: str or ~runway.sdk.models.nodeState
        :keyword iswebsocketconnected: Required.
        :paramtype iswebsocketconnected: bool
        :keyword lastcheckintime: Required.
        :paramtype lastcheckintime: ~datetime.datetime
        :keyword deleteafter: Required.
        :paramtype deleteafter: str
        :keyword ispendingdissolve: Required.
        :paramtype ispendingdissolve: bool
        :keyword affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
         "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype affinity: str or ~runway.sdk.models.nodeAffinity
        :keyword podname:
        :paramtype podname: str
        :keyword clusternamespace:
        :paramtype clusternamespace: str
        :keyword containerimagename:
        :paramtype containerimagename: str
        :keyword assetid:
        :paramtype assetid: str
        :keyword assetname:
        :paramtype assetname: str
        :keyword sessions:
        :paramtype sessions: list[~runway.sdk.models.runwaySession]
        """
        super(runwayNode, self).__init__(**kwargs)
        self.targetid = kwargs.get('targetid', None)
        self.nodestate = kwargs['nodestate']
        self.iswebsocketconnected = kwargs['iswebsocketconnected']
        self.lastcheckintime = kwargs['lastcheckintime']
        self.deleteafter = kwargs['deleteafter']
        self.ispendingdissolve = kwargs['ispendingdissolve']
        self.affinity = kwargs['affinity']
        self.podname = kwargs.get('podname', None)
        self.clusternamespace = kwargs.get('clusternamespace', None)
        self.containerimagename = kwargs.get('containerimagename', None)
        self.assetid = kwargs.get('assetid', None)
        self.assetname = kwargs.get('assetname', None)
        self.sessions = kwargs.get('sessions', None)


class runwayRepositoryItem(runwayObject):
    """runwayRepositoryItem.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar desiredsettings:
    :vartype desiredsettings: list[~runway.sdk.models.actionSetting]
    :ivar glyph:
    :vartype glyph: str
    :ivar author:
    :vartype author: str
    :ivar language:
    :vartype language: str
    :ivar isconnectionrequired: Required.
    :vartype isconnectionrequired: bool
    :ivar license: Required. Possible values include: "Free", "Paid".
    :vartype license: str or ~runway.sdk.models.repositoryLicense
    :ivar scope: Required. Possible values include: "Private", "Public".
    :vartype scope: str or ~runway.sdk.models.repositoryScope
    :ivar input:
    :vartype input: str
    :ivar output:
    :vartype output: str
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'isconnectionrequired': {'required': True},
        'license': {'required': True},
        'scope': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'desiredsettings': {'key': 'desiredSettings', 'type': '[actionSetting]'},
        'glyph': {'key': 'glyph', 'type': 'str'},
        'author': {'key': 'author', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'isconnectionrequired': {'key': 'isConnectionRequired', 'type': 'bool'},
        'license': {'key': 'license', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'input': {'key': 'input', 'type': 'str'},
        'output': {'key': 'output', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword desiredsettings:
        :paramtype desiredsettings: list[~runway.sdk.models.actionSetting]
        :keyword glyph:
        :paramtype glyph: str
        :keyword author:
        :paramtype author: str
        :keyword language:
        :paramtype language: str
        :keyword isconnectionrequired: Required.
        :paramtype isconnectionrequired: bool
        :keyword license: Required. Possible values include: "Free", "Paid".
        :paramtype license: str or ~runway.sdk.models.repositoryLicense
        :keyword scope: Required. Possible values include: "Private", "Public".
        :paramtype scope: str or ~runway.sdk.models.repositoryScope
        :keyword input:
        :paramtype input: str
        :keyword output:
        :paramtype output: str
        """
        super(runwayRepositoryItem, self).__init__(**kwargs)
        self.desiredsettings = kwargs.get('desiredsettings', None)
        self.glyph = kwargs.get('glyph', None)
        self.author = kwargs.get('author', None)
        self.language = kwargs.get('language', None)
        self.isconnectionrequired = kwargs['isconnectionrequired']
        self.license = kwargs['license']
        self.scope = kwargs['scope']
        self.input = kwargs.get('input', None)
        self.output = kwargs.get('output', None)


class runwayRole(runwayObject):
    """runwayRole.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar groupid:
    :vartype groupid: str
    :ivar permissions:
    :vartype permissions: list[~runway.sdk.models.runwayRoleAccess]
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'groupid': {'key': 'groupId', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': '[runwayRoleAccess]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword groupid:
        :paramtype groupid: str
        :keyword permissions:
        :paramtype permissions: list[~runway.sdk.models.runwayRoleAccess]
        """
        super(runwayRole, self).__init__(**kwargs)
        self.groupid = kwargs.get('groupid', None)
        self.permissions = kwargs.get('permissions', None)


class runwayRoleAccess(msrest.serialization.Model):
    """runwayRoleAccess.

    All required parameters must be populated in order to send to Azure.

    :ivar typename:
    :vartype typename: str
    :ivar accessflags: Required. Possible values include: "Read", "Create", "Update", "Delete",
     "Remote", "Execute", "Admin", "SuperAdmin".
    :vartype accessflags: str or ~runway.sdk.models.accessFlags
    """

    _validation = {
        'accessflags': {'required': True},
    }

    _attribute_map = {
        'typename': {'key': 'typeName', 'type': 'str'},
        'accessflags': {'key': 'accessFlags', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword typename:
        :paramtype typename: str
        :keyword accessflags: Required. Possible values include: "Read", "Create", "Update", "Delete",
         "Remote", "Execute", "Admin", "SuperAdmin".
        :paramtype accessflags: str or ~runway.sdk.models.accessFlags
        """
        super(runwayRoleAccess, self).__init__(**kwargs)
        self.typename = kwargs.get('typename', None)
        self.accessflags = kwargs['accessflags']


class runwayRunner(runwayNode):
    """runwayRunner.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar targetid:
    :vartype targetid: str
    :ivar nodestate: Required. Possible values include: "NotEnrolled", "Enrolled".
    :vartype nodestate: str or ~runway.sdk.models.nodeState
    :ivar iswebsocketconnected: Required.
    :vartype iswebsocketconnected: bool
    :ivar lastcheckintime: Required.
    :vartype lastcheckintime: ~datetime.datetime
    :ivar deleteafter: Required.
    :vartype deleteafter: str
    :ivar ispendingdissolve: Required.
    :vartype ispendingdissolve: bool
    :ivar affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
     "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
    :vartype affinity: str or ~runway.sdk.models.nodeAffinity
    :ivar podname:
    :vartype podname: str
    :ivar clusternamespace:
    :vartype clusternamespace: str
    :ivar containerimagename:
    :vartype containerimagename: str
    :ivar assetid:
    :vartype assetid: str
    :ivar assetname:
    :vartype assetname: str
    :ivar sessions:
    :vartype sessions: list[~runway.sdk.models.runwaySession]
    :ivar isactive: Required.
    :vartype isactive: bool
    :ivar parentlicensecontainerid:
    :vartype parentlicensecontainerid: str
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'nodestate': {'required': True},
        'iswebsocketconnected': {'required': True},
        'lastcheckintime': {'required': True},
        'deleteafter': {'required': True},
        'ispendingdissolve': {'required': True},
        'affinity': {'required': True},
        'isactive': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'targetid': {'key': 'targetId', 'type': 'str'},
        'nodestate': {'key': 'nodeState', 'type': 'str'},
        'iswebsocketconnected': {'key': 'isWebSocketConnected', 'type': 'bool'},
        'lastcheckintime': {'key': 'lastCheckinTime', 'type': 'iso-8601'},
        'deleteafter': {'key': 'deleteAfter', 'type': 'str'},
        'ispendingdissolve': {'key': 'isPendingDissolve', 'type': 'bool'},
        'affinity': {'key': 'affinity', 'type': 'str'},
        'podname': {'key': 'podName', 'type': 'str'},
        'clusternamespace': {'key': 'clusterNamespace', 'type': 'str'},
        'containerimagename': {'key': 'containerImageName', 'type': 'str'},
        'assetid': {'key': 'assetId', 'type': 'str'},
        'assetname': {'key': 'assetName', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[runwaySession]'},
        'isactive': {'key': 'isActive', 'type': 'bool'},
        'parentlicensecontainerid': {'key': 'parentLicenseContainerId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword targetid:
        :paramtype targetid: str
        :keyword nodestate: Required. Possible values include: "NotEnrolled", "Enrolled".
        :paramtype nodestate: str or ~runway.sdk.models.nodeState
        :keyword iswebsocketconnected: Required.
        :paramtype iswebsocketconnected: bool
        :keyword lastcheckintime: Required.
        :paramtype lastcheckintime: ~datetime.datetime
        :keyword deleteafter: Required.
        :paramtype deleteafter: str
        :keyword ispendingdissolve: Required.
        :paramtype ispendingdissolve: bool
        :keyword affinity: Required. Possible values include: "EphemeralContainer", "PersistentRunner",
         "CloudWorker", "PersistentCloud", "Utility", "KubeMasterAgentless".
        :paramtype affinity: str or ~runway.sdk.models.nodeAffinity
        :keyword podname:
        :paramtype podname: str
        :keyword clusternamespace:
        :paramtype clusternamespace: str
        :keyword containerimagename:
        :paramtype containerimagename: str
        :keyword assetid:
        :paramtype assetid: str
        :keyword assetname:
        :paramtype assetname: str
        :keyword sessions:
        :paramtype sessions: list[~runway.sdk.models.runwaySession]
        :keyword isactive: Required.
        :paramtype isactive: bool
        :keyword parentlicensecontainerid:
        :paramtype parentlicensecontainerid: str
        """
        super(runwayRunner, self).__init__(**kwargs)
        self.isactive = kwargs['isactive']
        self.parentlicensecontainerid = kwargs.get('parentlicensecontainerid', None)


class runwaySession(runwayObject):
    """runwaySession.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar actorid:
    :vartype actorid: str
    :ivar nodeid:
    :vartype nodeid: str
    :ivar sessiontoken:
    :vartype sessiontoken: str
    :ivar socketconnectionid:
    :vartype socketconnectionid: str
    :ivar instancename:
    :vartype instancename: str
    :ivar expiration: Required.
    :vartype expiration: ~datetime.datetime
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'expiration': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'actorid': {'key': 'actorId', 'type': 'str'},
        'nodeid': {'key': 'nodeId', 'type': 'str'},
        'sessiontoken': {'key': 'sessionToken', 'type': 'str'},
        'socketconnectionid': {'key': 'socketConnectionId', 'type': 'str'},
        'instancename': {'key': 'instanceName', 'type': 'str'},
        'expiration': {'key': 'expiration', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword actorid:
        :paramtype actorid: str
        :keyword nodeid:
        :paramtype nodeid: str
        :keyword sessiontoken:
        :paramtype sessiontoken: str
        :keyword socketconnectionid:
        :paramtype socketconnectionid: str
        :keyword instancename:
        :paramtype instancename: str
        :keyword expiration: Required.
        :paramtype expiration: ~datetime.datetime
        """
        super(runwaySession, self).__init__(**kwargs)
        self.actorid = kwargs.get('actorid', None)
        self.nodeid = kwargs.get('nodeid', None)
        self.sessiontoken = kwargs.get('sessiontoken', None)
        self.socketconnectionid = kwargs.get('socketconnectionid', None)
        self.instancename = kwargs.get('instancename', None)
        self.expiration = kwargs['expiration']


class runwayUser(runwayActor):
    """runwayUser.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
    :vartype id: str
    :ivar revision: Required.
    :vartype revision: int
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    :ivar groups:
    :vartype groups: list[str]
    :ivar isselected: Required.
    :vartype isselected: bool
    :ivar homecontainerid:
    :vartype homecontainerid: str
    :ivar sessions:
    :vartype sessions: list[~runway.sdk.models.runwaySession]
    :ivar emailaddress:
    :vartype emailaddress: str
    :ivar company:
    :vartype company: str
    :ivar phone:
    :vartype phone: str
    :ivar expires: Required.
    :vartype expires: ~datetime.datetime
    :ivar ispending: Required.
    :vartype ispending: bool
    :ivar forcepasswordreset: Required.
    :vartype forcepasswordreset: bool
    :ivar portraiturl:
    :vartype portraiturl: str
    """

    _validation = {
        'revision': {'required': True},
        'isselected': {'required': True},
        'expires': {'required': True},
        'ispending': {'required': True},
        'forcepasswordreset': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'revision': {'key': 'revision', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'groups': {'key': 'groups', 'type': '[str]'},
        'isselected': {'key': 'isSelected', 'type': 'bool'},
        'homecontainerid': {'key': 'homeContainerId', 'type': 'str'},
        'sessions': {'key': 'sessions', 'type': '[runwaySession]'},
        'emailaddress': {'key': 'emailAddress', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'expires': {'key': 'expires', 'type': 'iso-8601'},
        'ispending': {'key': 'isPending', 'type': 'bool'},
        'forcepasswordreset': {'key': 'forcePasswordReset', 'type': 'bool'},
        'portraiturl': {'key': 'portraitUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword revision: Required.
        :paramtype revision: int
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        :keyword groups:
        :paramtype groups: list[str]
        :keyword isselected: Required.
        :paramtype isselected: bool
        :keyword homecontainerid:
        :paramtype homecontainerid: str
        :keyword sessions:
        :paramtype sessions: list[~runway.sdk.models.runwaySession]
        :keyword emailaddress:
        :paramtype emailaddress: str
        :keyword company:
        :paramtype company: str
        :keyword phone:
        :paramtype phone: str
        :keyword expires: Required.
        :paramtype expires: ~datetime.datetime
        :keyword ispending: Required.
        :paramtype ispending: bool
        :keyword forcepasswordreset: Required.
        :paramtype forcepasswordreset: bool
        :keyword portraiturl:
        :paramtype portraiturl: str
        """
        super(runwayUser, self).__init__(**kwargs)
        self.emailaddress = kwargs.get('emailaddress', None)
        self.company = kwargs.get('company', None)
        self.phone = kwargs.get('phone', None)
        self.expires = kwargs['expires']
        self.ispending = kwargs['ispending']
        self.forcepasswordreset = kwargs['forcepasswordreset']
        self.portraiturl = kwargs.get('portraiturl', None)


class signupRequest(msrest.serialization.Model):
    """signupRequest.

    :ivar emailaddress:
    :vartype emailaddress: str
    :ivar password:
    :vartype password: str
    :ivar name:
    :vartype name: str
    :ivar phone:
    :vartype phone: str
    :ivar company:
    :vartype company: str
    :ivar captcha:
    :vartype captcha: str
    """

    _attribute_map = {
        'emailaddress': {'key': 'emailAddress', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'company': {'key': 'company', 'type': 'str'},
        'captcha': {'key': 'captcha', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword emailaddress:
        :paramtype emailaddress: str
        :keyword password:
        :paramtype password: str
        :keyword name:
        :paramtype name: str
        :keyword phone:
        :paramtype phone: str
        :keyword company:
        :paramtype company: str
        :keyword captcha:
        :paramtype captcha: str
        """
        super(signupRequest, self).__init__(**kwargs)
        self.emailaddress = kwargs.get('emailaddress', None)
        self.password = kwargs.get('password', None)
        self.name = kwargs.get('name', None)
        self.phone = kwargs.get('phone', None)
        self.company = kwargs.get('company', None)
        self.captcha = kwargs.get('captcha', None)


class stepThreadRequest(msrest.serialization.Model):
    """stepThreadRequest.

    :ivar threadid:
    :vartype threadid: str
    :ivar result:
    :vartype result: str
    :ivar stdoutblobid:
    :vartype stdoutblobid: str
    :ivar resultfilename:
    :vartype resultfilename: str
    :ivar resultfilesize:
    :vartype resultfilesize: str
    """

    _attribute_map = {
        'threadid': {'key': 'threadId', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
        'stdoutblobid': {'key': 'stdOutBlobId', 'type': 'str'},
        'resultfilename': {'key': 'resultFilename', 'type': 'str'},
        'resultfilesize': {'key': 'resultFileSize', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword threadid:
        :paramtype threadid: str
        :keyword result:
        :paramtype result: str
        :keyword stdoutblobid:
        :paramtype stdoutblobid: str
        :keyword resultfilename:
        :paramtype resultfilename: str
        :keyword resultfilesize:
        :paramtype resultfilesize: str
        """
        super(stepThreadRequest, self).__init__(**kwargs)
        self.threadid = kwargs.get('threadid', None)
        self.result = kwargs.get('result', None)
        self.stdoutblobid = kwargs.get('stdoutblobid', None)
        self.resultfilename = kwargs.get('resultfilename', None)
        self.resultfilesize = kwargs.get('resultfilesize', None)


class tagRequest(msrest.serialization.Model):
    """tagRequest.

    :ivar setid:
    :vartype setid: str
    :ivar tags: A set of tags.
    :vartype tags: list[str]
    """

    _attribute_map = {
        'setid': {'key': 'setId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword setid:
        :paramtype setid: str
        :keyword tags: A set of tags.
        :paramtype tags: list[str]
        """
        super(tagRequest, self).__init__(**kwargs)
        self.setid = kwargs.get('setid', None)
        self.tags = kwargs.get('tags', None)


class tagView(msrest.serialization.Model):
    """tagView.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar count: Required.
    :vartype count: long
    """

    _validation = {
        'count': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword count: Required.
        :paramtype count: long
        """
        super(tagView, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.count = kwargs['count']


class threadView(msrest.serialization.Model):
    """threadView.

    :ivar prodigalobjectid:
    :vartype prodigalobjectid: str
    :ivar prodigalassetname:
    :vartype prodigalassetname: str
    :ivar actioninstanceid:
    :vartype actioninstanceid: str
    :ivar repositoryactionid:
    :vartype repositoryactionid: str
    :ivar jobid:
    :vartype jobid: str
    :ivar threadid:
    :vartype threadid: str
    :ivar connectionid:
    :vartype connectionid: str
    :ivar connectionname:
    :vartype connectionname: str
    :ivar connectionstring:
    :vartype connectionstring: str
    :ivar settings:
    :vartype settings: list[~runway.sdk.models.actionSetting]
    """

    _attribute_map = {
        'prodigalobjectid': {'key': 'prodigalObjectId', 'type': 'str'},
        'prodigalassetname': {'key': 'prodigalAssetName', 'type': 'str'},
        'actioninstanceid': {'key': 'actionInstanceId', 'type': 'str'},
        'repositoryactionid': {'key': 'repositoryActionId', 'type': 'str'},
        'jobid': {'key': 'jobId', 'type': 'str'},
        'threadid': {'key': 'threadId', 'type': 'str'},
        'connectionid': {'key': 'connectionId', 'type': 'str'},
        'connectionname': {'key': 'connectionName', 'type': 'str'},
        'connectionstring': {'key': 'connectionString', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '[actionSetting]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword prodigalobjectid:
        :paramtype prodigalobjectid: str
        :keyword prodigalassetname:
        :paramtype prodigalassetname: str
        :keyword actioninstanceid:
        :paramtype actioninstanceid: str
        :keyword repositoryactionid:
        :paramtype repositoryactionid: str
        :keyword jobid:
        :paramtype jobid: str
        :keyword threadid:
        :paramtype threadid: str
        :keyword connectionid:
        :paramtype connectionid: str
        :keyword connectionname:
        :paramtype connectionname: str
        :keyword connectionstring:
        :paramtype connectionstring: str
        :keyword settings:
        :paramtype settings: list[~runway.sdk.models.actionSetting]
        """
        super(threadView, self).__init__(**kwargs)
        self.prodigalobjectid = kwargs.get('prodigalobjectid', None)
        self.prodigalassetname = kwargs.get('prodigalassetname', None)
        self.actioninstanceid = kwargs.get('actioninstanceid', None)
        self.repositoryactionid = kwargs.get('repositoryactionid', None)
        self.jobid = kwargs.get('jobid', None)
        self.threadid = kwargs.get('threadid', None)
        self.connectionid = kwargs.get('connectionid', None)
        self.connectionname = kwargs.get('connectionname', None)
        self.connectionstring = kwargs.get('connectionstring', None)
        self.settings = kwargs.get('settings', None)


class tokenResponse(msrest.serialization.Model):
    """tokenResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar token:
    :vartype token: str
    :ivar expiration: Required.
    :vartype expiration: ~datetime.datetime
    """

    _validation = {
        'expiration': {'required': True},
    }

    _attribute_map = {
        'token': {'key': 'token', 'type': 'str'},
        'expiration': {'key': 'expiration', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword token:
        :paramtype token: str
        :keyword expiration: Required.
        :paramtype expiration: ~datetime.datetime
        """
        super(tokenResponse, self).__init__(**kwargs)
        self.token = kwargs.get('token', None)
        self.expiration = kwargs['expiration']


class updateConnectionRequest(createConnectionRequest):
    """updateConnectionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar groupid:
    :vartype groupid: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar assignedendpointid:
    :vartype assignedendpointid: str
    :ivar runnerid:
    :vartype runnerid: str
    :ivar actionid:
    :vartype actionid: str
    :ivar ishidden: Required.
    :vartype ishidden: bool
    :ivar settings: Dictionary of :code:`<string>`.
    :vartype settings: dict[str, str]
    :ivar id:
    :vartype id: str
    """

    _validation = {
        'ishidden': {'required': True},
    }

    _attribute_map = {
        'groupid': {'key': 'groupId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'assignedendpointid': {'key': 'assignedEndpointId', 'type': 'str'},
        'runnerid': {'key': 'runnerId', 'type': 'str'},
        'actionid': {'key': 'actionId', 'type': 'str'},
        'ishidden': {'key': 'isHidden', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword groupid:
        :paramtype groupid: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword assignedendpointid:
        :paramtype assignedendpointid: str
        :keyword runnerid:
        :paramtype runnerid: str
        :keyword actionid:
        :paramtype actionid: str
        :keyword ishidden: Required.
        :paramtype ishidden: bool
        :keyword settings: Dictionary of :code:`<string>`.
        :paramtype settings: dict[str, str]
        :keyword id:
        :paramtype id: str
        """
        super(updateConnectionRequest, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class updateJobRequest(msrest.serialization.Model):
    """updateJobRequest.

    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super(updateJobRequest, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)


class versionResponse(msrest.serialization.Model):
    """versionResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar majorversion: Required.
    :vartype majorversion: int
    :ivar minorversion: Required.
    :vartype minorversion: int
    """

    _validation = {
        'majorversion': {'required': True},
        'minorversion': {'required': True},
    }

    _attribute_map = {
        'majorversion': {'key': 'majorVersion', 'type': 'int'},
        'minorversion': {'key': 'minorVersion', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword majorversion: Required.
        :paramtype majorversion: int
        :keyword minorversion: Required.
        :paramtype minorversion: int
        """
        super(versionResponse, self).__init__(**kwargs)
        self.majorversion = kwargs['majorversion']
        self.minorversion = kwargs['minorversion']
