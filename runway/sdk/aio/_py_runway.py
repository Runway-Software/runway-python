# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.7.6, generator: @autorest/python@5.12.6)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, Optional, Union

from msrest import Deserializer, Serializer

from azure.core import AsyncPipelineClient
from azure.core.rest import AsyncHttpResponse, HttpRequest

from .. import models
from ._configuration import PyRunwayConfiguration
from .operations import AccountAssetOperations, AssetOperations, AuthenticationOperations, ClientOperations, ConnectionOperations, ContentOperations, EndpointAssetOperations, EnrollmentOperations, GroupOperations, InvitationOperations, JobOperations, JobThreadOperations, LogsOperations, RemoteShellOperations, RepositoryOperations, ResultsOperations, RoleOperations, RunnerOperations, SetOperations, TagOperations, UserOperations

class PyRunway:    # pylint: disable=too-many-instance-attributes
    """PyRunway.

    :ivar account_asset: AccountAssetOperations operations
    :vartype account_asset: Runway.Python.aio.operations.AccountAssetOperations
    :ivar asset: AssetOperations operations
    :vartype asset: Runway.Python.aio.operations.AssetOperations
    :ivar authentication: AuthenticationOperations operations
    :vartype authentication: Runway.Python.aio.operations.AuthenticationOperations
    :ivar client: ClientOperations operations
    :vartype client: Runway.Python.aio.operations.ClientOperations
    :ivar connection: ConnectionOperations operations
    :vartype connection: Runway.Python.aio.operations.ConnectionOperations
    :ivar content: ContentOperations operations
    :vartype content: Runway.Python.aio.operations.ContentOperations
    :ivar endpoint_asset: EndpointAssetOperations operations
    :vartype endpoint_asset: Runway.Python.aio.operations.EndpointAssetOperations
    :ivar enrollment: EnrollmentOperations operations
    :vartype enrollment: Runway.Python.aio.operations.EnrollmentOperations
    :ivar group: GroupOperations operations
    :vartype group: Runway.Python.aio.operations.GroupOperations
    :ivar invitation: InvitationOperations operations
    :vartype invitation: Runway.Python.aio.operations.InvitationOperations
    :ivar job: JobOperations operations
    :vartype job: Runway.Python.aio.operations.JobOperations
    :ivar job_thread: JobThreadOperations operations
    :vartype job_thread: Runway.Python.aio.operations.JobThreadOperations
    :ivar logs: LogsOperations operations
    :vartype logs: Runway.Python.aio.operations.LogsOperations
    :ivar remote_shell: RemoteShellOperations operations
    :vartype remote_shell: Runway.Python.aio.operations.RemoteShellOperations
    :ivar repository: RepositoryOperations operations
    :vartype repository: Runway.Python.aio.operations.RepositoryOperations
    :ivar results: ResultsOperations operations
    :vartype results: Runway.Python.aio.operations.ResultsOperations
    :ivar role: RoleOperations operations
    :vartype role: Runway.Python.aio.operations.RoleOperations
    :ivar runner: RunnerOperations operations
    :vartype runner: Runway.Python.aio.operations.RunnerOperations
    :ivar set: SetOperations operations
    :vartype set: Runway.Python.aio.operations.SetOperations
    :ivar tag: TagOperations operations
    :vartype tag: Runway.Python.aio.operations.TagOperations
    :ivar user: UserOperations operations
    :vartype user: Runway.Python.aio.operations.UserOperations
    :param platform:
    :type platform: str or ~Runway.Python.models.Enum6
    :param base_url: Service URL. Default value is 'https://portal.runway.host'.
    :type base_url: str
    """

    def __init__(
        self,
        platform: Optional[Union[str, "_models.Enum6"]] = None,
        base_url: str = "https://portal.runway.host",
        **kwargs: Any
    ) -> None:
        self._config = PyRunwayConfiguration(platform=platform, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.account_asset = AccountAssetOperations(self._client, self._config, self._serialize, self._deserialize)
        self.asset = AssetOperations(self._client, self._config, self._serialize, self._deserialize)
        self.authentication = AuthenticationOperations(self._client, self._config, self._serialize, self._deserialize)
        self.client = ClientOperations(self._client, self._config, self._serialize, self._deserialize)
        self.connection = ConnectionOperations(self._client, self._config, self._serialize, self._deserialize)
        self.content = ContentOperations(self._client, self._config, self._serialize, self._deserialize)
        self.endpoint_asset = EndpointAssetOperations(self._client, self._config, self._serialize, self._deserialize)
        self.enrollment = EnrollmentOperations(self._client, self._config, self._serialize, self._deserialize)
        self.group = GroupOperations(self._client, self._config, self._serialize, self._deserialize)
        self.invitation = InvitationOperations(self._client, self._config, self._serialize, self._deserialize)
        self.job = JobOperations(self._client, self._config, self._serialize, self._deserialize)
        self.job_thread = JobThreadOperations(self._client, self._config, self._serialize, self._deserialize)
        self.logs = LogsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.remote_shell = RemoteShellOperations(self._client, self._config, self._serialize, self._deserialize)
        self.repository = RepositoryOperations(self._client, self._config, self._serialize, self._deserialize)
        self.results = ResultsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.role = RoleOperations(self._client, self._config, self._serialize, self._deserialize)
        self.runner = RunnerOperations(self._client, self._config, self._serialize, self._deserialize)
        self.set = SetOperations(self._client, self._config, self._serialize, self._deserialize)
        self.tag = TagOperations(self._client, self._config, self._serialize, self._deserialize)
        self.user = UserOperations(self._client, self._config, self._serialize, self._deserialize)


    def _send_request(
        self,
        request: HttpRequest,
        **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client._send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/python/protocol/quickstart

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "PyRunway":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
